{"version":3,"sources":["../../app.fs"],"names":[],"mappings":"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","file":"app.js","sourceRoot":"c:/Users/tforkmann/Documents/1_Programming/1_test/MinimalFableSuave/code/FrontEnd/web/content","sourcesContent":["module MinimalFableSuave.App\r\n\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen FrontEnd.Pages.Testpage\r\nopen Fable.Import\r\nopen Fable.Import.Browser\r\nopen Fable.Helpers.Virtualdom\r\nopen Fable.Helpers.Virtualdom.App\r\nopen Fable.Helpers.Virtualdom.Html\r\n\r\nmodule SudokuSolver =\r\n    open System.Collections.Generic\r\n    \r\n    type Box = int\r\n    type Sudoku = Box array array\r\n    \r\n    let rows = id\r\n    let cols (sudoku:Sudoku) =\r\n        sudoku\r\n        |> Array.mapi (fun a row -> row |> Array.mapi (fun b cell -> sudoku.[b].[a]))\r\n    \r\n    let getBoxIndex count row col = \r\n       let n = row/count\r\n       let m = col/count\r\n       n * count + m\r\n    \r\n    let boxes (sudoku:Sudoku) = \r\n        let d = sudoku |> Array.length |> float |> System.Math.Sqrt |> int\r\n        let list = new List<_>()\r\n        for a in 0..(d*d) - 1 do list.Add(new List<_>())\r\n    \r\n        for a in 0..(Array.length sudoku - 1) do\r\n            for b in 0..(Array.length sudoku - 1) do\r\n                list.[getBoxIndex d a b].Add(sudoku.[a].[b])\r\n    \r\n        list \r\n          |> Seq.map Seq.toArray\r\n      \r\n    let toSudoku x : Sudoku = \r\n        x\r\n        |> Seq.map Seq.toArray\r\n        |> Seq.toArray\r\n    \r\n    let allUnique numbers =\r\n        let set = new HashSet<_>()\r\n        numbers\r\n        |> Seq.filter ((<>) 0)\r\n        |> Seq.forall set.Add\r\n    \r\n    let solvable sudoku =\r\n        rows sudoku\r\n        |> Seq.append (cols sudoku)\r\n        |> Seq.append (boxes sudoku)\r\n        |> Seq.forall allUnique\r\n    \r\n    let replaceAtPos (x:Sudoku) row col newValue :Sudoku =     \r\n        [| for a in 0..(Array.length x - 1) ->\r\n            [| for b in 0..(Array.length x - 1) -> \r\n                if a = row && b = col then newValue else x.[a].[b] |] |]\r\n    \r\n    let rec substitute row col (x:Sudoku) = \r\n        let a,b = if col >= Array.length x then row+1,0 else row,col\r\n        if a >= Array.length x then seq { yield x } else\r\n        if x.[a].[b] = 0 then \r\n            [1..Array.length x]           \r\n                |> Seq.map (replaceAtPos x a b)  \r\n                |> Seq.filter solvable                     \r\n                |> Seq.map (substitute a (b+1))\r\n                |> Seq.concat\r\n         else substitute a (b+1) x\r\n    \r\n    let getFirstSolution = substitute 0 0 >> Seq.head\r\n\r\nopen SudokuSolver\r\n\r\ntype SudokuAppState = {\r\n    Sudoku:Sudoku\r\n}\r\ntype Position = int * int\r\ntype Val = int\r\ntype Actions = \r\n    | Solve\r\n    | ChangeBox of Position * Val\r\n\r\nlet update (model:Sudoku) command =\r\n    match command with\r\n    | Solve -> getFirstSolution model\r\n    | ChangeBox ((x,y),v) ->\r\n        model.[x].[y] <- v\r\n        model\r\n    |> (fun m -> m, []) \r\n\r\nlet initModel = \r\n            [[0; 0; 8;  3; 0; 0;  6; 0; 0]\r\n             [0; 0; 4;  0; 0; 0;  0; 1; 0]\r\n             [6; 7; 0;  0; 8; 0;  0; 0; 0]\r\n\r\n             [0; 1; 6;  4; 3; 0;  0; 0; 0]\r\n             [0; 0; 0;  7; 9; 0;  0; 2; 0]\r\n             [0; 9; 0;  0; 0; 0;  4; 0; 1]\r\n\r\n             [0; 0; 0;  9; 1; 0;  0; 0; 5]\r\n             [0; 0; 3;  0; 5; 0;  0; 0; 2]\r\n             [0; 5; 0;  0; 0; 0;  0; 7; 4]]\r\n              |> toSudoku\r\n\r\nopen Fable.Helpers.Virtualdom\r\nopen Fable.Helpers.Virtualdom.App\r\nopen Fable.Helpers.Virtualdom.Html\r\n\r\nlet inline onInput x = onEvent \"oninput\" (fun e -> x (unbox e?target?value))\r\nlet maxlength (i:int) = attribute \"maxlength\" (string i) \r\nlet view (model:Sudoku) = \r\n    let inputs =\r\n         div [] \r\n            [for i in 0 .. model.Length-1 ->\r\n              div \r\n                [] \r\n                [ for j in 0 .. model.Length-1 ->\r\n                        input\r\n                            [\r\n                                maxlength 1\r\n                                property \"value\" \r\n                                    (match model.[i].[j] with\r\n                                        | 0 -> unbox \"\"\r\n                                        | v -> unbox (v.ToString()))\r\n                                onInput (fun x -> ChangeBox ((i,j), int (unbox x)))\r\n                            ]\r\n                ]\r\n            ]\r\n\r\n\r\n    div [] \r\n        [ h1 [ ] [text \"Sudoku\"]\r\n          div [] \r\n            [\r\n                inputs\r\n                br []\r\n                button [\r\n                    attribute \"class\" \"button\"\r\n                    onMouseClick (fun _ -> Solve )\r\n                ] [ text \"Solve\" ]\r\n            ]\r\n        ]\r\n\r\nopen Fable.Import.Browser\r\ncreateApp initModel view update\r\n|> withStartNodeSelector \"#todoapp\"\r\n|> withSubscriber \"allseeingeye\" (fun x -> window.console.log(\"Something happened: \", x))\r\n|> start renderer "]}