{"version":3,"sources":["../../app.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWO;AAXP,yDAeQ;AAAA,mBAAG,MAAH,GACY,iCAAR;AAAA;AAAA,iBADJ,GAGI,SAHJ;AAGY,SAlBpB;;AAoBS;AApBT;AAAA;;AAAA;AAAA;AAAA;;AAoBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AATF;;AAaE;AAxBT;AAAA;;AAAA;AAAA;AAAA;;AAwBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAMG;AAAA;AACuB;AAP1B;;AAAA;AAAA;;AAbF;;AAXP,uCAmCY;AACM;AAAA;AAIwB,0CAAhB,6BAAgB;AACI,4CAAlB,+BAAkB;;AAEnB,2BAAQ,sCAAR;AAAA;AAAA,mBAAmB,8BAAnB;;AAPT,wBAQF,UACW,kDADX,OARE,EAUiB,qBAVjB;AAAM,aAAN;;AADN;AAAA;AAAA;AAAe,SAnC3B;;AAAA,mCAmDQ;AAAA,mBAqEmB;AAAA;AA7CsB;AAAA,sFAvBrC,qBAuBqC;AAAA;AA6CV,aAAZ,EArEnB,CAEI,yBA0BgB,0DA1BhB,EAuBgC,4DAtB3B,qBAsB2B,GAvBhC,EA0BgB,0DA1BhB,EAFJ;AAIsB,SAvD9B;;AAAA,mDA2DQ;AAAA,+BAAwB;AACpB,qBAAK,oBAAK,qBAAL,EAAL;AADoB;AAAC,aAAzB;AAQA,iBAAK,oBAAK,qBAAL,EAAL;AAAuB,SAnE/B;;AAyEO,gCAAM,6BAAN,EADA;AAAA,kDAAa;AAAA;AAAY,aAAzB;AAAA,SAFH,CACG,gDADH,wCAAqB;AAAA;AAAA,SAArB,EAA0B;AAAA;AAAA;AAAA;AAAA,SAA1B,CACG,CADH,CAGG;;AA9DA;AA8Dc,KA9Dd","file":"app.js","sourceRoot":"/Users/tforkmann/Dropbox/Programming/f#/MinimalFable/code/FrontEnd/web/content","sourcesContent":["module MinimalFableSuave.App\n\nopen System\nopen Fable.Core\nopen FrontEnd.Pages.Fabletest\nopen Fable.Import\nopen Fable.Import.Browser\nopen Fable.Helpers.Virtualdom\nopen Fable.Helpers.Virtualdom.App\nopen Fable.Helpers.Virtualdom.Html\n\nmodule Clock =\n\n    /// Make sure that number have a minimal representation of 2 digits\n    let normalizeNumber x =\n        if x < 10 then\n            sprintf \"0%i\" x\n        else\n            string x\n\n    type Action =\n        | Tick of DateTime\n\n    /// A really simple type to Store our ModelChanged\n    type Model =\n        { Time: string      // Time: HH:mm:ss\n          Date: string }    // Date: YYYY/MM/DD\n\n        /// Static member giving back an init Model\n        static member init =\n            { Time = \"00:00:00\"\n              Date = \"1970/01/01\" }\n\n    /// Handle all the update of our Application\n    let update model action =\n        let model', action' =\n            match action with\n            /// Tick are push by the producer\n            | Tick datetime ->\n                // Normalize the day and month to ensure a 2 digit representation\n                let day = datetime.Day |> normalizeNumber\n                let month = datetime.Month |> normalizeNumber\n                // Create our date string\n                let date = sprintf \"%i/%s/%s\" datetime.Year month day\n                { model with\n                    Time = String.Format(\"{0:HH:mm:ss}\", datetime)\n                    Date = date }, []\n        model', action'\n\n    /// Our application view\n    let view model =\n        div\n            []\n            [ text model.Date\n              br []\n              text model.Time]\n\n    /// Producer used to send the current Time every second\n    let tickProducer push =\n        window.setInterval((fun _ ->\n            push(Tick DateTime.Now)\n            null\n        ),\n            1000) |> ignore\n        // Force the first to push to have immediate effect\n        // If we don't do that there is one second before the first push\n        // and the view is rendered with the Model.init values\n        push(Tick DateTime.Now)\n\n    /// Create and run our application\n    createApp Model.init view update\n    |> withStartNodeSelector \"#app\"\n    |> withProducer tickProducer    // Attach our producer to the app\n    |> start renderer"]}