{"version":3,"sources":["webpack:///webpack/bootstrap 750319e2892846ad7934","webpack:///./app.fs","webpack:///./~/fable-core/fable-core.js","webpack:///../~/fable-import-virtualdom/Fable.Helpers.Virtualdom.fs","webpack:///./~/virtual-dom/index.js","webpack:///./~/virtual-dom/diff.js","webpack:///./~/virtual-dom/vtree/diff.js","webpack:///./~/x-is-array/index.js","webpack:///./~/virtual-dom/vnode/vpatch.js","webpack:///./~/virtual-dom/vnode/version.js","webpack:///./~/virtual-dom/vnode/is-vnode.js","webpack:///./~/virtual-dom/vnode/is-vtext.js","webpack:///./~/virtual-dom/vnode/is-widget.js","webpack:///./~/virtual-dom/vnode/is-thunk.js","webpack:///./~/virtual-dom/vnode/handle-thunk.js","webpack:///./~/virtual-dom/vtree/diff-props.js","webpack:///./~/is-object/index.js","webpack:///./~/virtual-dom/vnode/is-vhook.js","webpack:///./~/virtual-dom/patch.js","webpack:///./~/virtual-dom/vdom/patch.js","webpack:///./~/global/document.js","webpack:///min-document (ignored)","webpack:///./~/virtual-dom/vdom/create-element.js","webpack:///./~/virtual-dom/vdom/apply-properties.js","webpack:///./~/virtual-dom/vdom/dom-index.js","webpack:///./~/virtual-dom/vdom/patch-op.js","webpack:///./~/virtual-dom/vdom/update-widget.js","webpack:///./~/virtual-dom/h.js","webpack:///./~/virtual-dom/virtual-hyperscript/index.js","webpack:///./~/virtual-dom/vnode/vnode.js","webpack:///./~/virtual-dom/vnode/vtext.js","webpack:///./~/virtual-dom/virtual-hyperscript/parse-tag.js","webpack:///./~/browser-split/index.js","webpack:///./~/virtual-dom/virtual-hyperscript/hooks/soft-set-hook.js","webpack:///./~/virtual-dom/virtual-hyperscript/hooks/ev-hook.js","webpack:///./~/ev-store/index.js","webpack:///./~/individual/one-version.js","webpack:///./~/individual/index.js","webpack:///./~/virtual-dom/create-element.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BO;AAXP,0DAeQ;AAAA,oBAAG,MAAH,GACY,iCAAR;AAAA;AAAA,kBADJ,GAGI,SAHJ;AAGY,UAlBpB;;AAoBS;AApBT;AAAA;;AAAA;AAAA;AAAA;;AAoBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AATF;;AAaE;AAxBT;AAAA;;AAAA;AAAA;AAAA;;AAwBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAMG;AAAA;AACuB;AAP1B;;AAAA;AAAA;;AAbF;;AAXP,wCAmCY;AACM;AAAA;AAIwB,2CAAhB,6BAAgB;AACI,6CAAlB,+BAAkB;;AAEnB,4BAAQ,sCAAR;AAAA;AAAA,oBAAmB,8BAAnB;;AAPT,yBAQF,UACW,kDADX,OARE,EAUiB,qBAVjB;AAAM,cAAN;;AADN;AAAA;AAAA;AAAe,UAnC3B;;AAAA,oCAmDQ;AAAA,oBAqEmB;AAAA;AA7CsB;AAAA,uFAvBrC,qBAuBqC;AAAA;AA6CV,cAAZ,EArEnB,CAEI,yBA0BgB,0DA1BhB,EAuBgC,4DAtB3B,qBAsB2B,GAvBhC,EA0BgB,0DA1BhB,EAFJ;AAIsB,UAvD9B;;AAAA,oDA2DQ;AAAA,gCAAwB;AACpB,sBAAK,oBAAK,qBAAL,EAAL;AADoB;AAAC,cAAzB;AAQA,kBAAK,oBAAK,qBAAL,EAAL;AAAuB,UAnE/B;;AAyEO,iCAAM,6BAAN,EADA;AAAA,mDAAa;AAAA;AAAY,cAAzB;AAAA,UAFH,CACG,gDADH,wCAAqB;AAAA;AAAA,UAArB,EAA0B;AAAA;AAAA;AAAA;AAAA,UAA1B,CACG,CADH,CAGG;;AA9DA;AA8Dc,MA9Dd;;;;;;;;iGCXP;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD;;AAEA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0DAAyD,+BAA+B;AACxF;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA,4BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,uBAAuB;AAC1D;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6GAA4G,eAAe;AAC3H;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,oGAAmG,aAAa;AAChH;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA,6CAA4C,iCAAiC,6EAA6E;AAC1J;AACA,cAAa,cAAc,sDAAsD,uEAAuE;AACxJ;;AAEA;AACA,sDAAqD,8BAA8B,0EAA0E;AAC7J;AACA,cAAa,WAAW,2EAA2E;AACnG;;AAEA;AACA;AACA,4BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAwB;AACxB;AACA;AACA;;AAEA;AACA;AACA,oCAAmC;AACnC,cAAa,IAAI;AACjB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,8CAA6C;AAC7C,0BAAyB,GAAG,wEAAwE;AACpG,sBAAqB;AACrB;AACA,mDAAkD,6BAA6B;AAC/E,0BAAyB;AACzB;AACA;AACA,uCAAsC;AACtC,4CAA2C,kBAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA,yCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,eAAe,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,EAAE,qCAAqC;AACjI,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,4BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,mBAAmB;AACnD;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK,+CAA+C;;AAEpD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA2B,WAAW;AACtC;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;AAC7B;AACA,yCAAwC;AACxC;AACA,kCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mGAAkG,eAAe;AACjH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA2D,aAAa,EAAE,QAAQ,EAAE,UAAU,GAAG,KAAK,EAAE,KAAK;AAC7G,kCAAiC;AACjC;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA2B,OAAO;AAClC;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA4B,WAAW;AACvC;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oGAAmG,eAAe;AAClH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA,+BAA8B,4BAA4B;AAC1D;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAAyC,EAAE;AAC3C;;AAEA;AACA,6CAA4C,EAAE;AAC9C;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wDAAuD;AACvD;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA,+BAA8B;AAC9B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC,aAAa;AAChD;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA2B,eAAe;AAC1C,+CAA8C;AAC9C,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,4BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,8BAA6B,iBAAiB;AAC9C;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kGAAiG,mCAAmC,aAAa;AACjJ;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,4BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qEAAoE;AACpE;;AAEA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA;AACA,gEAA+D,iCAAiC;AAChG;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA;AACA,4DAA2D,6BAA6B;AACxF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC,QAAQ;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4BAA2B,QAAQ;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA,cAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;;AAEA;AACA,sCAAqC;AACrC;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA,+DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAwC,QAAQ;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAwC,QAAQ;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,2DAA0D;AAC1D;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAwC,QAAQ;AAChD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAuC,QAAQ;AAC/C;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA,sCAAqC;AACrC;AACA,gCAA+B,QAAQ;AACvC;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,qCAAoC;AACpC;AACA,iCAAgC;AAChC;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb,8CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA,kCAAiC;AACjC;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C;AAC7C;AACA;AACA,0CAAyC;AACzC;AACA;AACA,sCAAqC;AACrC;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,kCAAiC;AACjC;AACA;AACA,sCAAqC;AACrC;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yEAAwE;AACxE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qEAAoE,gEAAgE;AACpI;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uEAAsE,mEAAmE;AACzI;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uEAAsE,mEAAmE;AACzI;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B;AAC5B,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yEAAwE;AACxE;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA,4EAA2E;AAC3E;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB,EAAE;AACnB;AACA,kBAAiB;AACjB;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,cAAa,EAAE;AACf;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,sHAAqH;AACrH;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,mCAAkC;AAClC,sBAAqB;AACrB,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,cAAa;AACb;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,EAAE;AACf;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,sBAAqB;AACrB,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,mCAAkC;AAClC,sBAAqB;AACrB,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;AACL,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC97IM;AAEI;AAOE,kDA3Bb;AAAA;;AAAA;AAAA;AAAA,cA2Ba;;AAPF;;AAgBE,8CApCb;AAAA;;AAAA;AAAA;AAAA,cAoCa;;AAhBF;;AAAA;AApBX,UAoBW;;AApBX,0DAgDgE;AAAA;AAAA;AAAA;AAA6B,UAhD7F;;AAAA,sDAmDc;AAAA,iDAEO;AAAA;AAAA;AAAO,cAAP,EAFP,mCAGW;AAAA;AAAA;AAAW,cAAX,EAHX,oCAIY;AAAA;AAAA;AAAY,cAAZ,EAJZ,GACgB;AAAA;AAAA;AAAA;AAAA;AAA0B,cAA1B,EADhB;AAAS,UAnDvB;;AAAA,0CAyDiD;AAAA;AACrC;AAAA;AADqC,0BAE1B,oBAAU;AAAA;AAAA,cAAV,QAF0B;AAAI,UAzDrD;;AAAA,kDA6DqD;AAAA;AACzC;AAAA;AADyC,0BAE9B,oBAAU;AAAA;AAAA,cAAV,QAF8B;AAAI,UA7DzD;;AAAA,kCAkEc;AAAA,kDAEe;AAAA;AAAA,0DAAY;AAAA;AAAA;AAAA;AAAsB,kBAAtB,EAAZ;AAAmC,cAAnC,EAFf,0BAGO;AAAA;AAAA;AAAM,cAAN,EAHP,gCAIc;AAAA;AAAA;AAAa,cAAb,EAJd,yBAKS;AAAA;AAAA;AAAA,sDAAQ;AAAA;AAAA;AAAA;AAAiB,kBAAjB,EAAR,EAAiC,oBAAU;AAAA;AAAA,kBAAV,KAAjC;AAAwD,cAAxD,EALT,GACa;AAAA;AAAA;AAAA,sDAAQ;AAAA;AAAA;AAAA;AAAiB,kBAAjB,EAAR,EAAiC,oBAAU;AAAA;AAAA,kBAAV,KAAjC;AAAwD,cAAxD,EADb;AAAI,UAlElB;;AA0EW;AAAA;AAAI,UAAJ;;AAuIA;AAAA;AAAU,UAAV;;AAmBA;AAAA;AAAM,UAAN;;AA0FA;AA9TX,0CA+ToB;AAAA;AAA4D,cA/ThF;;AA8TW;AA9TX,UA8TW;;AA5SJ;AAlBP,MAkBO;;AAkUA;AApVP,8CAyViB;AAAA;AAAA;AAAA;AAAqB,UAzVtC;;AAAA,gDA2VuB;AAAU;AAAA;AAAA;AAAW,kBAAX;AAAA;;AAAV;AAAA;AAAA;AAAsB,UA3V7C;;AAAA,oDA4VyB;AAAA;AAAG,UA5V5B;;AA8VS;AA9VT;AAAA;;AAAA;AAAA;AAAA;;AA8VS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAVF;;AAiBE;AArWT;AAAA;;AAAA;AAAA;AAAA;;AAqWS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAjBF;;AAqBE,kCAzWT;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAyWS;;AArBF;;AAoCE,0DAxXT;AAAA;;AAAA;AAAA;AAAA,UAwXS;;AApCF;;AAuCE,gDA3XT;AAAA;;AAAA;AAAA;AAAA,UA2XS;;AAvCF;;AA6CE,4CAjYT;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,UAiYS;;AA7CF;;AApVP,8CA0YQ;AAAA;AAAA;AAMgB;;AACE;AAAA;AAAA;;AAPlB;AAUkB;AAVlB,8DAWc,qBAXd;AAaC,UAvZT;;AAAA,0DA0ZQ;AAAA;AAAA;AAAA,6BAAkC,YAAlC,EAA+C,qBAA/C;AAAA;AAAA;AAAkD,UA1Z1D;;AAAA,sEA4Z6C;AAAA;AAAA;AAAyC,UA5ZtF;;AAAA,0DA6ZkC;AAAA;AAAA;AAAmC,UA7ZrE;;AAAA,oDA+ZQ;AAAsB;;AAAtB;AAAuC,UA/Z/C;;AAAA,wDAiaY;AAAa,8BAAmB;AAAA;AAAA,cAAnB;;AACjB;AADc,UAjatB;;AAAA,0DAqaQ;AAAA,sDACI;AACI;AAAA;AAAA,+CACI;AAAA,kDAAe,eAAf,EACA;AAAA;AAAM;AAAA;AAEF;AACA,4DAAQ,MAAR;AAAc,8BAJlB;AAAA,0BADJ;AAAA;AAAA;;AAOJ;AAAM,cATV;AAUC,UA/aT;;AAAA,oEAkbY;AAAO;AACI;AACf;AACM;AAAA;;AAAA,yCAES;AAAA;AAAA;AAAS;AAFD;AAHnB;AAAA;AAMJ;AANQ,UAlbhB;;AAAA,sDA2bQ;AAAuB,sCAAvB;AACwB;AAApB;AAAA;;AAGM;AAAA;;AAAA,uDAKU;AAAA;AAAU,kBALpB,MAEF;AAAA;AAEA;AAAU;AAJS,cAAjB;;AAUQ;;AAJlB;AAI2C,UAzcnD;;AAAA,gDA4cc;AAAA;;AAAA,kDAUS;AAAA;AAA8B,cAVvC,MAEF;AAAe,0CAAf;AACY;AACD;AACG;AACd;;AACiB,wCAAoB;AAAA;AAAM,kBAA1B;;AACsB,0CAAvC,CAAC,mDAAD;AAC0B;AAP1B;AAOwE;AAAxE;AAA2E;AATxD,UA5c/B;;AAAA,sCAydY;AACA;AAAA;AAAA;AAAA,gCACG,wBADH;AAAA;AAAA;AAAA;;AAIM;AAAA;;AAAA,yCAEQ;AAAA;AAAA;AAAgD,kBAFxD,MACI;AAAA;AAAa;AADD,cAAhB;;AAIM;AAChB,sDACQ;AACA;AAAA,gCAAY,oCAAZ;AAA4B,kBAA5B;;AAEQ;AAAA;AAAA,gDAA6B;AAAA;AAAa,0BAA1C;AAA2C,sBAA3C;AAAA;;AACK,wCAAoB;AAAA;AAAM,kBAA1B;;AACA;AAAA,oCAAe,+BAAO,SAAP,EAA4B;AAAA,oCAAW,0BAAX;AAAgB,sBAA5C,EAAf;AAA8D,kBAA9D;;AAEb;AAAA;AAAA,+CACU;AAAA;;AAAA;AAAA;AAIW;AAAf;AACE,0DAAe,eAAf,EACA;AAAA;;AAAM,yEAEE;AAAA;AAAS;AACb,wEAAQ,YAAR;AADU,0CAFR;AAAA,0EAKE;AAAS;AACb,4EAAQ,YAAR;AADU,8CALR,MAOC;AAAA,4EAAQ,WAAR;AAAkB;AAPZ;AAOY,sCARzB;AAL+B,kCAA7B,MAcC;AAAA;AAAA;AAA2B;AAdC,8BAA7B,MAEE;AAAS;AACb,4DAAQ,YAAR;AADU;AAFqB,0BADvC;AAAA;AAAA;;AAiBJ;AAxBgB,cADpB;AAViC,UAzdzC;;AAoVO;AApVP,MAoVO;;AA2KC;AACI;AACA,gCAKI;AAAA,oDAA6B;AAAA;AAAA,2CAAwB,4BAAxB;AAAsC,kBAAtC,EAA7B;AAAA,cALJ,CAIG;AAAA;AAAA,gBAHA,oBAAU;AAAA,qDACY;AAAA;AAAA;AAAA;AAAiB,kBAAjB,EADZ;AAAA,cAAV,QAGA,CAJH;;AASG,6CAAU;AAAA,iDAEQ;AAAA;AAAA,sCAAY,gCAAZ;AAAkC,kBAAlC,EAFR,+BAGW;AAAA;AAAA;AAAA;AAAO,kBAAP,EAHX,mCAIe;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B,kBAA9B,EAJf,GACQ;AAAA;AAA2B,kBAA3B,EADR;AAAA,cAAV,EADA,uBAAa;AAAA;AAAA,cAAb,QACA;;AAUJ,8CAHG,uBAEM;AAAA;AAAA;AAAQ,cAAR,EAFN,QAGH;AApBa,UAAZ;;AAqBG,4CAAO,mBAAP,EAA2B,oBAA3B;AAtBP;AAAkC;;AA0BhC;AAEuB;AAAA,oDAAuC,oBAAU;AAAA;AAAA,cAAV,QAAvC;AAAA;;AAFvB;AAAA;AAAI,UAAJ;AAAA,8CAGwB;AAAA;AAAA;AAAA,wDAA6B,qBAA7B;AAA+B,cAHvD;AAAA,2CAIQ;AAAA;AAAA;AAAe,kBAJvB;AAAA,qDAKc;AAAA;AAAA;AAAe,sBAL7B;AAAA;AAAI;AAAA;AAAA;AAAA;AAAA;;AAQV;AAAA,iCACa;AAAA;AAAA;AAAA;AAAA,UADb,EAEW;AAAA;AAAA;AAAA;AAAA,UAFX,EAGY;AAAA;AAAA;AAAA;AAAA,UAHZ,EAIoB;AAAA;AAAA,UAJpB;AAKC;;;;;;;;ACtiBL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACdA;;AAEA;;;;;;;ACFA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAmB,SAAS;AAC5B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,wBAAuB,SAAS;AAChC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4BAA2B,SAAS;AACpC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAoB,sBAAsB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAmB,sBAAsB;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAmB,sBAAsB;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA0C,2BAA2B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC,2BAA2B;AACjE;AACA;AACA;AACA,mCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAmB,YAAY;AAC/B;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA,MAAK;AACL;AACA;AACA;;;;;;;AC1aA;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;ACPA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACrBA;;;;;;;ACAA;;AAEA;;AAEA;AACA;AACA;;;;;;;ACNA;;AAEA;;AAEA;AACA;AACA;;;;;;;ACNA;;AAEA;AACA;AACA;;;;;;;ACJA;;AAEA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACvCA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;;;;;;ACzDA;;AAEA;AACA;AACA;;;;;;;ACJA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACNA;;AAEA;;;;;;;ACFA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wBAAuB,sBAAsB;AAC7C;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AC/EA;AACA;AACA;;AAEA;AACA;AACA,EAAC;AACD;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;ACdA,gB;;;;;;ACAA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;AC7CA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;;;;;;;AChGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,4BAA2B,0BAA0B;AACrD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;ACpFA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACtJA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;;;;;;ACdA;;AAEA;;;;;;;ACFA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL,wBAAuB,cAAc;AACrC;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;;;;;;ACxIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACvEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;ACTA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,gBAAe,qBAAqB;AACpC;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,cAAc;AACzB,YAAW,OAAO;AAClB,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAqD;AACrD;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,EAAC;;;;;;;ACzGD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AChBA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;AC1BA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;ACnBA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;ACrBA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;AClBA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 750319e2892846ad7934\n **/","module MinimalFableSuave.App\n\nopen System\nopen Fable.Core\nopen FrontEnd.Pages.Testpage\nopen Fable.Import\nopen Fable.Import.Browser\nopen Fable.Helpers.Virtualdom\nopen Fable.Helpers.Virtualdom.App\nopen Fable.Helpers.Virtualdom.Html\n\nmodule Clock =\n\n    /// Make sure that number have a minimal representation of 2 digits\n    let normalizeNumber x =\n        if x < 10 then\n            sprintf \"0%i\" x\n        else\n            string x\n\n    type Action =\n        | Tick of DateTime\n\n    /// A really simple type to Store our ModelChanged\n    type Model =\n        { Time: string      // Time: HH:mm:ss\n          Date: string }    // Date: YYYY/MM/DD\n\n        /// Static member giving back an init Model\n        static member init =\n            { Time = \"00:00:00\"\n              Date = \"1970/01/01\" }\n\n    /// Handle all the update of our Application\n    let update model action =\n        let model', action' =\n            match action with\n            /// Tick are push by the producer\n            | Tick datetime ->\n                // Normalize the day and month to ensure a 2 digit representation\n                let day = datetime.Day |> normalizeNumber\n                let month = datetime.Month |> normalizeNumber\n                // Create our date string\n                let date = sprintf \"%i/%s/%s\" datetime.Year month day\n                { model with\n                    Time = String.Format(\"{0:HH:mm:ss}\", datetime)\n                    Date = date }, []\n        model', action'\n\n    /// Our application view\n    let view model =\n        div\n            []\n            [ text model.Date\n              br []\n              text model.Time]\n\n    /// Producer used to send the current Time every second\n    let tickProducer push =\n        window.setInterval((fun _ ->\n            push(Tick DateTime.Now)\n            null\n        ),\n            1000) |> ignore\n        // Force the first to push to have immediate effect\n        // If we don't do that there is one second before the first push\n        // and the view is rendered with the Model.init values\n        push(Tick DateTime.Now)\n\n    /// Create and run our application\n    createApp Model.init view update\n    |> withStartNodeSelector \"#app\"\n    |> withProducer tickProducer    // Attach our producer to the app\n    |> start renderer\n\n\n/** WEBPACK FOOTER **\n ** ./app.fs\n **/","(function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define([\"exports\"], factory);\n    } else if (typeof exports !== \"undefined\") {\n        factory(exports);\n    } else {\n        var mod = {\n            exports: {}\n        };\n        factory(mod.exports);\n        global.fableCore = mod.exports;\n    }\n})(this, function (exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.Tuple = Tuple;\n    exports.Tuple3 = Tuple3;\n\n    var _slicedToArray = function () {\n        function sliceIterator(arr, i) {\n            var _arr = [];\n            var _n = true;\n            var _d = false;\n            var _e = undefined;\n\n            try {\n                for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n                    _arr.push(_s.value);\n\n                    if (i && _arr.length === i) break;\n                }\n            } catch (err) {\n                _d = true;\n                _e = err;\n            } finally {\n                try {\n                    if (!_n && _i[\"return\"]) _i[\"return\"]();\n                } finally {\n                    if (_d) throw _e;\n                }\n            }\n\n            return _arr;\n        }\n\n        return function (arr, i) {\n            if (Array.isArray(arr)) {\n                return arr;\n            } else if (Symbol.iterator in Object(arr)) {\n                return sliceIterator(arr, i);\n            } else {\n                throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n            }\n        };\n    }();\n\n    function _defineProperty(obj, key, value) {\n        if (key in obj) {\n            Object.defineProperty(obj, key, {\n                value: value,\n                enumerable: true,\n                configurable: true,\n                writable: true\n            });\n        } else {\n            obj[key] = value;\n        }\n\n        return obj;\n    }\n\n    function _possibleConstructorReturn(self, call) {\n        if (!self) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n    }\n\n    function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n                value: subClass,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n    }\n\n    var _createClass = function () {\n        function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n        };\n    }();\n\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n        return typeof obj;\n    } : function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n    };\n\n    function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n        }\n    }\n\n    var fableGlobal = function () {\n        var globalObj = typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : null;\n        if (typeof globalObj.__FABLE_CORE__ == \"undefined\") {\n            globalObj.__FABLE_CORE__ = {\n                types: new Map(),\n                symbols: {\n                    interfaces: Symbol(\"interfaces\"),\n                    typeName: Symbol(\"typeName\")\n                }\n            };\n        }\n        return globalObj.__FABLE_CORE__;\n    }();\n    var FSymbol = fableGlobal.symbols;\n    exports.Symbol = FSymbol;\n    function Tuple(x, y) {\n        return [x, y];\n    }\n    function Tuple3(x, y, z) {\n        return [x, y, z];\n    }\n\n    var Util = exports.Util = function () {\n        function Util() {\n            _classCallCheck(this, Util);\n        }\n\n        // For legacy reasons the name is kept, but this method also adds\n        // the type name to a cache. Use it after declaration:\n        // Util.setInterfaces(Foo.prototype, [\"IFoo\", \"IBar\"], \"MyModule.Foo\");\n        Util.setInterfaces = function setInterfaces(proto, interfaces, typeName) {\n            if (Array.isArray(interfaces) && interfaces.length > 0) {\n                var currentInterfaces = proto[FSymbol.interfaces];\n                if (Array.isArray(currentInterfaces)) {\n                    for (var i = 0; i < interfaces.length; i++) {\n                        if (currentInterfaces.indexOf(interfaces[i]) == -1) currentInterfaces.push(interfaces[i]);\n                    }\n                } else proto[FSymbol.interfaces] = interfaces;\n            }\n            if (typeName) {\n                proto[FSymbol.typeName] = typeName;\n                fableGlobal.types.set(typeName, proto.constructor);\n            }\n        };\n\n        Util.hasInterface = function hasInterface(obj) {\n            for (var _len2 = arguments.length, interfaceNames = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                interfaceNames[_key2 - 1] = arguments[_key2];\n            }\n\n            return Array.isArray(obj[FSymbol.interfaces]) && obj[FSymbol.interfaces].some(function (x) {\n                return interfaceNames.indexOf(x) >= 0;\n            });\n        };\n\n        Util.getTypeFullName = function getTypeFullName(cons) {\n            if (cons.prototype && cons.prototype[FSymbol.typeName]) {\n                return cons.prototype[FSymbol.typeName];\n            } else {\n                return cons.name || \"unknown\";\n            }\n        };\n\n        Util.getTypeNamespace = function getTypeNamespace(cons) {\n            var fullName = Util.getTypeFullName(cons);\n            var i = fullName.lastIndexOf('.');\n            return i > -1 ? fullName.substr(0, i) : \"\";\n        };\n\n        Util.getTypeName = function getTypeName(cons) {\n            var fullName = Util.getTypeFullName(cons);\n            var i = fullName.lastIndexOf('.');\n            return fullName.substr(i + 1);\n        };\n\n        Util.getRestParams = function getRestParams(args, idx) {\n            for (var _len = args.length, restArgs = Array(_len > idx ? _len - idx : 0), _key = idx; _key < _len; _key++) {\n                restArgs[_key - idx] = args[_key];\n            }return restArgs;\n        };\n\n        Util.toString = function toString(o) {\n            return o != null && typeof o.ToString == \"function\" ? o.ToString() : String(o);\n        };\n\n        Util.equals = function equals(x, y) {\n            if (x == null) return y == null;else if (y == null) return false;else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y)) return false;else if (Array.isArray(x) || ArrayBuffer.isView(x)) return x.length != y.length ? false : Seq.fold2(function (prev, v1, v2) {\n                return !prev ? prev : Util.equals(v1, v2);\n            }, true, x, y);else if (x instanceof Date) return FDate.equals(x, y);else if (Util.hasInterface(x, \"System.IEquatable\")) return x.Equals(y);else return x === y;\n        };\n\n        Util.compare = function compare(x, y) {\n            if (x == null) return y == null ? 0 : -1;else if (y == null) return -1;else if (Object.getPrototypeOf(x) !== Object.getPrototypeOf(y)) return -1;else if (Array.isArray(x) || ArrayBuffer.isView(x)) return x.length != y.length ? x.length < y.length ? -1 : 1 : Seq.fold2(function (prev, v1, v2) {\n                return prev !== 0 ? prev : Util.compare(v1, v2);\n            }, 0, x, y);else if (Util.hasInterface(x, \"System.IComparable\")) return x.CompareTo(y);else return x < y ? -1 : x > y ? 1 : 0;\n        };\n\n        Util.equalsRecords = function equalsRecords(x, y) {\n            var keys = Object.getOwnPropertyNames(x);\n            for (var i = 0; i < keys.length; i++) {\n                if (!Util.equals(x[keys[i]], y[keys[i]])) return false;\n            }\n            return true;\n        };\n\n        Util.compareRecords = function compareRecords(x, y) {\n            var keys = Object.getOwnPropertyNames(x);\n            for (var i = 0; i < keys.length; i++) {\n                var res = Util.compare(x[keys[i]], y[keys[i]]);\n                if (res !== 0) return res;\n            }\n            return 0;\n        };\n\n        Util.equalsUnions = function equalsUnions(x, y) {\n            if (x.Case !== y.Case) return false;\n            for (var i = 0; i < x.Fields.length; i++) {\n                if (!Util.equals(x.Fields[i], y.Fields[i])) return false;\n            }\n            return true;\n        };\n\n        Util.compareUnions = function compareUnions(x, y) {\n            var res = Util.compare(x.Case, y.Case);\n            if (res !== 0) return res;\n            for (var i = 0; i < x.Fields.length; i++) {\n                res = Util.compare(x.Fields[i], y.Fields[i]);\n                if (res !== 0) return res;\n            }\n            return 0;\n        };\n\n        Util.createDisposable = function createDisposable(f) {\n            var disp = { Dispose: f };\n            disp[FSymbol.interfaces] = [\"System.IDisposable\"];\n            return disp;\n        };\n\n        Util.createObj = function createObj(fields) {\n            return Seq.fold(function (acc, kv) {\n                acc[kv[0]] = kv[1];return acc;\n            }, {}, fields);\n        };\n\n        Util.toJson = function toJson(o) {\n            return JSON.stringify(o, function (k, v) {\n                if (ArrayBuffer.isView(v)) {\n                    return Array.from(v);\n                } else if (v != null && (typeof v === \"undefined\" ? \"undefined\" : _typeof(v)) === \"object\") {\n                    if (v instanceof List || v instanceof FSet || v instanceof Set) {\n                        return {\n                            $type: v[FSymbol.typeName] || \"System.Collections.Generic.HashSet\",\n                            $values: Array.from(v) };\n                    } else if (v instanceof FMap || v instanceof Map) {\n                        return Seq.fold(function (o, kv) {\n                            o[kv[0]] = kv[1];return o;\n                        }, { $type: v[FSymbol.typeName] || \"System.Collections.Generic.Dictionary\" }, v);\n                    } else if (v[FSymbol.typeName]) {\n                        if (Util.hasInterface(v, \"FSharpUnion\", \"FSharpRecord\", \"FSharpException\")) {\n                            return Object.assign({ $type: v[FSymbol.typeName] }, v);\n                        } else {\n                            var proto = Object.getPrototypeOf(v),\n                                props = Object.getOwnPropertyNames(proto),\n                                _o = { $type: v[FSymbol.typeName] };\n                            for (var i = 0; i < props.length; i++) {\n                                var prop = Object.getOwnPropertyDescriptor(proto, props[i]);\n                                if (prop.get) _o[props[i]] = prop.get.apply(v);\n                            }\n                            return _o;\n                        }\n                    }\n                }\n                return v;\n            });\n        };\n\n        Util.ofJson = function ofJson(json, expected) {\n            var parsed = JSON.parse(json, function (k, v) {\n                if (v == null) return v;else if ((typeof v === \"undefined\" ? \"undefined\" : _typeof(v)) === \"object\" && typeof v.$type === \"string\") {\n                    // Remove generic args and assembly info added by Newtonsoft.Json\n                    var type = v.$type.replace('+', '.'),\n                        i = type.indexOf('`');\n                    if (i > -1) {\n                        type = type.substr(0, i);\n                    } else {\n                        i = type.indexOf(',');\n                        type = i > -1 ? type.substr(0, i) : type;\n                    }\n                    if (type === \"System.Collections.Generic.List\" || type.indexOf(\"[]\") === type.length - 2) {\n                        return v.$values;\n                    }\n                    if (type === \"Microsoft.FSharp.Collections.FSharpList\") {\n                        return List.ofArray(v.$values);\n                    } else if (type == \"Microsoft.FSharp.Collections.FSharpSet\") {\n                        return FSet.create(v.$values);\n                    } else if (type == \"System.Collections.Generic.HashSet\") {\n                        return new Set(v.$values);\n                    } else if (type == \"Microsoft.FSharp.Collections.FSharpMap\") {\n                        delete v.$type;\n                        return FMap.create(Object.getOwnPropertyNames(v).map(function (k) {\n                            return [k, v[k]];\n                        }));\n                    } else if (type == \"System.Collections.Generic.Dictionary\") {\n                        delete v.$type;\n                        return new Map(Object.getOwnPropertyNames(v).map(function (k) {\n                            return [k, v[k]];\n                        }));\n                    } else {\n                        var T = fableGlobal.types.get(type);\n                        if (T) {\n                            delete v.$type;\n                            return Object.assign(new T(), v);\n                        }\n                    }\n                } else if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:[+-]\\d{2}:\\d{2}|Z)$/.test(v)) return FDate.parse(v);else return v;\n            });\n            if (parsed != null && typeof expected == \"function\" && !(parsed instanceof expected)) {\n                throw \"JSON is not of type \" + expected.name + \": \" + json;\n            }\n            return parsed;\n        };\n\n        return Util;\n    }();\n\n    Util.toPlainJsObj = function (source) {\n        if (source != null && source.constructor != Object) {\n            var target = {};\n            var props = Object.getOwnPropertyNames(source);\n            for (var i = 0; i < props.length; i++) {\n                target[props[i]] = source[props[i]];\n            }\n            // Copy also properties from prototype, see #192\n            var proto = Object.getPrototypeOf(source);\n            if (proto != null) {\n                props = Object.getOwnPropertyNames(proto);\n                for (var _i = 0; _i < props.length; _i++) {\n                    var prop = Object.getOwnPropertyDescriptor(proto, props[_i]);\n                    if (prop.value) {\n                        target[props[_i]] = prop.value;\n                    } else if (prop.get) {\n                        target[props[_i]] = prop.get.apply(source);\n                    }\n                }\n            }\n            return target;\n        } else {\n            return source;\n        }\n    };\n\n    var GenericComparer = exports.GenericComparer = function GenericComparer(f) {\n        _classCallCheck(this, GenericComparer);\n\n        this.Compare = f || Util.compare;\n    };\n\n    Util.setInterfaces(GenericComparer.prototype, [\"System.IComparer\"], \"Fable.Core.GenericComparer\");\n\n    var Choice = exports.Choice = function () {\n        function Choice(t, d) {\n            _classCallCheck(this, Choice);\n\n            this.Case = t;\n            this.Fields = d;\n        }\n\n        Choice.Choice1Of2 = function Choice1Of2(v) {\n            return new Choice(\"Choice1Of2\", [v]);\n        };\n\n        Choice.Choice2Of2 = function Choice2Of2(v) {\n            return new Choice(\"Choice2Of2\", [v]);\n        };\n\n        Choice.prototype.Equals = function Equals(other) {\n            return Util.equalsUnions(this, other);\n        };\n\n        Choice.prototype.CompareTo = function CompareTo(other) {\n            return Util.compareUnions(this, other);\n        };\n\n        _createClass(Choice, [{\n            key: \"valueIfChoice1\",\n            get: function get() {\n                return this.Case === \"Choice1Of2\" ? this.Fields[0] : null;\n            }\n        }, {\n            key: \"valueIfChoice2\",\n            get: function get() {\n                return this.Case === \"Choice2Of2\" ? this.Fields[0] : null;\n            }\n        }]);\n\n        return Choice;\n    }();\n\n    Util.setInterfaces(Choice.prototype, [\"FSharpUnion\", \"System.IEquatable\", \"System.IComparable\"], \"Microsoft.FSharp.Core.FSharpChoice\");\n\n    var TimeSpan = exports.TimeSpan = function (_Number) {\n        _inherits(TimeSpan, _Number);\n\n        function TimeSpan() {\n            _classCallCheck(this, TimeSpan);\n\n            return _possibleConstructorReturn(this, _Number.apply(this, arguments));\n        }\n\n        TimeSpan.create = function create() {\n            var d = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n            var h = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n            var m = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n            var s = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n            var ms = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];\n\n            switch (arguments.length) {\n                case 1:\n                    // ticks\n                    return this.fromTicks(arguments[0]);\n                case 3:\n                    // h,m,s\n                    d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\n                    break;\n                default:\n                    // d,h,m,s,ms\n                    d = arguments[0], h = arguments[1], m = arguments[2], s = arguments[3], ms = arguments[4] || 0;\n                    break;\n            }\n            return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\n        };\n\n        TimeSpan.fromTicks = function fromTicks(ticks) {\n            return ticks / 10000;\n        };\n\n        TimeSpan.fromDays = function fromDays(d) {\n            return TimeSpan.create(d, 0, 0, 0);\n        };\n\n        TimeSpan.fromHours = function fromHours(h) {\n            return TimeSpan.create(h, 0, 0);\n        };\n\n        TimeSpan.fromMinutes = function fromMinutes(m) {\n            return TimeSpan.create(0, m, 0);\n        };\n\n        TimeSpan.fromSeconds = function fromSeconds(s) {\n            return TimeSpan.create(0, 0, s);\n        };\n\n        TimeSpan.days = function days(ts) {\n            return Math.floor(ts / 86400000);\n        };\n\n        TimeSpan.hours = function hours(ts) {\n            return Math.floor(ts % 86400000 / 3600000);\n        };\n\n        TimeSpan.minutes = function minutes(ts) {\n            return Math.floor(ts % 3600000 / 60000);\n        };\n\n        TimeSpan.seconds = function seconds(ts) {\n            return Math.floor(ts % 60000 / 1000);\n        };\n\n        TimeSpan.milliseconds = function milliseconds(ts) {\n            return Math.floor(ts % 1000);\n        };\n\n        TimeSpan.ticks = function ticks(ts) {\n            return ts * 10000;\n        };\n\n        TimeSpan.totalDays = function totalDays(ts) {\n            return ts / 86400000;\n        };\n\n        TimeSpan.totalHours = function totalHours(ts) {\n            return ts / 3600000;\n        };\n\n        TimeSpan.totalMinutes = function totalMinutes(ts) {\n            return ts / 60000;\n        };\n\n        TimeSpan.totalSeconds = function totalSeconds(ts) {\n            return ts / 1000;\n        };\n\n        TimeSpan.negate = function negate(ts) {\n            return ts * -1;\n        };\n\n        TimeSpan.add = function add(ts1, ts2) {\n            return ts1 + ts2;\n        };\n\n        TimeSpan.subtract = function subtract(ts1, ts2) {\n            return ts1 - ts2;\n        };\n\n        return TimeSpan;\n    }(Number);\n\n    TimeSpan.compare = Util.compare;\n    TimeSpan.compareTo = Util.compare;\n    TimeSpan.duration = Math.abs;\n    var DateKind = exports.DateKind = undefined;\n    (function (DateKind) {\n        DateKind[DateKind[\"UTC\"] = 1] = \"UTC\";\n        DateKind[DateKind[\"Local\"] = 2] = \"Local\";\n    })(DateKind || (exports.DateKind = DateKind = {}));\n\n    var FDate = function (_Date) {\n        _inherits(FDate, _Date);\n\n        function FDate() {\n            _classCallCheck(this, FDate);\n\n            return _possibleConstructorReturn(this, _Date.apply(this, arguments));\n        }\n\n        FDate.__changeKind = function __changeKind(d, kind) {\n            var d2 = void 0;\n            return d.kind == kind ? d : (d2 = new Date(d.getTime()), d2.kind = kind, d2);\n        };\n\n        FDate.__getValue = function __getValue(d, key) {\n            return d[(d.kind == DateKind.UTC ? \"getUTC\" : \"get\") + key]();\n        };\n\n        FDate.minValue = function minValue() {\n            return FDate.parse(-8640000000000000, 1);\n        };\n\n        FDate.maxValue = function maxValue() {\n            return FDate.parse(8640000000000000, 1);\n        };\n\n        FDate.parse = function parse(v, kind) {\n            var date = v == null ? new Date() : new Date(v);\n            if (isNaN(date.getTime())) throw \"The string is not a valid Date.\";\n            date.kind = kind || (typeof v == \"string\" && v.slice(-1) == \"Z\" ? DateKind.UTC : DateKind.Local);\n            return date;\n        };\n\n        FDate.create = function create(year, month, day) {\n            var h = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n            var m = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];\n            var s = arguments.length <= 5 || arguments[5] === undefined ? 0 : arguments[5];\n            var ms = arguments.length <= 6 || arguments[6] === undefined ? 0 : arguments[6];\n            var kind = arguments.length <= 7 || arguments[7] === undefined ? DateKind.Local : arguments[7];\n\n            var date = kind === DateKind.UTC ? new Date(Date.UTC(year, month - 1, day, h, m, s, ms)) : new Date(year, month - 1, day, h, m, s, ms);\n            if (isNaN(date.getTime())) throw \"The parameters describe an unrepresentable Date.\";\n            date.kind = kind;\n            return date;\n        };\n\n        FDate.utcNow = function utcNow() {\n            return FDate.parse(null, 1);\n        };\n\n        FDate.today = function today() {\n            return FDate.date(FDate.now());\n        };\n\n        FDate.isLeapYear = function isLeapYear(year) {\n            return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n        };\n\n        FDate.daysInMonth = function daysInMonth(year, month) {\n            return month == 2 ? FDate.isLeapYear(year) ? 29 : 28 : month >= 8 ? month % 2 == 0 ? 31 : 30 : month % 2 == 0 ? 30 : 31;\n        };\n\n        FDate.toUniversalTime = function toUniversalTime(d) {\n            return FDate.__changeKind(d, 1);\n        };\n\n        FDate.toLocalTime = function toLocalTime(d) {\n            return FDate.__changeKind(d, 2);\n        };\n\n        FDate.timeOfDay = function timeOfDay(d) {\n            return TimeSpan.create(0, FDate.hour(d), FDate.minute(d), FDate.second(d), FDate.millisecond(d));\n        };\n\n        FDate.date = function date(d) {\n            return FDate.create(FDate.year(d), FDate.month(d), FDate.day(d), 0, 0, 0, 0, d.kind);\n        };\n\n        FDate.day = function day(d) {\n            return FDate.__getValue(d, \"Date\");\n        };\n\n        FDate.hour = function hour(d) {\n            return FDate.__getValue(d, \"Hours\");\n        };\n\n        FDate.millisecond = function millisecond(d) {\n            return FDate.__getValue(d, \"Milliseconds\");\n        };\n\n        FDate.minute = function minute(d) {\n            return FDate.__getValue(d, \"Minutes\");\n        };\n\n        FDate.month = function month(d) {\n            return FDate.__getValue(d, \"Month\") + 1;\n        };\n\n        FDate.second = function second(d) {\n            return FDate.__getValue(d, \"Seconds\");\n        };\n\n        FDate.year = function year(d) {\n            return FDate.__getValue(d, \"FullYear\");\n        };\n\n        FDate.ticks = function ticks(d) {\n            return (d.getTime() + 6.2135604e+13 /* millisecondsJSOffset */) * 10000;\n        };\n\n        FDate.dayOfWeek = function dayOfWeek(d) {\n            return FDate.__getValue(d, \"Day\");\n        };\n\n        FDate.dayOfYear = function dayOfYear(d) {\n            var year = FDate.year(d);\n            var month = FDate.month(d);\n            var day = FDate.day(d);\n            for (var i = 1; i < month; i++) {\n                day += FDate.daysInMonth(year, i);\n            }return day;\n        };\n\n        FDate.add = function add(d, ts) {\n            return FDate.parse(d.getTime() + ts, d.kind);\n        };\n\n        FDate.addDays = function addDays(d, v) {\n            return FDate.parse(d.getTime() + v * 86400000, d.kind);\n        };\n\n        FDate.addHours = function addHours(d, v) {\n            return FDate.parse(d.getTime() + v * 3600000, d.kind);\n        };\n\n        FDate.addMinutes = function addMinutes(d, v) {\n            return FDate.parse(d.getTime() + v * 60000, d.kind);\n        };\n\n        FDate.addSeconds = function addSeconds(d, v) {\n            return FDate.parse(d.getTime() + v * 1000, d.kind);\n        };\n\n        FDate.addMilliseconds = function addMilliseconds(d, v) {\n            return FDate.parse(d.getTime() + v, d.kind);\n        };\n\n        FDate.addTicks = function addTicks(d, v) {\n            return FDate.parse(d.getTime() + v / 10000, d.kind);\n        };\n\n        FDate.addYears = function addYears(d, v) {\n            var newMonth = FDate.month(d);\n            var newYear = FDate.year(d) + v;\n            var daysInMonth = FDate.daysInMonth(newYear, newMonth);\n            var newDay = Math.min(daysInMonth, FDate.day(d));\n            return FDate.create(newYear, newMonth, newDay, FDate.hour(d), FDate.minute(d), FDate.second(d), FDate.millisecond(d), d.kind);\n        };\n\n        FDate.addMonths = function addMonths(d, v) {\n            var newMonth = FDate.month(d) + v;\n            var newMonth_ = 0;\n            var yearOffset = 0;\n            if (newMonth > 12) {\n                newMonth_ = newMonth % 12;\n                yearOffset = Math.floor(newMonth / 12);\n                newMonth = newMonth_;\n            } else if (newMonth < 1) {\n                newMonth_ = 12 + newMonth % 12;\n                yearOffset = Math.floor(newMonth / 12) + (newMonth_ == 12 ? -1 : 0);\n                newMonth = newMonth_;\n            }\n            var newYear = FDate.year(d) + yearOffset;\n            var daysInMonth = FDate.daysInMonth(newYear, newMonth);\n            var newDay = Math.min(daysInMonth, FDate.day(d));\n            return FDate.create(newYear, newMonth, newDay, FDate.hour(d), FDate.minute(d), FDate.second(d), FDate.millisecond(d), d.kind);\n        };\n\n        FDate.subtract = function subtract(d, that) {\n            return typeof that == \"number\" ? FDate.parse(d.getTime() - that, d.kind) : d.getTime() - that.getTime();\n        };\n\n        FDate.toLongDateString = function toLongDateString(d) {\n            return d.toDateString();\n        };\n\n        FDate.toShortDateString = function toShortDateString(d) {\n            return d.toLocaleDateString();\n        };\n\n        FDate.toLongTimeString = function toLongTimeString(d) {\n            return d.toLocaleTimeString();\n        };\n\n        FDate.toShortTimeString = function toShortTimeString(d) {\n            return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n        };\n\n        FDate.equals = function equals(d1, d2) {\n            return d1.getTime() == d2.getTime();\n        };\n\n        return FDate;\n    }(Date);\n\n    FDate.now = FDate.parse;\n    FDate.toBinary = FDate.ticks;\n    FDate.compareTo = Util.compare;\n    FDate.compare = Util.compare;\n    FDate.op_Addition = FDate.add;\n    FDate.op_Subtraction = FDate.subtract;\n    exports.Date = FDate;\n\n    var Timer = exports.Timer = function () {\n        function Timer(interval) {\n            _classCallCheck(this, Timer);\n\n            this.Interval = interval > 0 ? interval : 100;\n            this.AutoReset = true;\n            this._elapsed = new Event();\n        }\n\n        Timer.prototype.Dispose = function Dispose() {\n            this.Enabled = false;\n            this._isDisposed = true;\n        };\n\n        Timer.prototype.Close = function Close() {\n            this.Dispose();\n        };\n\n        Timer.prototype.Start = function Start() {\n            this.Enabled = true;\n        };\n\n        Timer.prototype.Stop = function Stop() {\n            this.Enabled = false;\n        };\n\n        _createClass(Timer, [{\n            key: \"Elapsed\",\n            get: function get() {\n                return this._elapsed;\n            }\n        }, {\n            key: \"Enabled\",\n            get: function get() {\n                return this._enabled;\n            },\n            set: function set(x) {\n                var _this3 = this;\n\n                if (!this._isDisposed && this._enabled != x) {\n                    if (this._enabled = x) {\n                        if (this.AutoReset) {\n                            this._intervalId = setInterval(function () {\n                                if (!_this3.AutoReset) _this3.Enabled = false;\n                                _this3._elapsed.Trigger(new Date());\n                            }, this.Interval);\n                        } else {\n                            this._timeoutId = setTimeout(function () {\n                                _this3.Enabled = false;\n                                _this3._timeoutId = 0;\n                                if (_this3.AutoReset) _this3.Enabled = true;\n                                _this3._elapsed.Trigger(new Date());\n                            }, this.Interval);\n                        }\n                    } else {\n                        if (this._timeoutId) {\n                            clearTimeout(this._timeoutId);\n                            this._timeoutId = 0;\n                        }\n                        if (this._intervalId) {\n                            clearInterval(this._intervalId);\n                            this._intervalId = 0;\n                        }\n                    }\n                }\n            }\n        }]);\n\n        return Timer;\n    }();\n\n    Util.setInterfaces(Timer.prototype, [\"System.IDisposable\"]);\n\n    var FString = function () {\n        function FString() {\n            _classCallCheck(this, FString);\n        }\n\n        FString.fsFormat = function fsFormat(str) {\n            function isObject(x) {\n                return x !== null && (typeof x === \"undefined\" ? \"undefined\" : _typeof(x)) === \"object\" && !(x instanceof Number) && !(x instanceof String) && !(x instanceof Boolean);\n            }\n            function formatOnce(str, rep) {\n                return str.replace(FString.fsFormatRegExp, function (_, prefix, flags, pad, precision, format) {\n                    switch (format) {\n                        case \"f\":\n                        case \"F\":\n                            rep = rep.toFixed(precision || 6);\n                            break;\n                        case \"g\":\n                        case \"G\":\n                            rep = rep.toPrecision(precision);\n                            break;\n                        case \"e\":\n                        case \"E\":\n                            rep = rep.toExponential(precision);\n                            break;\n                        case \"A\":\n                            try {\n                                rep = (rep instanceof FMap ? \"map \" : rep instanceof FSet ? \"set \" : \"\") + JSON.stringify(rep, function (k, v) {\n                                    return v && v[Symbol.iterator] && !Array.isArray(v) && isObject(v) ? Array.from(v) : v;\n                                });\n                            } catch (err) {\n                                // Fallback for objects with circular references\n                                rep = \"{\" + Object.getOwnPropertyNames(rep).map(function (k) {\n                                    return k + \": \" + String(rep[k]);\n                                }).join(\", \") + \"}\";\n                            }\n                            break;\n                    }\n                    var plusPrefix = flags.indexOf(\"+\") >= 0 && parseInt(rep) >= 0;\n                    if (!isNaN(pad = parseInt(pad))) {\n                        var ch = pad >= 0 && flags.indexOf(\"0\") >= 0 ? \"0\" : \" \";\n                        rep = FString.padLeft(rep, Math.abs(pad) - (plusPrefix ? 1 : 0), ch, pad < 0);\n                    }\n                    return prefix + (plusPrefix ? \"+\" + rep : rep);\n                });\n            }\n            function makeFn(str) {\n                return function (rep) {\n                    var str2 = formatOnce(str, rep);\n                    return FString.fsFormatRegExp.test(str2) ? makeFn(str2) : _cont(str2.replace(/%%/g, \"%\"));\n                };\n            }\n            var _cont = void 0;\n            return function (cont) {\n                _cont = cont;\n                return FString.fsFormatRegExp.test(str) ? makeFn(str) : _cont(str);\n            };\n        };\n\n        FString.format = function format(str) {\n            for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                args[_key3 - 1] = arguments[_key3];\n            }\n\n            return str.replace(FString.formatRegExp, function (match, idx, pad, format) {\n                var rep = args[idx],\n                    padSymbol = \" \";\n                if (typeof rep === \"number\") {\n                    switch ((format || \"\").substring(0, 1)) {\n                        case \"f\":\n                        case \"F\":\n                            rep = format.length > 1 ? rep.toFixed(format.substring(1)) : rep.toFixed(2);\n                            break;\n                        case \"g\":\n                        case \"G\":\n                            rep = format.length > 1 ? rep.toPrecision(format.substring(1)) : rep.toPrecision();\n                            break;\n                        case \"e\":\n                        case \"E\":\n                            rep = format.length > 1 ? rep.toExponential(format.substring(1)) : rep.toExponential();\n                            break;\n                        case \"p\":\n                        case \"P\":\n                            rep = (format.length > 1 ? (rep * 100).toFixed(format.substring(1)) : (rep * 100).toFixed(2)) + \" %\";\n                            break;\n                        default:\n                            var m = /^(0+)(\\.0+)?$/.exec(format);\n                            if (m != null) {\n                                var decs = 0;\n                                if (m[2] != null) rep = rep.toFixed(decs = m[2].length - 1);\n                                pad = \",\" + (m[1].length + (decs ? decs + 1 : 0)).toString();\n                                padSymbol = \"0\";\n                            } else if (format) {\n                                rep = format;\n                            }\n                    }\n                } else if (rep instanceof Date) {\n                    if (format.length === 1) {\n                        switch (format) {\n                            case \"D\":\n                                rep = rep.toDateString();\n                                break;\n                            case \"T\":\n                                rep = rep.toLocaleTimeString();\n                                break;\n                            case \"d\":\n                                rep = rep.toLocaleDateString();\n                                break;\n                            case \"t\":\n                                rep = rep.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n                                break;\n                            case \"o\":\n                            case \"O\":\n                                if (rep.kind === DateKind.Local) {\n                                    var offset = rep.getTimezoneOffset() * -1;\n                                    rep = FString.format(\"{0:yyyy-MM-dd}T{0:HH:mm}:{1:00.000}{2}{3:00}:{4:00}\", rep, FDate.second(rep), offset >= 0 ? \"+\" : \"-\", ~~(offset / 60), offset % 60);\n                                } else {\n                                    rep = rep.toISOString();\n                                }\n                        }\n                    } else {\n                        rep = format.replace(/\\w+/g, function (match2) {\n                            var rep2 = match2;\n                            switch (match2.substring(0, 1)) {\n                                case \"y\":\n                                    rep2 = match2.length < 4 ? FDate.year(rep) % 100 : FDate.year(rep);\n                                    break;\n                                case \"h\":\n                                    rep2 = rep.getHours() > 12 ? FDate.hour(rep) % 12 : FDate.hour(rep);\n                                    break;\n                                case \"M\":\n                                    rep2 = FDate.month(rep);\n                                    break;\n                                case \"d\":\n                                    rep2 = FDate.day(rep);\n                                    break;\n                                case \"H\":\n                                    rep2 = FDate.hour(rep);\n                                    break;\n                                case \"m\":\n                                    rep2 = FDate.minute(rep);\n                                    break;\n                                case \"s\":\n                                    rep2 = FDate.second(rep);\n                                    break;\n                            }\n                            if (rep2 !== match2 && rep2 < 10 && match2.length > 1) {\n                                rep2 = \"0\" + rep2;\n                            }\n                            return rep2;\n                        });\n                    }\n                }\n                if (!isNaN(pad = parseInt((pad || \"\").substring(1)))) {\n                    rep = FString.padLeft(rep, Math.abs(pad), padSymbol, pad < 0);\n                }\n                return rep;\n            });\n        };\n\n        FString.endsWith = function endsWith(str, search) {\n            var idx = str.lastIndexOf(search);\n            return idx >= 0 && idx == str.length - search.length;\n        };\n\n        FString.initialize = function initialize(n, f) {\n            if (n < 0) throw \"String length must be non-negative\";\n            var xs = new Array(n);\n            for (var i = 0; i < n; i++) {\n                xs[i] = f(i);\n            }return xs.join(\"\");\n        };\n\n        FString.isNullOrEmpty = function isNullOrEmpty(str) {\n            return typeof str !== \"string\" || str.length == 0;\n        };\n\n        FString.isNullOrWhiteSpace = function isNullOrWhiteSpace(str) {\n            return typeof str !== \"string\" || /^\\s*$/.test(str);\n        };\n\n        FString.join = function join(delimiter, xs) {\n            xs = typeof xs == \"string\" ? Util.getRestParams(arguments, 1) : xs;\n            return (Array.isArray(xs) ? xs : Array.from(xs)).join(delimiter);\n        };\n\n        FString.newGuid = function newGuid() {\n            var uuid = \"\";\n            for (var i = 0; i < 32; i++) {\n                var random = Math.random() * 16 | 0;\n                if (i === 8 || i === 12 || i === 16 || i === 20) uuid += \"-\";\n                uuid += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);\n            }\n            return uuid;\n        };\n\n        FString.padLeft = function padLeft(str, len, ch, isRight) {\n            ch = ch || \" \";\n            str = String(str);\n            len = len - str.length;\n            for (var i = -1; ++i < len;) {\n                str = isRight ? str + ch : ch + str;\n            }return str;\n        };\n\n        FString.padRight = function padRight(str, len, ch) {\n            return FString.padLeft(str, len, ch, true);\n        };\n\n        FString.replace = function replace(str, search, _replace) {\n            return str.replace(new RegExp(FRegExp.escape(search), \"g\"), _replace);\n        };\n\n        FString.replicate = function replicate(n, x) {\n            return FString.initialize(n, function () {\n                return x;\n            });\n        };\n\n        FString.split = function split(str, splitters, count, removeEmpty) {\n            count = typeof count == \"number\" ? count : null;\n            removeEmpty = typeof removeEmpty == \"number\" ? removeEmpty : null;\n            if (count < 0) throw \"Count cannot be less than zero\";\n            if (count === 0) return [];\n            splitters = Array.isArray(splitters) ? splitters : Util.getRestParams(arguments, 1);\n            splitters = splitters.map(function (x) {\n                return FRegExp.escape(x);\n            });\n            splitters = splitters.length > 0 ? splitters : [\" \"];\n            var m = void 0;\n            var i = 0;\n            var splits = [];\n            var reg = new RegExp(splitters.join(\"|\"), \"g\");\n            while ((count == null || count > 1) && (m = reg.exec(str)) !== null) {\n                if (!removeEmpty || m.index - i > 0) {\n                    count = count != null ? count - 1 : count;\n                    splits.push(str.substring(i, m.index));\n                }\n                i = reg.lastIndex;\n            }\n            if (!removeEmpty || str.length - i > 0) splits.push(str.substring(i));\n            return splits;\n        };\n\n        FString.trim = function trim(str, side) {\n            for (var _len4 = arguments.length, chars = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n                chars[_key4 - 2] = arguments[_key4];\n            }\n\n            if (side == \"both\" && chars.length == 0) return str.trim();\n            if (side == \"start\" || side == \"both\") {\n                var reg = chars.length == 0 ? /^\\s+/ : new RegExp(\"^[\" + FRegExp.escape(chars.join(\"\")) + \"]+\");\n                str = str.replace(reg, \"\");\n            }\n            if (side == \"end\" || side == \"both\") {\n                var _reg = chars.length == 0 ? /\\s+$/ : new RegExp(\"[\" + FRegExp.escape(chars.join(\"\")) + \"]+$\");\n                str = str.replace(_reg, \"\");\n            }\n            return str;\n        };\n\n        return FString;\n    }();\n\n    FString.fsFormatRegExp = /(^|[^%])%([0+ ]*)(-?\\d+)?(?:\\.(\\d+))?(\\w)/;\n    FString.formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:(.+?))?\\}/g;\n    exports.String = FString;\n\n    var FRegExp = function () {\n        function FRegExp() {\n            _classCallCheck(this, FRegExp);\n        }\n\n        FRegExp.create = function create(pattern, options) {\n            var flags = \"g\";\n            flags += options & 1 ? \"i\" : \"\";\n            flags += options & 2 ? \"m\" : \"\";\n            return new RegExp(pattern, flags);\n        };\n\n        FRegExp.escape = function escape(str) {\n            return str.replace(/[\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n        };\n\n        FRegExp.unescape = function unescape(str) {\n            return str.replace(/\\\\([\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n        };\n\n        FRegExp.isMatch = function isMatch(str, pattern) {\n            var options = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n            var reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = FRegExp.create(pattern, options);\n            return reg.test(str);\n        };\n\n        FRegExp.match = function match(str, pattern) {\n            var options = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n            var reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = FRegExp.create(pattern, options);\n            return reg.exec(str);\n        };\n\n        FRegExp.matches = function matches(str, pattern) {\n            var options = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n\n            var reg = str instanceof RegExp ? (reg = str, str = pattern, reg.lastIndex = options, reg) : reg = FRegExp.create(pattern, options);\n            if (!reg.global) throw \"Non-global RegExp\"; // Prevent infinite loop\n            var m = void 0;\n            var matches = [];\n            while ((m = reg.exec(str)) !== null) {\n                matches.push(m);\n            }return matches;\n        };\n\n        FRegExp.options = function options(reg) {\n            var options = 256; // ECMAScript\n            options |= reg.ignoreCase ? 1 : 0;\n            options |= reg.multiline ? 2 : 0;\n            return options;\n        };\n\n        FRegExp.replace = function replace(reg, input, replacement, limit) {\n            var offset = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];\n\n            function replacer() {\n                var res = arguments[0];\n                if (limit !== 0) {\n                    limit--;\n                    var match = [];\n                    var len = arguments.length;\n                    for (var i = 0; i < len - 2; i++) {\n                        match.push(arguments[i]);\n                    }match.index = arguments[len - 2];\n                    match.input = arguments[len - 1];\n                    res = replacement(match);\n                }\n                return res;\n            }\n            if (typeof reg == \"string\") {\n                var tmp = reg;\n                reg = FRegExp.create(input, limit);\n                input = tmp;\n                limit = undefined;\n            }\n            if (typeof replacement == \"function\") {\n                limit = limit == null ? -1 : limit;\n                return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n            } else {\n                if (limit != null) {\n                    var m = void 0;\n                    var sub1 = input.substring(offset);\n                    var matches = FRegExp.matches(reg, sub1);\n                    var sub2 = matches.length > limit ? (m = matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n                    return input.substring(0, offset) + sub2.replace(reg, replacement) + input.substring(offset + sub2.length);\n                } else {\n                    return input.replace(reg, replacement);\n                }\n            }\n        };\n\n        FRegExp.split = function split(reg, input, limit) {\n            var offset = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];\n\n            if (typeof reg == \"string\") {\n                var tmp = reg;\n                reg = FRegExp.create(input, limit);\n                input = tmp;\n                limit = undefined;\n            }\n            input = input.substring(offset);\n            return input.split(reg, limit);\n        };\n\n        return FRegExp;\n    }();\n\n    exports.RegExp = FRegExp;\n\n    var FArray = function () {\n        function FArray() {\n            _classCallCheck(this, FArray);\n        }\n\n        FArray.addRangeInPlace = function addRangeInPlace(range, xs) {\n            Seq.iterate(function (x) {\n                return xs.push(x);\n            }, range);\n        };\n\n        FArray.copyTo = function copyTo(source, sourceIndex, target, targetIndex, count) {\n            while (count--) {\n                target[targetIndex++] = source[sourceIndex++];\n            }\n        };\n\n        FArray.partition = function partition(f, xs) {\n            var ys = [],\n                zs = [],\n                j = 0,\n                k = 0;\n            for (var i = 0; i < xs.length; i++) {\n                if (f(xs[i])) ys[j++] = xs[i];else zs[k++] = xs[i];\n            }return Tuple(ys, zs);\n        };\n\n        FArray.permute = function permute(f, xs) {\n            // Keep the type of the array\n            var ys = xs.map(function () {\n                return null;\n            });\n            var checkFlags = new Array(xs.length);\n            for (var i = 0; i < xs.length; i++) {\n                var j = f(i);\n                if (j < 0 || j >= xs.length) throw \"Not a valid permutation\";\n                ys[j] = xs[i];\n                checkFlags[j] = 1;\n            }\n            for (var _i2 = 0; _i2 < xs.length; _i2++) {\n                if (checkFlags[_i2] != 1) throw \"Not a valid permutation\";\n            }return ys;\n        };\n\n        FArray.removeInPlace = function removeInPlace(item, xs) {\n            var i = xs.indexOf(item);\n            if (i > -1) {\n                xs.splice(i, 1);\n                return true;\n            }\n            return false;\n        };\n\n        FArray.setSlice = function setSlice(target, lower, upper, source) {\n            var length = (upper || target.length - 1) - lower;\n            if (ArrayBuffer.isView(target) && source.length <= length) target.set(source, lower);else for (var i = lower | 0, j = 0; j <= length; i++, j++) {\n                target[i] = source[j];\n            }\n        };\n\n        FArray.sortInPlaceBy = function sortInPlaceBy(f, xs) {\n            var dir = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\n            return xs.sort(function (x, y) {\n                x = f(x);\n                y = f(y);\n                return (x < y ? -1 : x == y ? 0 : 1) * dir;\n            });\n        };\n\n        FArray.unzip = function unzip(xs) {\n            var bs = new Array(xs.length),\n                cs = new Array(xs.length);\n            for (var i = 0; i < xs.length; i++) {\n                bs[i] = xs[i][0];\n                cs[i] = xs[i][1];\n            }\n            return Tuple(bs, cs);\n        };\n\n        FArray.unzip3 = function unzip3(xs) {\n            var bs = new Array(xs.length),\n                cs = new Array(xs.length),\n                ds = new Array(xs.length);\n            for (var i = 0; i < xs.length; i++) {\n                bs[i] = xs[i][0];\n                cs[i] = xs[i][1];\n                ds[i] = xs[i][2];\n            }\n            return Tuple3(bs, cs, ds);\n        };\n\n        return FArray;\n    }();\n\n    exports.Array = FArray;\n\n    var List = exports.List = function () {\n        function List(head, tail) {\n            _classCallCheck(this, List);\n\n            this.head = head;\n            this.tail = tail;\n        }\n\n        List.prototype.ToString = function ToString() {\n            return \"[\" + Array.from(this).map(Util.toString).join(\"; \") + \"]\";\n        };\n\n        List.prototype.Equals = function Equals(x) {\n            var iter1 = this[Symbol.iterator](),\n                iter2 = x[Symbol.iterator]();\n            for (var i = 0;; i++) {\n                var cur1 = iter1.next(),\n                    cur2 = iter2.next();\n                if (cur1.done) return cur2.done ? true : false;else if (cur2.done) return false;else if (!Util.equals(cur1.value, cur2.value)) return false;\n            }\n        };\n\n        List.prototype.CompareTo = function CompareTo(x) {\n            var acc = 0;\n            var iter1 = this[Symbol.iterator](),\n                iter2 = x[Symbol.iterator]();\n            for (var i = 0;; i++) {\n                var cur1 = iter1.next(),\n                    cur2 = iter2.next();\n                if (cur1.done) return cur2.done ? acc : -1;else if (cur2.done) return 1;else {\n                    acc = Util.compare(cur1.value, cur2.value);\n                    if (acc != 0) return acc;\n                }\n            }\n        };\n\n        List.ofArray = function ofArray(args, base) {\n            var acc = base || new List();\n            for (var i = args.length - 1; i >= 0; i--) {\n                acc = new List(args[i], acc);\n            }\n            return acc;\n        };\n\n        List.prototype[Symbol.iterator] = function () {\n            var cur = this;\n            return {\n                next: function next() {\n                    var tmp = cur;\n                    cur = cur.tail;\n                    return { done: tmp.tail == null, value: tmp.head };\n                }\n            };\n        };\n\n        List.prototype.append = function append(ys) {\n            return List.append(this, ys);\n        };\n\n        List.append = function append(xs, ys) {\n            return Seq.fold(function (acc, x) {\n                return new List(x, acc);\n            }, ys, List.reverse(xs));\n        };\n\n        List.prototype.choose = function choose(f, xs) {\n            return List.choose(f, this);\n        };\n\n        List.choose = function choose(f, xs) {\n            var r = Seq.fold(function (acc, x) {\n                var y = f(x);\n                return y != null ? new List(y, acc) : acc;\n            }, new List(), xs);\n            return List.reverse(r);\n        };\n\n        List.prototype.collect = function collect(f) {\n            return List.collect(f, this);\n        };\n\n        List.collect = function collect(f, xs) {\n            return Seq.fold(function (acc, x) {\n                return acc.append(f(x));\n            }, new List(), xs);\n        };\n        // TODO: should be xs: Iterable<List<T>>\n\n\n        List.concat = function concat(xs) {\n            return List.collect(function (x) {\n                return x;\n            }, xs);\n        };\n\n        List.prototype.filter = function filter(f) {\n            return List.filter(f, this);\n        };\n\n        List.filter = function filter(f, xs) {\n            return List.reverse(Seq.fold(function (acc, x) {\n                return f(x) ? new List(x, acc) : acc;\n            }, new List(), xs));\n        };\n\n        List.prototype.where = function where(f) {\n            return List.filter(f, this);\n        };\n\n        List.where = function where(f, xs) {\n            return List.filter(f, xs);\n        };\n\n        List.initialize = function initialize(n, f) {\n            if (n < 0) {\n                throw \"List length must be non-negative\";\n            }\n            var xs = new List();\n            for (var i = 1; i <= n; i++) {\n                xs = new List(f(n - i), xs);\n            }\n            return xs;\n        };\n\n        List.prototype.map = function map(f) {\n            return List.map(f, this);\n        };\n\n        List.map = function map(f, xs) {\n            return List.reverse(Seq.fold(function (acc, x) {\n                return new List(f(x), acc);\n            }, new List(), xs));\n        };\n\n        List.prototype.mapIndexed = function mapIndexed(f) {\n            return List.mapIndexed(f, this);\n        };\n\n        List.mapIndexed = function mapIndexed(f, xs) {\n            return List.reverse(Seq.fold(function (acc, x, i) {\n                return new List(f(i, x), acc);\n            }, new List(), xs));\n        };\n\n        List.prototype.partition = function partition(f) {\n            return List.partition(f, this);\n        };\n\n        List.partition = function partition(f, xs) {\n            return Seq.fold(function (acc, x) {\n                var lacc = acc[0],\n                    racc = acc[1];\n                return f(x) ? Tuple(new List(x, lacc), racc) : Tuple(lacc, new List(x, racc));\n            }, Tuple(new List(), new List()), List.reverse(xs));\n        };\n\n        List.replicate = function replicate(n, x) {\n            return List.initialize(n, function () {\n                return x;\n            });\n        };\n\n        List.prototype.reverse = function reverse() {\n            return List.reverse(this);\n        };\n\n        List.reverse = function reverse(xs) {\n            return Seq.fold(function (acc, x) {\n                return new List(x, acc);\n            }, new List(), xs);\n        };\n\n        List.singleton = function singleton(x) {\n            return new List(x, new List());\n        };\n\n        List.prototype.slice = function slice(lower, upper) {\n            return List.slice(lower, upper, this);\n        };\n\n        List.slice = function slice(lower, upper, xs) {\n            var noLower = lower == null;\n            var noUpper = upper == null;\n            return List.reverse(Seq.fold(function (acc, x, i) {\n                return (noLower || lower <= i) && (noUpper || i <= upper) ? new List(x, acc) : acc;\n            }, new List(), xs));\n        };\n        /* ToDo: instance unzip() */\n\n\n        List.unzip = function unzip(xs) {\n            return Seq.foldBack(function (xy, acc) {\n                return Tuple(new List(xy[0], acc[0]), new List(xy[1], acc[1]));\n            }, xs, Tuple(new List(), new List()));\n        };\n        /* ToDo: instance unzip3() */\n\n\n        List.unzip3 = function unzip3(xs) {\n            return Seq.foldBack(function (xyz, acc) {\n                return Tuple3(new List(xyz[0], acc[0]), new List(xyz[1], acc[1]), new List(xyz[2], acc[2]));\n            }, xs, Tuple3(new List(), new List(), new List()));\n        };\n\n        _createClass(List, [{\n            key: \"length\",\n            get: function get() {\n                return Seq.fold(function (acc, x) {\n                    return acc + 1;\n                }, 0, this);\n            }\n        }]);\n\n        return List;\n    }();\n\n    Util.setInterfaces(List.prototype, [\"System.IEquatable\", \"System.IComparable\"], \"Microsoft.FSharp.Collections.FSharpList\");\n\n    var Seq = exports.Seq = function () {\n        function Seq() {\n            _classCallCheck(this, Seq);\n        }\n\n        Seq.__failIfNone = function __failIfNone(res) {\n            if (res == null) throw \"Seq did not contain any matching element\";\n            return res;\n        };\n\n        Seq.toList = function toList(xs) {\n            return Seq.foldBack(function (x, acc) {\n                return new List(x, acc);\n            }, xs, new List());\n        };\n\n        Seq.ofList = function ofList(xs) {\n            return Seq.delay(function () {\n                return Seq.unfold(function (x) {\n                    return x.tail != null ? [x.head, x.tail] : null;\n                }, xs);\n            });\n        };\n\n        Seq.ofArray = function ofArray(xs) {\n            return Seq.delay(function () {\n                return Seq.unfold(function (i) {\n                    return i < xs.length ? [xs[i], i + 1] : null;\n                }, 0);\n            });\n        };\n\n        Seq.append = function append(xs, ys) {\n            return Seq.delay(function () {\n                var firstDone = false;\n                var i = xs[Symbol.iterator]();\n                var iters = Tuple(i, null);\n                return Seq.unfold(function () {\n                    var cur = void 0;\n                    if (!firstDone) {\n                        cur = iters[0].next();\n                        if (!cur.done) {\n                            return [cur.value, iters];\n                        } else {\n                            firstDone = true;\n                            iters = [null, ys[Symbol.iterator]()];\n                        }\n                    }\n                    cur = iters[1].next();\n                    return !cur.done ? [cur.value, iters] : null;\n                }, iters);\n            });\n        };\n\n        Seq.average = function average(xs) {\n            var count = 1;\n            var sum = Seq.reduce(function (acc, x) {\n                count++;\n                return acc + x;\n            }, xs);\n            return sum / count;\n        };\n\n        Seq.averageBy = function averageBy(f, xs) {\n            var count = 1;\n            var sum = Seq.reduce(function (acc, x) {\n                count++;\n                return (count === 2 ? f(acc) : acc) + f(x);\n            }, xs);\n            return sum / count;\n        };\n\n        Seq.countBy = function countBy(f, xs) {\n            return Seq.map(function (kv) {\n                return Tuple(kv[0], Seq.count(kv[1]));\n            }, Seq.groupBy(f, xs));\n        };\n\n        Seq.concat = function concat(xs) {\n            return Seq.delay(function () {\n                var iter = xs[Symbol.iterator]();\n                var output = null;\n                return Seq.unfold(function (innerIter) {\n                    var hasFinished = false;\n                    while (!hasFinished) {\n                        if (innerIter == null) {\n                            var cur = iter.next();\n                            if (!cur.done) {\n                                innerIter = cur.value[Symbol.iterator]();\n                            } else {\n                                hasFinished = true;\n                            }\n                        } else {\n                            var _cur = innerIter.next();\n                            if (!_cur.done) {\n                                output = _cur.value;\n                                hasFinished = true;\n                            } else {\n                                innerIter = null;\n                            }\n                        }\n                    }\n                    return innerIter != null && output != null ? [output, innerIter] : null;\n                }, null);\n            });\n        };\n\n        Seq.collect = function collect(f, xs) {\n            return Seq.concat(Seq.map(f, xs));\n        };\n\n        Seq.choose = function choose(f, xs) {\n            var trySkipToNext = function trySkipToNext(iter) {\n                var cur = iter.next();\n                if (!cur.done) {\n                    var y = f(cur.value);\n                    return y != null ? Tuple(y, iter) : trySkipToNext(iter);\n                }\n                return void 0;\n            };\n            return Seq.delay(function () {\n                return Seq.unfold(function (iter) {\n                    return trySkipToNext(iter);\n                }, xs[Symbol.iterator]());\n            });\n        };\n\n        Seq.compareWith = function compareWith(f, xs, ys) {\n            var nonZero = Seq.tryFind(function (i) {\n                return i != 0;\n            }, Seq.map2(function (x, y) {\n                return f(x, y);\n            }, xs, ys));\n            return nonZero != null ? nonZero : Seq.count(xs) - Seq.count(ys);\n        };\n\n        Seq.delay = function delay(f) {\n            return _defineProperty({}, Symbol.iterator, function () {\n                return f()[Symbol.iterator]();\n            });\n        };\n\n        Seq.distinctBy = function distinctBy(f, xs) {\n            return Seq.choose(function (tup) {\n                return tup[0];\n            }, Seq.scan(function (tup, x) {\n                var acc = tup[1];\n                var k = f(x);\n                return acc.has(k) ? Tuple(null, acc) : Tuple(x, FSet.add(k, acc));\n            }, Tuple(null, FSet.create()), xs));\n        };\n\n        Seq.distinct = function distinct(xs) {\n            return Seq.distinctBy(function (x) {\n                return x;\n            }, xs);\n        };\n\n        Seq.empty = function empty() {\n            return Seq.unfold(function () {\n                return void 0;\n            });\n        };\n\n        Seq.enumerateWhile = function enumerateWhile(cond, xs) {\n            return Seq.concat(Seq.unfold(function () {\n                return cond() ? [xs, true] : null;\n            }));\n        };\n\n        Seq.enumerateThenFinally = function enumerateThenFinally(xs, finalFn) {\n            return Seq.delay(function () {\n                var iter = void 0;\n                try {\n                    iter = xs[Symbol.iterator]();\n                } finally {\n                    finalFn();\n                }\n                return Seq.unfold(function (iter) {\n                    try {\n                        var cur = iter.next();\n                        return !cur.done ? [cur.value, iter] : null;\n                    } finally {\n                        finalFn();\n                    }\n                    return void 0;\n                }, iter);\n            });\n        };\n\n        Seq.enumerateUsing = function enumerateUsing(disp, work) {\n            var isDisposed = false;\n            var disposeOnce = function disposeOnce() {\n                if (!isDisposed) {\n                    isDisposed = true;\n                    disp.Dispose();\n                }\n            };\n            try {\n                return Seq.enumerateThenFinally(work(disp), disposeOnce);\n            } finally {\n                disposeOnce();\n            }\n            return void 0;\n        };\n\n        Seq.exactlyOne = function exactlyOne(xs) {\n            var iter = xs[Symbol.iterator]();\n            var fst = iter.next();\n            if (fst.done) throw \"Seq was empty\";\n            var snd = iter.next();\n            if (!snd.done) throw \"Seq had multiple items\";\n            return fst.value;\n        };\n\n        Seq.exists = function exists(f, xs) {\n            function aux(iter) {\n                var cur = iter.next();\n                return !cur.done && (f(cur.value) || aux(iter));\n            }\n            return aux(xs[Symbol.iterator]());\n        };\n\n        Seq.exists2 = function exists2(f, xs, ys) {\n            function aux(iter1, iter2) {\n                var cur1 = iter1.next(),\n                    cur2 = iter2.next();\n                return !cur1.done && !cur2.done && (f(cur1.value, cur2.value) || aux(iter1, iter2));\n            }\n            return aux(xs[Symbol.iterator](), ys[Symbol.iterator]());\n        };\n\n        Seq.filter = function filter(f, xs) {\n            function trySkipToNext(iter) {\n                var cur = iter.next();\n                if (!cur.done) return f(cur.value) ? [cur.value, iter] : trySkipToNext(iter);\n                return void 0;\n            }\n            return Seq.delay(function () {\n                return Seq.unfold(trySkipToNext, xs[Symbol.iterator]());\n            });\n        };\n\n        Seq.where = function where(f, xs) {\n            return Seq.filter(f, xs);\n        };\n\n        Seq.fold = function fold(f, acc, xs) {\n            if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n                return xs.reduce(f, acc);\n            } else {\n                var cur = void 0;\n                for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n                    cur = iter.next();\n                    if (cur.done) break;\n                    acc = f(acc, cur.value, i);\n                }\n                return acc;\n            }\n        };\n\n        Seq.foldBack = function foldBack(f, xs, acc) {\n            var arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n            for (var i = arr.length - 1; i >= 0; i--) {\n                acc = f(arr[i], acc, i);\n            }\n            return acc;\n        };\n\n        Seq.fold2 = function fold2(f, acc, xs, ys) {\n            var iter1 = xs[Symbol.iterator](),\n                iter2 = ys[Symbol.iterator]();\n            var cur1 = void 0,\n                cur2 = void 0;\n            for (var i = 0;; i++) {\n                cur1 = iter1.next();\n                cur2 = iter2.next();\n                if (cur1.done || cur2.done) {\n                    break;\n                }\n                acc = f(acc, cur1.value, cur2.value, i);\n            }\n            return acc;\n        };\n\n        Seq.foldBack2 = function foldBack2(f, xs, ys, acc) {\n            var ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n            var ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n            for (var i = ar1.length - 1; i >= 0; i--) {\n                acc = f(ar1[i], ar2[i], acc, i);\n            }\n            return acc;\n        };\n\n        Seq.forAll = function forAll(f, xs) {\n            return Seq.fold(function (acc, x) {\n                return acc && f(x);\n            }, true, xs);\n        };\n\n        Seq.forAll2 = function forAll2(f, xs, ys) {\n            return Seq.fold2(function (acc, x, y) {\n                return acc && f(x, y);\n            }, true, xs, ys);\n        };\n        // TODO: Should return a Iterable<Tuple<K, Iterable<T>>> instead of a Map<K, Iterable<T>>\n        // Seq.groupBy : ('T -> 'Key) -> seq<'T> -> seq<'Key * seq<'T>>\n\n\n        Seq.groupBy = function groupBy(f, xs) {\n            return Seq.fold(function (acc, x) {\n                var k = f(x),\n                    vs = acc.get(k);\n                return vs != null ? acc.set(k, new List(x, vs)) : acc.set(k, List.singleton(x));\n            }, new Map(), xs);\n        };\n\n        Seq.tryHead = function tryHead(xs) {\n            var iter = xs[Symbol.iterator]();\n            var cur = iter.next();\n            return cur.done ? null : cur.value;\n        };\n\n        Seq.head = function head(xs) {\n            return Seq.__failIfNone(Seq.tryHead(xs));\n        };\n\n        Seq.initialize = function initialize(n, f) {\n            return Seq.delay(function () {\n                return Seq.unfold(function (i) {\n                    return i < n ? [f(i), i + 1] : null;\n                }, 0);\n            });\n        };\n\n        Seq.initializeInfinite = function initializeInfinite(f) {\n            return Seq.delay(function () {\n                return Seq.unfold(function (i) {\n                    return [f(i), i + 1];\n                }, 0);\n            });\n        };\n\n        Seq.tryItem = function tryItem(i, xs) {\n            if (i < 0) return null;\n            if (Array.isArray(xs) || ArrayBuffer.isView(xs)) return i < xs.length ? xs[i] : null;\n            for (var j = 0, iter = xs[Symbol.iterator]();; j++) {\n                var cur = iter.next();\n                if (cur.done) return null;\n                if (j === i) return cur.value;\n            }\n        };\n\n        Seq.item = function item(i, xs) {\n            return Seq.__failIfNone(Seq.tryItem(i, xs));\n        };\n\n        Seq.iterate = function iterate(f, xs) {\n            Seq.fold(function (_, x) {\n                return f(x);\n            }, null, xs);\n        };\n\n        Seq.iterate2 = function iterate2(f, xs, ys) {\n            Seq.fold2(function (_, x, y) {\n                return f(x, y);\n            }, null, xs, ys);\n        };\n\n        Seq.iterateIndexed = function iterateIndexed(f, xs) {\n            Seq.fold(function (_, x, i) {\n                return f(i, x);\n            }, null, xs);\n        };\n\n        Seq.iterateIndexed2 = function iterateIndexed2(f, xs, ys) {\n            Seq.fold2(function (_, x, y, i) {\n                return f(i, x, y);\n            }, null, xs, ys);\n        };\n\n        Seq.isEmpty = function isEmpty(xs) {\n            var i = xs[Symbol.iterator]();\n            return i.next().done;\n        };\n\n        Seq.tryLast = function tryLast(xs) {\n            try {\n                return Seq.reduce(function (_, x) {\n                    return x;\n                }, xs);\n            } catch (err) {\n                return null;\n            }\n        };\n\n        Seq.last = function last(xs) {\n            return Seq.__failIfNone(Seq.tryLast(xs));\n        };\n        // A static 'length' method causes problems in JavaScript -- https://github.com/Microsoft/TypeScript/issues/442\n\n\n        Seq.count = function count(xs) {\n            return Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.length : Seq.fold(function (acc, x) {\n                return acc + 1;\n            }, 0, xs);\n        };\n\n        Seq.map = function map(f, xs) {\n            return Seq.delay(function () {\n                return Seq.unfold(function (iter) {\n                    var cur = iter.next();\n                    return !cur.done ? [f(cur.value), iter] : null;\n                }, xs[Symbol.iterator]());\n            });\n        };\n\n        Seq.mapIndexed = function mapIndexed(f, xs) {\n            return Seq.delay(function () {\n                var i = 0;\n                return Seq.unfold(function (iter) {\n                    var cur = iter.next();\n                    return !cur.done ? [f(i++, cur.value), iter] : null;\n                }, xs[Symbol.iterator]());\n            });\n        };\n\n        Seq.map2 = function map2(f, xs, ys) {\n            return Seq.delay(function () {\n                var iter1 = xs[Symbol.iterator]();\n                var iter2 = ys[Symbol.iterator]();\n                return Seq.unfold(function () {\n                    var cur1 = iter1.next(),\n                        cur2 = iter2.next();\n                    return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n                });\n            });\n        };\n\n        Seq.mapIndexed2 = function mapIndexed2(f, xs, ys) {\n            return Seq.delay(function () {\n                var i = 0;\n                var iter1 = xs[Symbol.iterator]();\n                var iter2 = ys[Symbol.iterator]();\n                return Seq.unfold(function () {\n                    var cur1 = iter1.next(),\n                        cur2 = iter2.next();\n                    return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n                });\n            });\n        };\n\n        Seq.map3 = function map3(f, xs, ys, zs) {\n            return Seq.delay(function () {\n                var iter1 = xs[Symbol.iterator]();\n                var iter2 = ys[Symbol.iterator]();\n                var iter3 = zs[Symbol.iterator]();\n                return Seq.unfold(function () {\n                    var cur1 = iter1.next(),\n                        cur2 = iter2.next(),\n                        cur3 = iter3.next();\n                    return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n                });\n            });\n        };\n\n        Seq.mapFold = function mapFold(f, acc, xs) {\n            var result = [];\n            var r = void 0;\n            var cur = void 0;\n            for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n                cur = iter.next();\n                if (cur.done) break;\n\n                var _f = f(acc, cur.value);\n\n                var _f2 = _slicedToArray(_f, 2);\n\n                r = _f2[0];\n                acc = _f2[1];\n\n                result.push(r);\n            }\n            return Tuple(result, acc);\n        };\n\n        Seq.mapFoldBack = function mapFoldBack(f, xs, acc) {\n            var arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n            var result = [];\n            var r = void 0;\n            for (var i = arr.length - 1; i >= 0; i--) {\n                var _f3 = f(arr[i], acc);\n\n                var _f4 = _slicedToArray(_f3, 2);\n\n                r = _f4[0];\n                acc = _f4[1];\n\n                result.push(r);\n            }\n            return Tuple(result, acc);\n        };\n\n        Seq.max = function max(xs) {\n            return Seq.reduce(function (acc, x) {\n                return Util.compare(acc, x) === 1 ? acc : x;\n            }, xs);\n        };\n\n        Seq.maxBy = function maxBy(f, xs) {\n            return Seq.reduce(function (acc, x) {\n                return Util.compare(f(acc), f(x)) === 1 ? acc : x;\n            }, xs);\n        };\n\n        Seq.min = function min(xs) {\n            return Seq.reduce(function (acc, x) {\n                return Util.compare(acc, x) === -1 ? acc : x;\n            }, xs);\n        };\n\n        Seq.minBy = function minBy(f, xs) {\n            return Seq.reduce(function (acc, x) {\n                return Util.compare(f(acc), f(x)) === -1 ? acc : x;\n            }, xs);\n        };\n\n        Seq.pairwise = function pairwise(xs) {\n            return Seq.skip(1, Seq.scan(function (last, next) {\n                return Tuple(last[1], next);\n            }, Tuple(0, 0), xs));\n        };\n\n        Seq.permute = function permute(f, xs) {\n            return Seq.ofArray(FArray.permute(f, Array.from(xs)));\n        };\n\n        Seq.rangeStep = function rangeStep(first, step, last) {\n            if (step === 0) throw \"Step cannot be 0\";\n            return Seq.unfold(function (x) {\n                return step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null;\n            }, first);\n        };\n\n        Seq.rangeChar = function rangeChar(first, last) {\n            return Seq.unfold(function (x) {\n                return x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null;\n            }, first);\n        };\n\n        Seq.range = function range(first, last) {\n            return Seq.rangeStep(first, 1, last);\n        };\n\n        Seq.readOnly = function readOnly(xs) {\n            return Seq.map(function (x) {\n                return x;\n            }, xs);\n        };\n\n        Seq.reduce = function reduce(f, xs) {\n            if (Array.isArray(xs) || ArrayBuffer.isView(xs)) return xs.reduce(f);\n            var iter = xs[Symbol.iterator]();\n            var cur = iter.next();\n            if (cur.done) throw \"Seq was empty\";\n            var acc = cur.value;\n            for (;;) {\n                cur = iter.next();\n                if (cur.done) break;\n                acc = f(acc, cur.value);\n            }\n            return acc;\n        };\n\n        Seq.reduceBack = function reduceBack(f, xs) {\n            var ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n            if (ar.length === 0) throw \"Seq was empty\";\n            var acc = ar[ar.length - 1];\n            for (var i = ar.length - 2; i >= 0; i--) {\n                acc = f(ar[i], acc, i);\n            }return acc;\n        };\n\n        Seq.replicate = function replicate(n, x) {\n            return Seq.initialize(n, function () {\n                return x;\n            });\n        };\n\n        Seq.reverse = function reverse(xs) {\n            var ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n            return Seq.ofArray(ar.reverse());\n        };\n\n        Seq.scan = function scan(f, seed, xs) {\n            return Seq.delay(function () {\n                var iter = xs[Symbol.iterator]();\n                return Seq.unfold(function (acc) {\n                    if (acc == null) return [seed, seed];\n                    var cur = iter.next();\n                    if (!cur.done) {\n                        acc = f(acc, cur.value);\n                        return [acc, acc];\n                    }\n                    return void 0;\n                }, null);\n            });\n        };\n\n        Seq.scanBack = function scanBack(f, xs, seed) {\n            return Seq.reverse(Seq.scan(function (acc, x) {\n                return f(x, acc);\n            }, seed, Seq.reverse(xs)));\n        };\n\n        Seq.singleton = function singleton(x) {\n            return Seq.unfold(function (x) {\n                return x != null ? [x, null] : null;\n            }, x);\n        };\n\n        Seq.skip = function skip(n, xs) {\n            return _defineProperty({}, Symbol.iterator, function () {\n                var iter = xs[Symbol.iterator]();\n                for (var i = 1; i <= n; i++) {\n                    if (iter.next().done) throw \"Seq has not enough elements\";\n                }return iter;\n            });\n        };\n\n        Seq.skipWhile = function skipWhile(f, xs) {\n            return Seq.delay(function () {\n                var hasPassed = false;\n                return Seq.filter(function (x) {\n                    return hasPassed || (hasPassed = !f(x));\n                }, xs);\n            });\n        };\n\n        Seq.sortWith = function sortWith(f, xs) {\n            var ys = Array.from(xs);\n            return Seq.ofArray(ys.sort(f));\n        };\n\n        Seq.sum = function sum(xs) {\n            return Seq.fold(function (acc, x) {\n                return acc + x;\n            }, 0, xs);\n        };\n\n        Seq.sumBy = function sumBy(f, xs) {\n            return Seq.fold(function (acc, x) {\n                return acc + f(x);\n            }, 0, xs);\n        };\n\n        Seq.tail = function tail(xs) {\n            var iter = xs[Symbol.iterator]();\n            var cur = iter.next();\n            if (cur.done) throw \"Seq was empty\";\n            return _defineProperty({}, Symbol.iterator, function () {\n                return iter;\n            });\n        };\n\n        Seq.take = function take(n, xs) {\n            var truncate = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n            return Seq.delay(function () {\n                var iter = xs[Symbol.iterator]();\n                return Seq.unfold(function (i) {\n                    if (i < n) {\n                        var cur = iter.next();\n                        if (!cur.done) return [cur.value, i + 1];\n                        if (!truncate) throw \"Seq has not enough elements\";\n                    }\n                    return void 0;\n                }, 0);\n            });\n        };\n\n        Seq.truncate = function truncate(n, xs) {\n            return Seq.take(n, xs, true);\n        };\n\n        Seq.takeWhile = function takeWhile(f, xs) {\n            return Seq.delay(function () {\n                var iter = xs[Symbol.iterator]();\n                return Seq.unfold(function (i) {\n                    var cur = iter.next();\n                    if (!cur.done && f(cur.value)) return [cur.value, null];\n                    return void 0;\n                }, 0);\n            });\n        };\n\n        Seq.tryFind = function tryFind(f, xs) {\n            for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n                var cur = iter.next();\n                if (cur.done) return null;\n                if (f(cur.value, i)) return cur.value;\n            }\n        };\n\n        Seq.find = function find(f, xs) {\n            return Seq.__failIfNone(Seq.tryFind(f, xs));\n        };\n\n        Seq.tryFindBack = function tryFindBack(f, xs) {\n            var match = null;\n            for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n                var cur = iter.next();\n                if (cur.done) return match;\n                if (f(cur.value, i)) match = cur.value;\n            }\n        };\n\n        Seq.findBack = function findBack(f, xs) {\n            return Seq.__failIfNone(Seq.tryFindBack(f, xs));\n        };\n\n        Seq.tryFindIndex = function tryFindIndex(f, xs) {\n            for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n                var cur = iter.next();\n                if (cur.done) return null;\n                if (f(cur.value, i)) return i;\n            }\n        };\n\n        Seq.findIndex = function findIndex(f, xs) {\n            return Seq.__failIfNone(Seq.tryFindIndex(f, xs));\n        };\n\n        Seq.tryFindIndexBack = function tryFindIndexBack(f, xs) {\n            var match = 0;\n            for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n                var cur = iter.next();\n                if (cur.done) return match;\n                if (f(cur.value, i)) match = i;\n            }\n        };\n\n        Seq.findIndexBack = function findIndexBack(f, xs) {\n            return Seq.__failIfNone(Seq.tryFindIndexBack(f, xs));\n        };\n\n        Seq.tryPick = function tryPick(f, xs) {\n            for (var i = 0, iter = xs[Symbol.iterator]();; i++) {\n                var cur = iter.next();\n                if (cur.done) break;\n                var y = f(cur.value, i);\n                if (y != null) return y;\n            }\n            return void 0;\n        };\n\n        Seq.pick = function pick(f, xs) {\n            return Seq.__failIfNone(Seq.tryPick(f, xs));\n        };\n\n        Seq.unfold = function unfold(f, acc) {\n            return _defineProperty({}, Symbol.iterator, function () {\n                return {\n                    next: function next() {\n                        var res = f(acc);\n                        if (res != null) {\n                            acc = res[1];\n                            return { done: false, value: res[0] };\n                        }\n                        return { done: true };\n                    }\n                };\n            });\n        };\n\n        Seq.zip = function zip(xs, ys) {\n            return Seq.map2(function (x, y) {\n                return [x, y];\n            }, xs, ys);\n        };\n\n        Seq.zip3 = function zip3(xs, ys, zs) {\n            return Seq.map3(function (x, y, z) {\n                return [x, y, z];\n            }, xs, ys, zs);\n        };\n\n        return Seq;\n    }();\n\n    var SetTree = function () {\n        function SetTree(caseName, fields) {\n            _classCallCheck(this, SetTree);\n\n            this.Case = caseName;\n            this.Fields = fields;\n        }\n\n        SetTree.countAux = function countAux(s, acc) {\n            return s.Case === \"SetOne\" ? acc + 1 : s.Case === \"SetEmpty\" ? acc : SetTree.countAux(s.Fields[1], SetTree.countAux(s.Fields[2], acc + 1));\n        };\n\n        SetTree.count = function count(s) {\n            return SetTree.countAux(s, 0);\n        };\n\n        SetTree.SetOne = function SetOne(n) {\n            return new SetTree(\"SetOne\", [n]);\n        };\n\n        SetTree.SetNode = function SetNode(x, l, r, h) {\n            return new SetTree(\"SetNode\", [x, l, r, h]);\n        };\n\n        SetTree.height = function height(t) {\n            return t.Case === \"SetOne\" ? 1 : t.Case === \"SetNode\" ? t.Fields[3] : 0;\n        };\n\n        SetTree.mk = function mk(l, k, r) {\n            var matchValue = [l, r];\n            var $target1 = function $target1() {\n                var hl = SetTree.height(l);\n                var hr = SetTree.height(r);\n                var m = hl < hr ? hr : hl;\n                return SetTree.SetNode(k, l, r, m + 1);\n            };\n            if (matchValue[0].Case === \"SetEmpty\") {\n                if (matchValue[1].Case === \"SetEmpty\") {\n                    return SetTree.SetOne(k);\n                } else {\n                    return $target1();\n                }\n            } else {\n                return $target1();\n            }\n        };\n\n        SetTree.rebalance = function rebalance(t1, k, t2) {\n            var t1h = SetTree.height(t1);\n            var t2h = SetTree.height(t2);\n            if (t2h > t1h + SetTree.tolerance) {\n                if (t2.Case === \"SetNode\") {\n                    if (SetTree.height(t2.Fields[1]) > t1h + 1) {\n                        if (t2.Fields[1].Case === \"SetNode\") {\n                            return SetTree.mk(SetTree.mk(t1, k, t2.Fields[1].Fields[1]), t2.Fields[1].Fields[0], SetTree.mk(t2.Fields[1].Fields[2], t2.Fields[0], t2.Fields[2]));\n                        } else {\n                            throw \"rebalance\";\n                        }\n                    } else {\n                        return SetTree.mk(SetTree.mk(t1, k, t2.Fields[1]), t2.Fields[0], t2.Fields[2]);\n                    }\n                } else {\n                    throw \"rebalance\";\n                }\n            } else {\n                if (t1h > t2h + SetTree.tolerance) {\n                    if (t1.Case === \"SetNode\") {\n                        if (SetTree.height(t1.Fields[2]) > t2h + 1) {\n                            if (t1.Fields[2].Case === \"SetNode\") {\n                                return SetTree.mk(SetTree.mk(t1.Fields[1], t1.Fields[0], t1.Fields[2].Fields[1]), t1.Fields[2].Fields[0], SetTree.mk(t1.Fields[2].Fields[2], k, t2));\n                            } else {\n                                throw \"rebalance\";\n                            }\n                        } else {\n                            return SetTree.mk(t1.Fields[1], t1.Fields[0], SetTree.mk(t1.Fields[2], k, t2));\n                        }\n                    } else {\n                        throw \"rebalance\";\n                    }\n                } else {\n                    return SetTree.mk(t1, k, t2);\n                }\n            }\n        };\n\n        SetTree.add = function add(comparer, k, t) {\n            return t.Case === \"SetOne\" ? function () {\n                var c = comparer.Compare(k, t.Fields[0]);\n                if (c < 0) {\n                    return SetTree.SetNode(k, new SetTree(\"SetEmpty\", []), t, 2);\n                } else {\n                    if (c === 0) {\n                        return t;\n                    } else {\n                        return SetTree.SetNode(k, t, new SetTree(\"SetEmpty\", []), 2);\n                    }\n                }\n            }() : t.Case === \"SetEmpty\" ? SetTree.SetOne(k) : function () {\n                var c = comparer.Compare(k, t.Fields[0]);\n                if (c < 0) {\n                    return SetTree.rebalance(SetTree.add(comparer, k, t.Fields[1]), t.Fields[0], t.Fields[2]);\n                } else {\n                    if (c === 0) {\n                        return t;\n                    } else {\n                        return SetTree.rebalance(t.Fields[1], t.Fields[0], SetTree.add(comparer, k, t.Fields[2]));\n                    }\n                }\n            }();\n        };\n\n        SetTree.balance = function balance(comparer, t1, k, t2) {\n            var matchValue = [t1, t2];\n            var $target1 = function $target1(t1_1) {\n                return SetTree.add(comparer, k, t1_1);\n            };\n            var $target2 = function $target2(k1, t2_1) {\n                return SetTree.add(comparer, k, SetTree.add(comparer, k1, t2_1));\n            };\n            if (matchValue[0].Case === \"SetOne\") {\n                if (matchValue[1].Case === \"SetEmpty\") {\n                    return $target1(matchValue[0]);\n                } else {\n                    if (matchValue[1].Case === \"SetOne\") {\n                        return $target2(matchValue[0].Fields[0], matchValue[1]);\n                    } else {\n                        return $target2(matchValue[0].Fields[0], matchValue[1]);\n                    }\n                }\n            } else {\n                if (matchValue[0].Case === \"SetNode\") {\n                    if (matchValue[1].Case === \"SetOne\") {\n                        var k2 = matchValue[1].Fields[0];\n                        var t1_1 = matchValue[0];\n                        return SetTree.add(comparer, k, SetTree.add(comparer, k2, t1_1));\n                    } else {\n                        if (matchValue[1].Case === \"SetNode\") {\n                            var h1 = matchValue[0].Fields[3];\n                            var h2 = matchValue[1].Fields[3];\n                            var k1 = matchValue[0].Fields[0];\n                            var k2 = matchValue[1].Fields[0];\n                            var t11 = matchValue[0].Fields[1];\n                            var t12 = matchValue[0].Fields[2];\n                            var t21 = matchValue[1].Fields[1];\n                            var t22 = matchValue[1].Fields[2];\n                            if (h1 + SetTree.tolerance < h2) {\n                                return SetTree.rebalance(SetTree.balance(comparer, t1, k, t21), k2, t22);\n                            } else {\n                                if (h2 + SetTree.tolerance < h1) {\n                                    return SetTree.rebalance(t11, k1, SetTree.balance(comparer, t12, k, t2));\n                                } else {\n                                    return SetTree.mk(t1, k, t2);\n                                }\n                            }\n                        } else {\n                            return $target1(matchValue[0]);\n                        }\n                    }\n                } else {\n                    var t2_1 = matchValue[1];\n                    return SetTree.add(comparer, k, t2_1);\n                }\n            }\n        };\n\n        SetTree.split = function split(comparer, pivot, t) {\n            return t.Case === \"SetOne\" ? function () {\n                var c = comparer.Compare(t.Fields[0], pivot);\n                if (c < 0) {\n                    return [t, false, new SetTree(\"SetEmpty\", [])];\n                } else {\n                    if (c === 0) {\n                        return [new SetTree(\"SetEmpty\", []), true, new SetTree(\"SetEmpty\", [])];\n                    } else {\n                        return [new SetTree(\"SetEmpty\", []), false, t];\n                    }\n                }\n            }() : t.Case === \"SetEmpty\" ? [new SetTree(\"SetEmpty\", []), false, new SetTree(\"SetEmpty\", [])] : function () {\n                var c = comparer.Compare(pivot, t.Fields[0]);\n                if (c < 0) {\n                    var patternInput = SetTree.split(comparer, pivot, t.Fields[1]);\n                    var t11Lo = patternInput[0];\n                    var t11Hi = patternInput[2];\n                    var havePivot = patternInput[1];\n                    return [t11Lo, havePivot, SetTree.balance(comparer, t11Hi, t.Fields[0], t.Fields[2])];\n                } else {\n                    if (c === 0) {\n                        return [t.Fields[1], true, t.Fields[2]];\n                    } else {\n                        var patternInput = SetTree.split(comparer, pivot, t.Fields[2]);\n                        var t12Lo = patternInput[0];\n                        var t12Hi = patternInput[2];\n                        var havePivot = patternInput[1];\n                        return [SetTree.balance(comparer, t.Fields[1], t.Fields[0], t12Lo), havePivot, t12Hi];\n                    }\n                }\n            }();\n        };\n\n        SetTree.spliceOutSuccessor = function spliceOutSuccessor(t) {\n            return t.Case === \"SetOne\" ? [t.Fields[0], new SetTree(\"SetEmpty\", [])] : t.Case === \"SetNode\" ? t.Fields[1].Case === \"SetEmpty\" ? [t.Fields[0], t.Fields[2]] : function () {\n                var patternInput = SetTree.spliceOutSuccessor(t.Fields[1]);\n                var l_ = patternInput[1];\n                var k3 = patternInput[0];\n                return [k3, SetTree.mk(l_, t.Fields[0], t.Fields[2])];\n            }() : function () {\n                throw \"internal error: Map.spliceOutSuccessor\";\n            }();\n        };\n\n        SetTree.remove = function remove(comparer, k, t) {\n            return t.Case === \"SetOne\" ? function () {\n                var c = comparer.Compare(k, t.Fields[0]);\n                if (c === 0) {\n                    return new SetTree(\"SetEmpty\", []);\n                } else {\n                    return t;\n                }\n            }() : t.Case === \"SetNode\" ? function () {\n                var c = comparer.Compare(k, t.Fields[0]);\n                if (c < 0) {\n                    return SetTree.rebalance(SetTree.remove(comparer, k, t.Fields[1]), t.Fields[0], t.Fields[2]);\n                } else {\n                    if (c === 0) {\n                        var matchValue = [t.Fields[1], t.Fields[2]];\n                        if (matchValue[0].Case === \"SetEmpty\") {\n                            return t.Fields[2];\n                        } else {\n                            if (matchValue[1].Case === \"SetEmpty\") {\n                                return t.Fields[1];\n                            } else {\n                                var patternInput = SetTree.spliceOutSuccessor(t.Fields[2]);\n                                var sk = patternInput[0];\n                                var r_ = patternInput[1];\n                                return SetTree.mk(t.Fields[1], sk, r_);\n                            }\n                        }\n                    } else {\n                        return SetTree.rebalance(t.Fields[1], t.Fields[0], SetTree.remove(comparer, k, t.Fields[2]));\n                    }\n                }\n            }() : t;\n        };\n\n        SetTree.mem = function mem(comparer, k, t) {\n            return t.Case === \"SetOne\" ? comparer.Compare(k, t.Fields[0]) === 0 : t.Case === \"SetEmpty\" ? false : function () {\n                var c = comparer.Compare(k, t.Fields[0]);\n                if (c < 0) {\n                    return SetTree.mem(comparer, k, t.Fields[1]);\n                } else {\n                    if (c === 0) {\n                        return true;\n                    } else {\n                        return SetTree.mem(comparer, k, t.Fields[2]);\n                    }\n                }\n            }();\n        };\n\n        SetTree.iter = function iter(f, t) {\n            if (t.Case === \"SetOne\") {\n                f(t.Fields[0]);\n            } else {\n                if (t.Case === \"SetEmpty\") {} else {\n                    SetTree.iter(f, t.Fields[1]);\n                    f(t.Fields[0]);\n                    SetTree.iter(f, t.Fields[2]);\n                }\n            }\n        };\n\n        SetTree.foldBack = function foldBack(f, m, x) {\n            return m.Case === \"SetOne\" ? f(m.Fields[0], x) : m.Case === \"SetEmpty\" ? x : SetTree.foldBack(f, m.Fields[1], f(m.Fields[0], SetTree.foldBack(f, m.Fields[2], x)));\n        };\n\n        SetTree.fold = function fold(f, x, m) {\n            return m.Case === \"SetOne\" ? f(x, m.Fields[0]) : m.Case === \"SetEmpty\" ? x : function () {\n                var x_1 = SetTree.fold(f, x, m.Fields[1]);\n                var x_2 = f(x_1, m.Fields[0]);\n                return SetTree.fold(f, x_2, m.Fields[2]);\n            }();\n        };\n\n        SetTree.forall = function forall(f, m) {\n            return m.Case === \"SetOne\" ? f(m.Fields[0]) : m.Case === \"SetEmpty\" ? true : (f(m.Fields[0]) ? SetTree.forall(f, m.Fields[1]) : false) ? SetTree.forall(f, m.Fields[2]) : false;\n        };\n\n        SetTree.exists = function exists(f, m) {\n            return m.Case === \"SetOne\" ? f(m.Fields[0]) : m.Case === \"SetEmpty\" ? false : (f(m.Fields[0]) ? true : SetTree.exists(f, m.Fields[1])) ? true : SetTree.exists(f, m.Fields[2]);\n        };\n\n        SetTree.isEmpty = function isEmpty(m) {\n            return m.Case === \"SetEmpty\" ? true : false;\n        };\n\n        SetTree.subset = function subset(comparer, a, b) {\n            return SetTree.forall(function (x) {\n                return SetTree.mem(comparer, x, b);\n            }, a);\n        };\n\n        SetTree.psubset = function psubset(comparer, a, b) {\n            return SetTree.forall(function (x) {\n                return SetTree.mem(comparer, x, b);\n            }, a) ? SetTree.exists(function (x) {\n                return !SetTree.mem(comparer, x, a);\n            }, b) : false;\n        };\n\n        SetTree.filterAux = function filterAux(comparer, f, s, acc) {\n            return s.Case === \"SetOne\" ? f(s.Fields[0]) ? SetTree.add(comparer, s.Fields[0], acc) : acc : s.Case === \"SetEmpty\" ? acc : function () {\n                var acc_1 = f(s.Fields[0]) ? SetTree.add(comparer, s.Fields[0], acc) : acc;\n                return SetTree.filterAux(comparer, f, s.Fields[1], SetTree.filterAux(comparer, f, s.Fields[2], acc_1));\n            }();\n        };\n\n        SetTree.filter = function filter(comparer, f, s) {\n            return SetTree.filterAux(comparer, f, s, new SetTree(\"SetEmpty\", []));\n        };\n\n        SetTree.diffAux = function diffAux(comparer, m, acc) {\n            return m.Case === \"SetOne\" ? SetTree.remove(comparer, m.Fields[0], acc) : m.Case === \"SetEmpty\" ? acc : SetTree.diffAux(comparer, m.Fields[1], SetTree.diffAux(comparer, m.Fields[2], SetTree.remove(comparer, m.Fields[0], acc)));\n        };\n\n        SetTree.diff = function diff(comparer, a, b) {\n            return SetTree.diffAux(comparer, b, a);\n        };\n\n        SetTree.union = function union(comparer, t1, t2) {\n            var matchValue = [t1, t2];\n            var $target2 = function $target2(t) {\n                return t;\n            };\n            var $target3 = function $target3(k1, t2_1) {\n                return SetTree.add(comparer, k1, t2_1);\n            };\n            if (matchValue[0].Case === \"SetEmpty\") {\n                var t = matchValue[1];\n                return t;\n            } else {\n                if (matchValue[0].Case === \"SetOne\") {\n                    if (matchValue[1].Case === \"SetEmpty\") {\n                        return $target2(matchValue[0]);\n                    } else {\n                        if (matchValue[1].Case === \"SetOne\") {\n                            return $target3(matchValue[0].Fields[0], matchValue[1]);\n                        } else {\n                            return $target3(matchValue[0].Fields[0], matchValue[1]);\n                        }\n                    }\n                } else {\n                    if (matchValue[1].Case === \"SetEmpty\") {\n                        return $target2(matchValue[0]);\n                    } else {\n                        if (matchValue[1].Case === \"SetOne\") {\n                            var k2 = matchValue[1].Fields[0];\n                            var t1_1 = matchValue[0];\n                            return SetTree.add(comparer, k2, t1_1);\n                        } else {\n                            var h1 = matchValue[0].Fields[3];\n                            var h2 = matchValue[1].Fields[3];\n                            var k1 = matchValue[0].Fields[0];\n                            var k2 = matchValue[1].Fields[0];\n                            var t11 = matchValue[0].Fields[1];\n                            var t12 = matchValue[0].Fields[2];\n                            var t21 = matchValue[1].Fields[1];\n                            var t22 = matchValue[1].Fields[2];\n                            if (h1 > h2) {\n                                var patternInput = SetTree.split(comparer, k1, t2);\n                                var lo = patternInput[0];\n                                var hi = patternInput[2];\n                                return SetTree.balance(comparer, SetTree.union(comparer, t11, lo), k1, SetTree.union(comparer, t12, hi));\n                            } else {\n                                var patternInput = SetTree.split(comparer, k2, t1);\n                                var lo = patternInput[0];\n                                var hi = patternInput[2];\n                                return SetTree.balance(comparer, SetTree.union(comparer, t21, lo), k2, SetTree.union(comparer, t22, hi));\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        SetTree.intersectionAux = function intersectionAux(comparer, b, m, acc) {\n            return m.Case === \"SetOne\" ? SetTree.mem(comparer, m.Fields[0], b) ? SetTree.add(comparer, m.Fields[0], acc) : acc : m.Case === \"SetEmpty\" ? acc : function () {\n                var acc_1 = SetTree.intersectionAux(comparer, b, m.Fields[2], acc);\n                var acc_2 = SetTree.mem(comparer, m.Fields[0], b) ? SetTree.add(comparer, m.Fields[0], acc_1) : acc_1;\n                return SetTree.intersectionAux(comparer, b, m.Fields[1], acc_2);\n            }();\n        };\n\n        SetTree.intersection = function intersection(comparer, a, b) {\n            return SetTree.intersectionAux(comparer, b, a, new SetTree(\"SetEmpty\", []));\n        };\n\n        SetTree.partition1 = function partition1(comparer, f, k, acc1, acc2) {\n            return f(k) ? [SetTree.add(comparer, k, acc1), acc2] : [acc1, SetTree.add(comparer, k, acc2)];\n        };\n\n        SetTree.partitionAux = function partitionAux(comparer, f, s, acc_0, acc_1) {\n            var acc = [acc_0, acc_1];\n            if (s.Case === \"SetOne\") {\n                var acc1 = acc[0];\n                var acc2 = acc[1];\n                return SetTree.partition1(comparer, f, s.Fields[0], acc1, acc2);\n            } else {\n                if (s.Case === \"SetEmpty\") {\n                    return acc;\n                } else {\n                    var acc_2 = function () {\n                        var arg30_ = acc[0];\n                        var arg31_ = acc[1];\n                        return SetTree.partitionAux(comparer, f, s.Fields[2], arg30_, arg31_);\n                    }();\n                    var acc_3 = function () {\n                        var acc1 = acc_2[0];\n                        var acc2 = acc_2[1];\n                        return SetTree.partition1(comparer, f, s.Fields[0], acc1, acc2);\n                    }();\n                    var arg30_ = acc_3[0];\n                    var arg31_ = acc_3[1];\n                    return SetTree.partitionAux(comparer, f, s.Fields[1], arg30_, arg31_);\n                }\n            }\n        };\n\n        SetTree.partition = function partition(comparer, f, s) {\n            var seed = [new SetTree(\"SetEmpty\", []), new SetTree(\"SetEmpty\", [])];\n            var arg30_ = seed[0];\n            var arg31_ = seed[1];\n            return SetTree.partitionAux(comparer, f, s, arg30_, arg31_);\n        };\n\n        SetTree.minimumElementAux = function minimumElementAux(s, n) {\n            return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? n : SetTree.minimumElementAux(s.Fields[1], s.Fields[0]);\n        };\n\n        SetTree.minimumElementOpt = function minimumElementOpt(s) {\n            return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? null : SetTree.minimumElementAux(s.Fields[1], s.Fields[0]);\n        };\n\n        SetTree.maximumElementAux = function maximumElementAux(s, n) {\n            return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? n : SetTree.maximumElementAux(s.Fields[2], s.Fields[0]);\n        };\n\n        SetTree.maximumElementOpt = function maximumElementOpt(s) {\n            return s.Case === \"SetOne\" ? s.Fields[0] : s.Case === \"SetEmpty\" ? null : SetTree.maximumElementAux(s.Fields[2], s.Fields[0]);\n        };\n\n        SetTree.minimumElement = function minimumElement(s) {\n            var matchValue = SetTree.minimumElementOpt(s);\n            if (matchValue == null) {\n                throw \"Set contains no elements\";\n            } else {\n                return matchValue;\n            }\n        };\n\n        SetTree.maximumElement = function maximumElement(s) {\n            var matchValue = SetTree.maximumElementOpt(s);\n            if (matchValue == null) {\n                throw \"Set contains no elements\";\n            } else {\n                return matchValue;\n            }\n        };\n\n        SetTree.collapseLHS = function collapseLHS(stack) {\n            return stack.tail != null ? stack.head.Case === \"SetOne\" ? stack : stack.head.Case === \"SetNode\" ? SetTree.collapseLHS(List.ofArray([stack.head.Fields[1], SetTree.SetOne(stack.head.Fields[0]), stack.head.Fields[2]], stack.tail)) : SetTree.collapseLHS(stack.tail) : new List();\n        };\n\n        SetTree.mkIterator = function mkIterator(s) {\n            return { stack: SetTree.collapseLHS(new List(s, new List())), started: false };\n        };\n\n        SetTree.moveNext = function moveNext(i) {\n            function current(i) {\n                if (i.stack.tail == null) {\n                    return null;\n                } else if (i.stack.head.Case === \"SetOne\") {\n                    return i.stack.head.Fields[0];\n                }\n                throw \"Please report error: Set iterator, unexpected stack for current\";\n            }\n            if (i.started) {\n                if (i.stack.tail == null) {\n                    return { done: true };\n                } else {\n                    if (i.stack.head.Case === \"SetOne\") {\n                        i.stack = SetTree.collapseLHS(i.stack.tail);\n                        return {\n                            done: i.stack.tail == null,\n                            value: current(i)\n                        };\n                    } else {\n                        throw \"Please report error: Set iterator, unexpected stack for moveNext\";\n                    }\n                }\n            } else {\n                i.started = true;\n                return {\n                    done: i.stack.tail == null,\n                    value: current(i)\n                };\n            }\n            ;\n        };\n\n        SetTree.compareStacks = function compareStacks(comparer, l1, l2) {\n            var $target8 = function $target8(n1k, t1) {\n                return SetTree.compareStacks(comparer, List.ofArray([new SetTree(\"SetEmpty\", []), SetTree.SetOne(n1k)], t1), l2);\n            };\n            var $target9 = function $target9(n1k, n1l, n1r, t1) {\n                return SetTree.compareStacks(comparer, List.ofArray([n1l, SetTree.SetNode(n1k, new SetTree(\"SetEmpty\", []), n1r, 0)], t1), l2);\n            };\n            var $target11 = function $target11(n2k, n2l, n2r, t2) {\n                return SetTree.compareStacks(comparer, l1, List.ofArray([n2l, SetTree.SetNode(n2k, new SetTree(\"SetEmpty\", []), n2r, 0)], t2));\n            };\n            if (l1.tail != null) {\n                if (l2.tail != null) {\n                    if (l2.head.Case === \"SetOne\") {\n                        if (l1.head.Case === \"SetOne\") {\n                            var n1k = l1.head.Fields[0],\n                                n2k = l2.head.Fields[0],\n                                t1 = l1.tail,\n                                t2 = l2.tail,\n                                c = comparer.Compare(n1k, n2k);\n                            if (c !== 0) {\n                                return c;\n                            } else {\n                                return SetTree.compareStacks(comparer, t1, t2);\n                            }\n                        } else {\n                            if (l1.head.Case === \"SetNode\") {\n                                if (l1.head.Fields[1].Case === \"SetEmpty\") {\n                                    var emp = l1.head.Fields[1],\n                                        _n1k = l1.head.Fields[0],\n                                        n1r = l1.head.Fields[2],\n                                        _n2k = l2.head.Fields[0],\n                                        _t = l1.tail,\n                                        _t2 = l2.tail,\n                                        _c = comparer.Compare(_n1k, _n2k);\n                                    if (_c !== 0) {\n                                        return _c;\n                                    } else {\n                                        return SetTree.compareStacks(comparer, List.ofArray([n1r], _t), List.ofArray([emp], _t2));\n                                    }\n                                } else {\n                                    return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\n                                }\n                            } else {\n                                var _n2k2 = l2.head.Fields[0],\n                                    _t3 = l2.tail;\n                                return SetTree.compareStacks(comparer, l1, List.ofArray([new SetTree(\"SetEmpty\", []), SetTree.SetOne(_n2k2)], _t3));\n                            }\n                        }\n                    } else {\n                        if (l2.head.Case === \"SetNode\") {\n                            if (l2.head.Fields[1].Case === \"SetEmpty\") {\n                                if (l1.head.Case === \"SetOne\") {\n                                    var _n1k2 = l1.head.Fields[0],\n                                        _n2k3 = l2.head.Fields[0],\n                                        n2r = l2.head.Fields[2],\n                                        _t4 = l1.tail,\n                                        _t5 = l2.tail,\n                                        _c2 = comparer.Compare(_n1k2, _n2k3);\n                                    if (_c2 !== 0) {\n                                        return _c2;\n                                    } else {\n                                        return SetTree.compareStacks(comparer, List.ofArray([new SetTree(\"SetEmpty\", [])], _t4), List.ofArray([n2r], _t5));\n                                    }\n                                } else {\n                                    if (l1.head.Case === \"SetNode\") {\n                                        if (l1.head.Fields[1].Case === \"SetEmpty\") {\n                                            var _n1k3 = l1.head.Fields[0],\n                                                _n1r = l1.head.Fields[2],\n                                                _n2k4 = l2.head.Fields[0],\n                                                _n2r = l2.head.Fields[2],\n                                                _t6 = l1.tail,\n                                                _t7 = l2.tail,\n                                                _c3 = comparer.Compare(_n1k3, _n2k4);\n                                            if (_c3 !== 0) {\n                                                return _c3;\n                                            } else {\n                                                return SetTree.compareStacks(comparer, List.ofArray([_n1r], _t6), List.ofArray([_n2r], _t7));\n                                            }\n                                        } else {\n                                            return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\n                                        }\n                                    } else {\n                                        return $target11(l2.head.Fields[0], l2.head.Fields[1], l2.head.Fields[2], l2.tail);\n                                    }\n                                }\n                            } else {\n                                if (l1.head.Case === \"SetOne\") {\n                                    return $target8(l1.head.Fields[0], l1.tail);\n                                } else {\n                                    if (l1.head.Case === \"SetNode\") {\n                                        return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\n                                    } else {\n                                        return $target11(l2.head.Fields[0], l2.head.Fields[1], l2.head.Fields[2], l2.tail);\n                                    }\n                                }\n                            }\n                        } else {\n                            if (l1.head.Case === \"SetOne\") {\n                                return $target8(l1.head.Fields[0], l1.tail);\n                            } else {\n                                if (l1.head.Case === \"SetNode\") {\n                                    return $target9(l1.head.Fields[0], l1.head.Fields[1], l1.head.Fields[2], l1.tail);\n                                } else {\n                                    return SetTree.compareStacks(comparer, l1.tail, l2.tail);\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    return 1;\n                }\n            } else {\n                if (l2.tail != null) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            }\n        };\n\n        SetTree.compare = function compare(comparer, s1, s2) {\n            if (s1.Case === \"SetEmpty\") {\n                if (s2.Case === \"SetEmpty\") {\n                    return 0;\n                } else {\n                    return -1;\n                }\n            } else {\n                if (s2.Case === \"SetEmpty\") {\n                    return 1;\n                } else {\n                    return SetTree.compareStacks(comparer, List.ofArray([s1]), List.ofArray([s2]));\n                }\n            }\n        };\n\n        SetTree.mkFromEnumerator = function mkFromEnumerator(comparer, acc, e) {\n            var cur = e.next();\n            while (!cur.done) {\n                acc = SetTree.add(comparer, cur.value, acc);\n                cur = e.next();\n            }\n            return acc;\n        };\n\n        SetTree.ofSeq = function ofSeq(comparer, c) {\n            var ie = c[Symbol.iterator]();\n            return SetTree.mkFromEnumerator(comparer, new SetTree(\"SetEmpty\", []), ie);\n        };\n\n        return SetTree;\n    }();\n\n    SetTree.tolerance = 2;\n\n    var FSet = function () {\n        /** Do not call, use Set.create instead. */\n        function FSet() {\n            _classCallCheck(this, FSet);\n        }\n\n        FSet.from = function from(comparer, tree) {\n            var s = new FSet();\n            s.tree = tree;\n            s.comparer = comparer || new GenericComparer();\n            return s;\n        };\n\n        FSet.create = function create(ie, comparer) {\n            comparer = comparer || new GenericComparer();\n            return FSet.from(comparer, ie ? SetTree.ofSeq(comparer, ie) : new SetTree(\"SetEmpty\", []));\n        };\n\n        FSet.prototype.ToString = function ToString() {\n            return \"set [\" + Array.from(this).map(Util.toString).join(\"; \") + \"]\";\n        };\n\n        FSet.prototype.Equals = function Equals(s2) {\n            return this.CompareTo(s2) === 0;\n        };\n\n        FSet.prototype.CompareTo = function CompareTo(s2) {\n            return SetTree.compare(this.comparer, this.tree, s2.tree);\n        };\n\n        FSet.prototype[Symbol.iterator] = function () {\n            var i = SetTree.mkIterator(this.tree);\n            return {\n                next: function next() {\n                    return SetTree.moveNext(i);\n                }\n            };\n        };\n\n        FSet.prototype.values = function values() {\n            return this[Symbol.iterator]();\n        };\n\n        FSet.prototype.has = function has(v) {\n            return SetTree.mem(this.comparer, v, this.tree);\n        };\n\n        FSet.prototype.add = function add(v) {\n            throw \"not supported\";\n        };\n\n        FSet.prototype.delete = function _delete(v) {\n            throw \"not supported\";\n        };\n\n        FSet.prototype.clear = function clear() {\n            throw \"not supported\";\n        };\n\n        FSet.isEmpty = function isEmpty(s) {\n            return SetTree.isEmpty(s.tree);\n        };\n\n        FSet.add = function add(item, s) {\n            return FSet.from(s.comparer, SetTree.add(s.comparer, item, s.tree));\n        };\n\n        FSet.addInPlace = function addInPlace(item, s) {\n            return s.has(item) ? false : (s.add(item), true);\n        };\n\n        FSet.remove = function remove(item, s) {\n            return FSet.from(s.comparer, SetTree.remove(s.comparer, item, s.tree));\n        };\n\n        FSet.union = function union(set1, set2) {\n            return set2.tree.Case === \"SetEmpty\" ? set1 : set1.tree.Case === \"SetEmpty\" ? set2 : FSet.from(set1.comparer, SetTree.union(set1.comparer, set1.tree, set2.tree));\n        };\n\n        FSet.unionInPlace = function unionInPlace(set1, set2) {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = set2[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var x = _step.value;\n\n                    set1.add(x);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        };\n\n        FSet.unionMany = function unionMany(sets) {\n            // Pass args as FSet.union(s, acc) instead of FSet.union(acc, s)\n            // to discard the comparer of the first empty set \n            return Seq.fold(function (acc, s) {\n                return FSet.union(s, acc);\n            }, FSet.create(), sets);\n        };\n\n        FSet.difference = function difference(set1, set2) {\n            return set1.tree.Case === \"SetEmpty\" ? set1 : set2.tree.Case === \"SetEmpty\" ? set1 : FSet.from(set1.comparer, SetTree.diff(set1.comparer, set1.tree, set2.tree));\n        };\n\n        FSet.differenceInPlace = function differenceInPlace(set1, set2) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = set2[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var x = _step2.value;\n\n                    set1.delete(x);\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n        };\n\n        FSet.intersect = function intersect(set1, set2) {\n            return set2.tree.Case === \"SetEmpty\" ? set2 : set1.tree.Case === \"SetEmpty\" ? set1 : FSet.from(set1.comparer, SetTree.intersection(set1.comparer, set1.tree, set2.tree));\n        };\n\n        FSet.intersectInPlace = function intersectInPlace(set1, set2) {\n            var set2_ = set2 instanceof Set ? set2 : new Set(set2);\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n                for (var _iterator3 = set1[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                    var x = _step3.value;\n\n                    if (!set2_.has(x)) {\n                        set1.delete(x);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally {\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n        };\n\n        FSet.intersectMany = function intersectMany(sets) {\n            return Seq.reduce(function (s1, s2) {\n                return FSet.intersect(s1, s2);\n            }, sets);\n        };\n\n        FSet.isProperSubsetOf = function isProperSubsetOf(set1, set2) {\n            if (set1 instanceof FSet && set2 instanceof FSet) {\n                return SetTree.psubset(set1.comparer, set1.tree, set2.tree);\n            } else {\n                set2 = set2 instanceof Set ? set2 : new Set(set2);\n                return Seq.forAll(function (x) {\n                    return set2.has(x);\n                }, set1) && Seq.exists(function (x) {\n                    return !set1.has(x);\n                }, set2);\n            }\n        };\n\n        FSet.isSubsetOf = function isSubsetOf(set1, set2) {\n            if (set1 instanceof FSet && set2 instanceof FSet) {\n                return SetTree.subset(set1.comparer, set1.tree, set2.tree);\n            } else {\n                set2 = set2 instanceof Set ? set2 : new Set(set2);\n                return Seq.forAll(function (x) {\n                    return set2.has(x);\n                }, set1);\n            }\n        };\n\n        FSet.isProperSupersetOf = function isProperSupersetOf(set1, set2) {\n            if (set1 instanceof FSet && set2 instanceof FSet) {\n                return SetTree.psubset(set1.comparer, set2.tree, set1.tree);\n            } else {\n                return FSet.isProperSubset(set2 instanceof Set ? set2 : new Set(set2), set1);\n            }\n        };\n\n        FSet.isSupersetOf = function isSupersetOf(set1, set2) {\n            if (set1 instanceof FSet && set2 instanceof FSet) {\n                return SetTree.subset(set1.comparer, set2.tree, set1.tree);\n            } else {\n                return FSet.isSubset(set2 instanceof Set ? set2 : new Set(set2), set1);\n            }\n        };\n\n        FSet.copyTo = function copyTo(xs, arr, arrayIndex, count) {\n            if (!Array.isArray(arr) && !ArrayBuffer.isView(arr)) throw \"Array is invalid\";\n            count = count || arr.length;\n            var i = arrayIndex || 0;\n            var iter = xs[Symbol.iterator]();\n            while (count--) {\n                var el = iter.next();\n                if (el.done) break;\n                arr[i++] = el.value;\n            }\n        };\n\n        FSet.partition = function partition(f, s) {\n            if (s.tree.Case === \"SetEmpty\") {\n                return [s, s];\n            } else {\n                var tuple = SetTree.partition(s.comparer, f, s.tree);\n                return [FSet.from(s.comparer, tuple[0]), FSet.from(s.comparer, tuple[1])];\n            }\n        };\n\n        FSet.filter = function filter(f, s) {\n            if (s.tree.Case === \"SetEmpty\") {\n                return s;\n            } else {\n                return FSet.from(s.comparer, SetTree.filter(s.comparer, f, s.tree));\n            }\n        };\n\n        FSet.map = function map(f, s) {\n            var comparer = new GenericComparer();\n            return FSet.from(comparer, SetTree.fold(function (acc, k) {\n                return SetTree.add(comparer, f(k), acc);\n            }, new SetTree(\"SetEmpty\", []), s.tree));\n        };\n\n        FSet.exists = function exists(f, s) {\n            return SetTree.exists(f, s.tree);\n        };\n\n        FSet.forAll = function forAll(f, s) {\n            return SetTree.forall(f, s.tree);\n        };\n\n        FSet.fold = function fold(f, seed, s) {\n            return SetTree.fold(f, seed, s.tree);\n        };\n\n        FSet.foldBack = function foldBack(f, s, seed) {\n            return SetTree.foldBack(f, s.tree, seed);\n        };\n\n        FSet.iterate = function iterate(f, s) {\n            SetTree.iter(f, s.tree);\n        };\n\n        FSet.minimumElement = function minimumElement(s) {\n            return SetTree.minimumElement(s.tree);\n        };\n\n        FSet.maximumElement = function maximumElement(s) {\n            return SetTree.maximumElement(s.tree);\n        };\n\n        _createClass(FSet, [{\n            key: \"size\",\n            get: function get() {\n                return SetTree.count(this.tree);\n            }\n        }]);\n\n        return FSet;\n    }();\n\n    FSet.op_Addition = FSet.union;\n    FSet.op_Subtraction = FSet.difference;\n    FSet.isProperSubset = FSet.isProperSubsetOf;\n    FSet.isSubset = FSet.isSubsetOf;\n    FSet.isProperSuperset = FSet.isProperSupersetOf;\n    FSet.isSuperset = FSet.isSupersetOf;\n    FSet.minElement = FSet.minimumElement;\n    FSet.maxElement = FSet.maximumElement;\n    Util.setInterfaces(FSet.prototype, [\"System.IEquatable\", \"System.IComparable\"], \"Microsoft.FSharp.Collections.FSharpSet\");\n    exports.Set = FSet;\n\n    var MapTree = function () {\n        function MapTree(caseName, fields) {\n            _classCallCheck(this, MapTree);\n\n            this.Case = caseName;\n            this.Fields = fields;\n        }\n\n        MapTree.sizeAux = function sizeAux(acc, m) {\n            return m.Case === \"MapOne\" ? acc + 1 : m.Case === \"MapNode\" ? MapTree.sizeAux(MapTree.sizeAux(acc + 1, m.Fields[2]), m.Fields[3]) : acc;\n        };\n\n        MapTree.size = function size(x) {\n            return MapTree.sizeAux(0, x);\n        };\n\n        MapTree.empty = function empty() {\n            return new MapTree(\"MapEmpty\", []);\n        };\n\n        MapTree.height = function height(_arg1) {\n            return _arg1.Case === \"MapOne\" ? 1 : _arg1.Case === \"MapNode\" ? _arg1.Fields[4] : 0;\n        };\n\n        MapTree.isEmpty = function isEmpty(m) {\n            return m.Case === \"MapEmpty\" ? true : false;\n        };\n\n        MapTree.mk = function mk(l, k, v, r) {\n            var matchValue = [l, r];\n            var $target1 = function $target1() {\n                var hl = MapTree.height(l);\n                var hr = MapTree.height(r);\n                var m = hl < hr ? hr : hl;\n                return new MapTree(\"MapNode\", [k, v, l, r, m + 1]);\n            };\n            if (matchValue[0].Case === \"MapEmpty\") {\n                if (matchValue[1].Case === \"MapEmpty\") {\n                    return new MapTree(\"MapOne\", [k, v]);\n                } else {\n                    return $target1();\n                }\n            } else {\n                return $target1();\n            }\n        };\n\n        MapTree.rebalance = function rebalance(t1, k, v, t2) {\n            var t1h = MapTree.height(t1);\n            var t2h = MapTree.height(t2);\n            if (t2h > t1h + 2) {\n                if (t2.Case === \"MapNode\") {\n                    if (MapTree.height(t2.Fields[2]) > t1h + 1) {\n                        if (t2.Fields[2].Case === \"MapNode\") {\n                            return MapTree.mk(MapTree.mk(t1, k, v, t2.Fields[2].Fields[2]), t2.Fields[2].Fields[0], t2.Fields[2].Fields[1], MapTree.mk(t2.Fields[2].Fields[3], t2.Fields[0], t2.Fields[1], t2.Fields[3]));\n                        } else {\n                            throw \"rebalance\";\n                        }\n                    } else {\n                        return MapTree.mk(MapTree.mk(t1, k, v, t2.Fields[2]), t2.Fields[0], t2.Fields[1], t2.Fields[3]);\n                    }\n                } else {\n                    throw \"rebalance\";\n                }\n            } else {\n                if (t1h > t2h + 2) {\n                    if (t1.Case === \"MapNode\") {\n                        if (MapTree.height(t1.Fields[3]) > t2h + 1) {\n                            if (t1.Fields[3].Case === \"MapNode\") {\n                                return MapTree.mk(MapTree.mk(t1.Fields[2], t1.Fields[0], t1.Fields[1], t1.Fields[3].Fields[2]), t1.Fields[3].Fields[0], t1.Fields[3].Fields[1], MapTree.mk(t1.Fields[3].Fields[3], k, v, t2));\n                            } else {\n                                throw \"rebalance\";\n                            }\n                        } else {\n                            return MapTree.mk(t1.Fields[2], t1.Fields[0], t1.Fields[1], MapTree.mk(t1.Fields[3], k, v, t2));\n                        }\n                    } else {\n                        throw \"rebalance\";\n                    }\n                } else {\n                    return MapTree.mk(t1, k, v, t2);\n                }\n            }\n        };\n\n        MapTree.add = function add(comparer, k, v, m) {\n            if (m.Case === \"MapOne\") {\n                var c = comparer.Compare(k, m.Fields[0]);\n                if (c < 0) {\n                    return new MapTree(\"MapNode\", [k, v, new MapTree(\"MapEmpty\", []), m, 2]);\n                } else if (c === 0) {\n                    return new MapTree(\"MapOne\", [k, v]);\n                }\n                return new MapTree(\"MapNode\", [k, v, m, new MapTree(\"MapEmpty\", []), 2]);\n            } else if (m.Case === \"MapNode\") {\n                var c = comparer.Compare(k, m.Fields[0]);\n                if (c < 0) {\n                    return MapTree.rebalance(MapTree.add(comparer, k, v, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);\n                } else if (c === 0) {\n                    return new MapTree(\"MapNode\", [k, v, m.Fields[2], m.Fields[3], m.Fields[4]]);\n                }\n                return MapTree.rebalance(m.Fields[2], m.Fields[0], m.Fields[1], MapTree.add(comparer, k, v, m.Fields[3]));\n            }\n            return new MapTree(\"MapOne\", [k, v]);\n        };\n\n        MapTree.find = function find(comparer, k, m) {\n            var res = MapTree.tryFind(comparer, k, m);\n            if (res != null) return res;\n            throw \"key not found\";\n        };\n\n        MapTree.tryFind = function tryFind(comparer, k, m) {\n            if (m.Case === \"MapOne\") {\n                var c = comparer.Compare(k, m.Fields[0]);\n                return c === 0 ? m.Fields[1] : null;\n            } else if (m.Case === \"MapNode\") {\n                var c = comparer.Compare(k, m.Fields[0]);\n                if (c < 0) {\n                    return MapTree.tryFind(comparer, k, m.Fields[2]);\n                } else {\n                    if (c === 0) {\n                        return m.Fields[1];\n                    } else {\n                        return MapTree.tryFind(comparer, k, m.Fields[3]);\n                    }\n                }\n            }\n            return null;\n        };\n\n        MapTree.partition1 = function partition1(comparer, f, k, v, acc1, acc2) {\n            return f(k, v) ? [MapTree.add(comparer, k, v, acc1), acc2] : [acc1, MapTree.add(comparer, k, v, acc2)];\n        };\n\n        MapTree.partitionAux = function partitionAux(comparer, f, s, acc_0, acc_1) {\n            var acc = [acc_0, acc_1];\n            if (s.Case === \"MapOne\") {\n                return MapTree.partition1(comparer, f, s.Fields[0], s.Fields[1], acc[0], acc[1]);\n            } else if (s.Case === \"MapNode\") {\n                var acc_2 = MapTree.partitionAux(comparer, f, s.Fields[3], acc[0], acc[1]);\n                var acc_3 = MapTree.partition1(comparer, f, s.Fields[0], s.Fields[1], acc_2[0], acc_2[1]);\n                return MapTree.partitionAux(comparer, f, s.Fields[2], acc_3[0], acc_3[1]);\n            }\n            return acc;\n        };\n\n        MapTree.partition = function partition(comparer, f, s) {\n            return MapTree.partitionAux(comparer, f, s, MapTree.empty(), MapTree.empty());\n        };\n\n        MapTree.filter1 = function filter1(comparer, f, k, v, acc) {\n            return f(k, v) ? MapTree.add(comparer, k, v, acc) : acc;\n        };\n\n        MapTree.filterAux = function filterAux(comparer, f, s, acc) {\n            return s.Case === \"MapOne\" ? MapTree.filter1(comparer, f, s.Fields[0], s.Fields[1], acc) : s.Case === \"MapNode\" ? function () {\n                var acc_1 = MapTree.filterAux(comparer, f, s.Fields[2], acc);\n                var acc_2 = MapTree.filter1(comparer, f, s.Fields[0], s.Fields[1], acc_1);\n                return MapTree.filterAux(comparer, f, s.Fields[3], acc_2);\n            }() : acc;\n        };\n\n        MapTree.filter = function filter(comparer, f, s) {\n            return MapTree.filterAux(comparer, f, s, MapTree.empty());\n        };\n\n        MapTree.spliceOutSuccessor = function spliceOutSuccessor(m) {\n            if (m.Case === \"MapOne\") {\n                return [m.Fields[0], m.Fields[1], new MapTree(\"MapEmpty\", [])];\n            } else if (m.Case === \"MapNode\") {\n                if (m.Fields[2].Case === \"MapEmpty\") {\n                    return [m.Fields[0], m.Fields[1], m.Fields[3]];\n                } else {\n                    var kvl = MapTree.spliceOutSuccessor(m.Fields[2]);\n                    return [kvl[0], kvl[1], MapTree.mk(kvl[2], m.Fields[0], m.Fields[1], m.Fields[3])];\n                }\n            }\n            throw \"internal error: Map.spliceOutSuccessor\";\n        };\n\n        MapTree.remove = function remove(comparer, k, m) {\n            if (m.Case === \"MapOne\") {\n                var c = comparer.Compare(k, m.Fields[0]);\n                if (c === 0) {\n                    return new MapTree(\"MapEmpty\", []);\n                } else {\n                    return m;\n                }\n            } else if (m.Case === \"MapNode\") {\n                var c = comparer.Compare(k, m.Fields[0]);\n                if (c < 0) {\n                    return MapTree.rebalance(MapTree.remove(comparer, k, m.Fields[2]), m.Fields[0], m.Fields[1], m.Fields[3]);\n                } else {\n                    if (c === 0) {\n                        var matchValue = [m.Fields[2], m.Fields[3]];\n                        if (matchValue[0].Case === \"MapEmpty\") {\n                            return m.Fields[3];\n                        } else {\n                            if (matchValue[1].Case === \"MapEmpty\") {\n                                return m.Fields[2];\n                            } else {\n                                var patternInput = MapTree.spliceOutSuccessor(m.Fields[3]);\n                                var sv = patternInput[1];\n                                var sk = patternInput[0];\n                                var r_ = patternInput[2];\n                                return MapTree.mk(m.Fields[2], sk, sv, r_);\n                            }\n                        }\n                    } else {\n                        return MapTree.rebalance(m.Fields[2], m.Fields[0], m.Fields[1], MapTree.remove(comparer, k, m.Fields[3]));\n                    }\n                }\n            } else {\n                return MapTree.empty();\n            }\n        };\n\n        MapTree.mem = function mem(comparer, k, m) {\n            return m.Case === \"MapOne\" ? comparer.Compare(k, m.Fields[0]) === 0 : m.Case === \"MapNode\" ? function () {\n                var c = comparer.Compare(k, m.Fields[0]);\n                if (c < 0) {\n                    return MapTree.mem(comparer, k, m.Fields[2]);\n                } else {\n                    if (c === 0) {\n                        return true;\n                    } else {\n                        return MapTree.mem(comparer, k, m.Fields[3]);\n                    }\n                }\n            }() : false;\n        };\n\n        MapTree.iter = function iter(f, m) {\n            if (m.Case === \"MapOne\") {\n                f(m.Fields[0], m.Fields[1]);\n            } else if (m.Case === \"MapNode\") {\n                MapTree.iter(f, m.Fields[2]);\n                f(m.Fields[0], m.Fields[1]);\n                MapTree.iter(f, m.Fields[3]);\n            }\n        };\n\n        MapTree.tryPick = function tryPick(f, m) {\n            return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? function () {\n                var matchValue = MapTree.tryPick(f, m.Fields[2]);\n                if (matchValue == null) {\n                    var matchValue_1 = f(m.Fields[0], m.Fields[1]);\n                    if (matchValue_1 == null) {\n                        return MapTree.tryPick(f, m.Fields[3]);\n                    } else {\n                        var res = matchValue_1;\n                        return res;\n                    }\n                } else {\n                    var res = matchValue;\n                    return res;\n                }\n            }() : null;\n        };\n\n        MapTree.exists = function exists(f, m) {\n            return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (MapTree.exists(f, m.Fields[2]) ? true : f(m.Fields[0], m.Fields[1])) ? true : MapTree.exists(f, m.Fields[3]) : false;\n        };\n\n        MapTree.forall = function forall(f, m) {\n            return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? (MapTree.forall(f, m.Fields[2]) ? f(m.Fields[0], m.Fields[1]) : false) ? MapTree.forall(f, m.Fields[3]) : false : true;\n        };\n\n        MapTree.mapi = function mapi(f, m) {\n            return m.Case === \"MapOne\" ? new MapTree(\"MapOne\", [m.Fields[0], f(m.Fields[0], m.Fields[1])]) : m.Case === \"MapNode\" ? function () {\n                var l2 = MapTree.mapi(f, m.Fields[2]);\n                var v2 = f(m.Fields[0], m.Fields[1]);\n                var r2 = MapTree.mapi(f, m.Fields[3]);\n                return new MapTree(\"MapNode\", [m.Fields[0], v2, l2, r2, m.Fields[4]]);\n            }() : MapTree.empty();\n        };\n\n        MapTree.foldBack = function foldBack(f, m, x) {\n            return m.Case === \"MapOne\" ? f(m.Fields[0], m.Fields[1], x) : m.Case === \"MapNode\" ? function () {\n                var x_1 = MapTree.foldBack(f, m.Fields[3], x);\n                var x_2 = f(m.Fields[0], m.Fields[1], x_1);\n                return MapTree.foldBack(f, m.Fields[2], x_2);\n            }() : x;\n        };\n\n        MapTree.fold = function fold(f, x, m) {\n            return m.Case === \"MapOne\" ? f(x, m.Fields[0], m.Fields[1]) : m.Case === \"MapNode\" ? function () {\n                var x_1 = MapTree.fold(f, x, m.Fields[2]);\n                var x_2 = f(x_1, m.Fields[0], m.Fields[1]);\n                return MapTree.fold(f, x_2, m.Fields[3]);\n            }() : x;\n        };\n\n        MapTree.mkFromEnumerator = function mkFromEnumerator(comparer, acc, e) {\n            var cur = e.next();\n            while (!cur.done) {\n                acc = MapTree.add(comparer, cur.value[0], cur.value[1], acc);\n                cur = e.next();\n            }\n            return acc;\n        };\n\n        MapTree.ofSeq = function ofSeq(comparer, c) {\n            var ie = c[Symbol.iterator]();\n            return MapTree.mkFromEnumerator(comparer, MapTree.empty(), ie);\n        };\n\n        MapTree.collapseLHS = function collapseLHS(stack) {\n            if (stack.tail != null) {\n                if (stack.head.Case === \"MapOne\") {\n                    return stack;\n                } else if (stack.head.Case === \"MapNode\") {\n                    return MapTree.collapseLHS(List.ofArray([stack.head.Fields[2], new MapTree(\"MapOne\", [stack.head.Fields[0], stack.head.Fields[1]]), stack.head.Fields[3]], stack.tail));\n                } else {\n                    return MapTree.collapseLHS(stack.tail);\n                }\n            } else {\n                return new List();\n            }\n        };\n\n        MapTree.mkIterator = function mkIterator(s) {\n            return { stack: MapTree.collapseLHS(new List(s, new List())), started: false };\n        };\n\n        MapTree.moveNext = function moveNext(i) {\n            function current(i) {\n                if (i.stack.tail == null) {\n                    return null;\n                } else if (i.stack.head.Case === \"MapOne\") {\n                    return [i.stack.head.Fields[0], i.stack.head.Fields[1]];\n                }\n                throw \"Please report error: Map iterator, unexpected stack for current\";\n            }\n            if (i.started) {\n                if (i.stack.tail == null) {\n                    return { done: true };\n                } else {\n                    if (i.stack.head.Case === \"MapOne\") {\n                        i.stack = MapTree.collapseLHS(i.stack.tail);\n                        return {\n                            done: i.stack.tail == null,\n                            value: current(i)\n                        };\n                    } else {\n                        throw \"Please report error: Map iterator, unexpected stack for moveNext\";\n                    }\n                }\n            } else {\n                i.started = true;\n                return {\n                    done: i.stack.tail == null,\n                    value: current(i)\n                };\n            }\n            ;\n        };\n\n        return MapTree;\n    }();\n\n    var FMap = function () {\n        /** Do not call, use Map.create instead. */\n        function FMap() {\n            _classCallCheck(this, FMap);\n        }\n\n        FMap.from = function from(comparer, tree) {\n            var map = new FMap();\n            map.tree = tree;\n            map.comparer = comparer || new GenericComparer();\n            return map;\n        };\n\n        FMap.create = function create(ie, comparer) {\n            comparer = comparer || new GenericComparer();\n            return FMap.from(comparer, ie ? MapTree.ofSeq(comparer, ie) : MapTree.empty());\n        };\n\n        FMap.prototype.ToString = function ToString() {\n            return \"map [\" + Array.from(this).map(Util.toString).join(\"; \") + \"]\";\n        };\n\n        FMap.prototype.Equals = function Equals(m2) {\n            return this.CompareTo(m2) === 0;\n        };\n\n        FMap.prototype.CompareTo = function CompareTo(m2) {\n            var _this4 = this;\n\n            return Seq.compareWith(function (kvp1, kvp2) {\n                var c = _this4.comparer.Compare(kvp1[0], kvp2[0]);\n                return c !== 0 ? c : Util.compare(kvp1[1], kvp2[1]);\n            }, this, m2);\n        };\n\n        FMap.prototype[Symbol.iterator] = function () {\n            var i = MapTree.mkIterator(this.tree);\n            return {\n                next: function next() {\n                    return MapTree.moveNext(i);\n                }\n            };\n        };\n\n        FMap.prototype.entries = function entries() {\n            return this[Symbol.iterator]();\n        };\n\n        FMap.prototype.keys = function keys() {\n            return Seq.map(function (kv) {\n                return kv[0];\n            }, this);\n        };\n\n        FMap.prototype.values = function values() {\n            return Seq.map(function (kv) {\n                return kv[1];\n            }, this);\n        };\n\n        FMap.prototype.get = function get(k) {\n            return MapTree.find(this.comparer, k, this.tree);\n        };\n\n        FMap.prototype.has = function has(k) {\n            return MapTree.mem(this.comparer, k, this.tree);\n        };\n\n        FMap.prototype.set = function set(k, v) {\n            throw \"not supported\";\n        };\n\n        FMap.prototype.delete = function _delete(k) {\n            throw \"not supported\";\n        };\n\n        FMap.prototype.clear = function clear() {\n            throw \"not supported\";\n        };\n\n        FMap.add = function add(k, v, map) {\n            return FMap.from(map.comparer, MapTree.add(map.comparer, k, v, map.tree));\n        };\n\n        FMap.remove = function remove(item, map) {\n            return FMap.from(map.comparer, MapTree.remove(map.comparer, item, map.tree));\n        };\n\n        FMap.containsValue = function containsValue(v, map) {\n            return Seq.fold(function (acc, k) {\n                return acc || Util.equals(map.get(k), v);\n            }, false, map.keys());\n        };\n\n        FMap.exists = function exists(f, map) {\n            return MapTree.exists(f, map.tree);\n        };\n\n        FMap.find = function find(k, map) {\n            return MapTree.find(map.comparer, k, map.tree);\n        };\n\n        FMap.tryFind = function tryFind(k, map) {\n            return MapTree.tryFind(map.comparer, k, map.tree);\n        };\n\n        FMap.filter = function filter(f, map) {\n            return FMap.from(map.comparer, MapTree.filter(map.comparer, f, map.tree));\n        };\n\n        FMap.fold = function fold(f, seed, map) {\n            return MapTree.fold(f, seed, map.tree);\n        };\n\n        FMap.foldBack = function foldBack(f, map, seed) {\n            return MapTree.foldBack(f, map.tree, seed);\n        };\n\n        FMap.forAll = function forAll(f, map) {\n            return MapTree.forall(f, map.tree);\n        };\n\n        FMap.isEmpty = function isEmpty(map) {\n            return MapTree.isEmpty(map.tree);\n        };\n\n        FMap.iterate = function iterate(f, map) {\n            MapTree.iter(f, map.tree);\n        };\n\n        FMap.map = function map(f, _map) {\n            return FMap.from(_map.comparer, MapTree.mapi(f, _map.tree));\n        };\n\n        FMap.partition = function partition(f, map) {\n            var rs = MapTree.partition(map.comparer, f, map.tree);\n            return [FMap.from(map.comparer, rs[0]), FMap.from(map.comparer, rs[1])];\n        };\n\n        FMap.findKey = function findKey(f, map) {\n            return Seq.pick(function (kv) {\n                return f(kv[0], kv[1]) ? kv[0] : null;\n            }, map);\n        };\n\n        FMap.tryFindKey = function tryFindKey(f, map) {\n            return Seq.tryPick(function (kv) {\n                return f(kv[0], kv[1]) ? kv[0] : null;\n            }, map);\n        };\n\n        FMap.pick = function pick(f, map) {\n            var res = FMap.tryPick(f, map);\n            if (res != null) return res;\n            throw \"key not found\";\n        };\n\n        FMap.tryPick = function tryPick(f, map) {\n            return MapTree.tryPick(f, map.tree);\n        };\n\n        _createClass(FMap, [{\n            key: \"size\",\n            get: function get() {\n                return MapTree.size(this.tree);\n            }\n        }]);\n\n        return FMap;\n    }();\n\n    Util.setInterfaces(FMap.prototype, [\"System.IEquatable\", \"System.IComparable\"], \"Microsoft.FSharp.Collections.FSharpMap\");\n    exports.Map = FMap;\n    var Nothing = exports.Nothing = void 0;\n    var maxTrampolineCallCount = 2000;\n\n    var Trampoline = exports.Trampoline = function () {\n        function Trampoline() {\n            _classCallCheck(this, Trampoline);\n\n            this.callCount = 0;\n        }\n\n        Trampoline.prototype.incrementAndCheck = function incrementAndCheck() {\n            return this.callCount++ > maxTrampolineCallCount;\n        };\n\n        Trampoline.prototype.hijack = function hijack(f) {\n            this.callCount = 0;\n            setTimeout(f, 0);\n        };\n\n        return Trampoline;\n    }();\n\n    var AsyncImpl = {\n        protectedCont: function protectedCont(f) {\n            return function (ctx) {\n                if (ctx.cancelToken.isCancelled) ctx.onCancel(\"cancelled\");else if (ctx.trampoline.incrementAndCheck()) ctx.trampoline.hijack(function () {\n                    try {\n                        return f(ctx);\n                    } catch (err) {\n                        ctx.onError(err);\n                    }\n                });else try {\n                    return f(ctx);\n                } catch (err) {\n                    ctx.onError(err);\n                }\n            };\n        },\n        bind: function bind(computation, binder) {\n            return AsyncImpl.protectedCont(function (ctx) {\n                computation({\n                    onSuccess: function onSuccess(x) {\n                        return binder(x)(ctx);\n                    },\n                    onError: ctx.onError,\n                    onCancel: ctx.onCancel,\n                    cancelToken: ctx.cancelToken,\n                    trampoline: ctx.trampoline\n                });\n            });\n        },\n        return: function _return(value) {\n            return AsyncImpl.protectedCont(function (ctx) {\n                return ctx.onSuccess(value);\n            });\n        }\n    };\n\n    var AsyncBuilder = exports.AsyncBuilder = function () {\n        function AsyncBuilder() {\n            _classCallCheck(this, AsyncBuilder);\n        }\n\n        AsyncBuilder.prototype.Bind = function Bind(computation, binder) {\n            return AsyncImpl.bind(computation, binder);\n        };\n\n        AsyncBuilder.prototype.Combine = function Combine(computation1, computation2) {\n            return this.Bind(computation1, function () {\n                return computation2;\n            });\n        };\n\n        AsyncBuilder.prototype.Delay = function Delay(generator) {\n            return AsyncImpl.protectedCont(function (ctx) {\n                return generator()(ctx);\n            });\n        };\n\n        AsyncBuilder.prototype.For = function For(sequence, body) {\n            var iter = sequence[Symbol.iterator]();\n            var cur = iter.next();\n            return this.While(function () {\n                return !cur.done;\n            }, this.Delay(function () {\n                var res = body(cur.value);\n                cur = iter.next();\n                return res;\n            }));\n        };\n\n        AsyncBuilder.prototype.Return = function Return(value) {\n            return AsyncImpl.return(value);\n        };\n\n        AsyncBuilder.prototype.ReturnFrom = function ReturnFrom(computation) {\n            return computation;\n        };\n\n        AsyncBuilder.prototype.TryFinally = function TryFinally(computation, compensation) {\n            return AsyncImpl.protectedCont(function (ctx) {\n                computation({\n                    onSuccess: function onSuccess(x) {\n                        compensation();\n                        ctx.onSuccess(x);\n                    },\n                    onError: function onError(x) {\n                        compensation();\n                        ctx.onError(x);\n                    },\n                    onCancel: function onCancel(x) {\n                        compensation();\n                        ctx.onCancel(x);\n                    },\n                    cancelToken: ctx.cancelToken,\n                    trampoline: ctx.trampoline\n                });\n            });\n        };\n\n        AsyncBuilder.prototype.TryWith = function TryWith(computation, catchHandler) {\n            return AsyncImpl.protectedCont(function (ctx) {\n                computation({\n                    onSuccess: ctx.onSuccess,\n                    onCancel: ctx.onCancel,\n                    cancelToken: ctx.cancelToken,\n                    trampoline: ctx.trampoline,\n                    onError: function onError(ex) {\n                        return catchHandler(ex)(ctx);\n                    }\n                });\n            });\n        };\n\n        AsyncBuilder.prototype.Using = function Using(resource, binder) {\n            return this.TryFinally(binder(resource), function () {\n                return resource.Dispose();\n            });\n        };\n\n        AsyncBuilder.prototype.While = function While(guard, computation) {\n            var _this5 = this;\n\n            if (guard()) return this.Bind(computation, function () {\n                return _this5.While(guard, computation);\n            });else return this.Return(Nothing);\n        };\n\n        AsyncBuilder.prototype.Zero = function Zero() {\n            return AsyncImpl.protectedCont(function (ctx) {\n                return ctx.onSuccess(Nothing);\n            });\n        };\n\n        return AsyncBuilder;\n    }();\n\n    var defaultAsyncBuilder = exports.defaultAsyncBuilder = new AsyncBuilder();\n\n    var Async = exports.Async = function () {\n        function Async() {\n            _classCallCheck(this, Async);\n        }\n\n        Async.awaitPromise = function awaitPromise(p) {\n            return Async.fromContinuations(function (conts) {\n                return p.then(conts[0]).catch(function (err) {\n                    return (err == \"cancelled\" ? conts[2] : conts[1])(err);\n                });\n            });\n        };\n\n        Async.catch = function _catch(work) {\n            return AsyncImpl.protectedCont(function (ctx) {\n                work({\n                    onSuccess: function onSuccess(x) {\n                        return ctx.onSuccess(Choice.Choice1Of2(x));\n                    },\n                    onError: function onError(ex) {\n                        return ctx.onSuccess(Choice.Choice2Of2(ex));\n                    },\n                    onCancel: ctx.onCancel,\n                    cancelToken: ctx.cancelToken,\n                    trampoline: ctx.trampoline\n                });\n            });\n        };\n\n        Async.fromContinuations = function fromContinuations(f) {\n            return AsyncImpl.protectedCont(function (ctx) {\n                return f([ctx.onSuccess, ctx.onError, ctx.onCancel]);\n            });\n        };\n\n        Async.ignore = function ignore(computation) {\n            return AsyncImpl.bind(computation, function (x) {\n                return AsyncImpl.return(Nothing);\n            });\n        };\n\n        Async.parallel = function parallel(computations) {\n            return Async.awaitPromise(Promise.all(Seq.map(function (w) {\n                return Async.startAsPromise(w);\n            }, computations)));\n        };\n\n        Async.sleep = function sleep(millisecondsDueTime) {\n            return AsyncImpl.protectedCont(function (ctx) {\n                setTimeout(function () {\n                    return ctx.cancelToken.isCancelled ? ctx.onCancel(\"cancelled\") : ctx.onSuccess(Nothing);\n                }, millisecondsDueTime);\n            });\n        };\n\n        Async.start = function start(computation, cancellationToken) {\n            return Async.startWithContinuations(computation, cancellationToken);\n        };\n\n        Async.emptyContinuation = function emptyContinuation(x) {\n            // NOP\n        };\n\n        Async.startWithContinuations = function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n            if (typeof continuation !== \"function\") {\n                cancelToken = continuation;\n                continuation = null;\n            }\n            var trampoline = new Trampoline();\n            computation({\n                onSuccess: continuation ? continuation : Async.emptyContinuation,\n                onError: exceptionContinuation ? exceptionContinuation : Async.emptyContinuation,\n                onCancel: cancellationContinuation ? cancellationContinuation : Async.emptyContinuation,\n                cancelToken: cancelToken ? cancelToken : Async.defaultCancellationToken,\n                trampoline: trampoline\n            });\n        };\n\n        Async.startAsPromise = function startAsPromise(computation, cancellationToken) {\n            return new Promise(function (resolve, reject) {\n                return Async.startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : Async.defaultCancellationToken);\n            });\n        };\n\n        _createClass(Async, null, [{\n            key: \"cancellationToken\",\n            get: function get() {\n                return AsyncImpl.protectedCont(function (ctx) {\n                    return ctx.onSuccess(ctx.cancelToken);\n                });\n            }\n        }]);\n\n        return Async;\n    }();\n\n    Async.defaultCancellationToken = {\n        isCancelled: false\n    };\n    Async.startImmediate = Async.start;\n\n    var QueueCell = function QueueCell(message) {\n        _classCallCheck(this, QueueCell);\n\n        this.value = message;\n    };\n\n    var MailboxQueue = function () {\n        function MailboxQueue() {\n            _classCallCheck(this, MailboxQueue);\n        }\n\n        MailboxQueue.prototype.add = function add(message) {\n            var itCell = new QueueCell(message);\n            if (this.firstAndLast) {\n                this.firstAndLast[1].next = itCell;\n                this.firstAndLast = [this.firstAndLast[0], itCell];\n            } else this.firstAndLast = [itCell, itCell];\n        };\n\n        MailboxQueue.prototype.tryGet = function tryGet() {\n            if (this.firstAndLast) {\n                var value = this.firstAndLast[0].value;\n                if (this.firstAndLast[0].next) this.firstAndLast = [this.firstAndLast[0].next, this.firstAndLast[1]];else delete this.firstAndLast;\n                return value;\n            }\n            return void 0;\n        };\n\n        return MailboxQueue;\n    }();\n\n    var MailboxProcessor = exports.MailboxProcessor = function () {\n        function MailboxProcessor(body, cancellationToken) {\n            _classCallCheck(this, MailboxProcessor);\n\n            this.body = body;\n            this.cancellationToken = cancellationToken || Async.defaultCancellationToken;\n            this.messages = new MailboxQueue();\n        }\n\n        MailboxProcessor.start = function start(body, cancellationToken) {\n            var mbox = new MailboxProcessor(body, cancellationToken);\n            mbox.start();\n            return mbox;\n        };\n\n        MailboxProcessor.prototype.__processEvents = function __processEvents() {\n            if (this.continuation) {\n                var value = this.messages.tryGet();\n                if (value) {\n                    var cont = this.continuation;\n                    delete this.continuation;\n                    cont(value);\n                }\n            }\n        };\n\n        MailboxProcessor.prototype.start = function start() {\n            Async.startImmediate(this.body(this), this.cancellationToken);\n        };\n\n        MailboxProcessor.prototype.receive = function receive() {\n            var _this6 = this;\n\n            return Async.fromContinuations(function (conts) {\n                if (_this6.continuation) throw \"Receive can only be called once!\";\n                _this6.continuation = conts[0];\n                _this6.__processEvents();\n            });\n        };\n\n        MailboxProcessor.prototype.post = function post(message) {\n            this.messages.add(message);\n            this.__processEvents();\n        };\n\n        MailboxProcessor.prototype.postAndAsyncReply = function postAndAsyncReply(buildMessage) {\n            var result = void 0;\n            var continuation = void 0;\n            function checkCompletion() {\n                if (result && continuation) continuation(result);\n            }\n            var reply = {\n                reply: function reply(res) {\n                    result = res;\n                    checkCompletion();\n                }\n            };\n            this.messages.add(buildMessage(reply));\n            this.__processEvents();\n            return Async.fromContinuations(function (conts) {\n                continuation = conts[0];\n                checkCompletion();\n            });\n        };\n\n        return MailboxProcessor;\n    }();\n\n    var Observer = function Observer(onNext, onError, onCompleted) {\n        _classCallCheck(this, Observer);\n\n        this.OnNext = onNext;\n        this.OnError = onError || function (e) {};\n        this.OnCompleted = onCompleted || function () {};\n    };\n\n    Util.setInterfaces(Observer.prototype, [\"System.IObserver\"]);\n\n    var Observable = function Observable(subscribe) {\n        _classCallCheck(this, Observable);\n\n        this.Subscribe = subscribe;\n    };\n\n    Util.setInterfaces(Observable.prototype, [\"System.IObservable\"]);\n\n    var FObservable = function () {\n        function FObservable() {\n            _classCallCheck(this, FObservable);\n        }\n\n        FObservable.__protect = function __protect(f, succeed, fail) {\n            try {\n                return succeed(f());\n            } catch (e) {\n                fail(e);\n            }\n        };\n\n        FObservable.add = function add(callback, source) {\n            source.Subscribe(new Observer(callback));\n        };\n\n        FObservable.choose = function choose(chooser, source) {\n            return new Observable(function (observer) {\n                return source.Subscribe(new Observer(function (t) {\n                    return FObservable.__protect(function () {\n                        return chooser(t);\n                    }, function (u) {\n                        if (u != null) observer.OnNext(u);\n                    }, observer.OnError);\n                }, observer.OnError, observer.OnCompleted));\n            });\n        };\n\n        FObservable.filter = function filter(predicate, source) {\n            return FObservable.choose(function (x) {\n                return predicate(x) ? x : null;\n            }, source);\n        };\n\n        FObservable.map = function map(mapping, source) {\n            return new Observable(function (observer) {\n                return source.Subscribe(new Observer(function (t) {\n                    FObservable.__protect(function () {\n                        return mapping(t);\n                    }, observer.OnNext, observer.OnError);\n                }, observer.OnError, observer.OnCompleted));\n            });\n        };\n\n        FObservable.merge = function merge(source1, source2) {\n            return new Observable(function (observer) {\n                var stopped = false,\n                    completed1 = false,\n                    completed2 = false;\n                var h1 = source1.Subscribe(new Observer(function (v) {\n                    if (!stopped) observer.OnNext(v);\n                }, function (e) {\n                    if (!stopped) {\n                        stopped = true;\n                        observer.OnError(e);\n                    }\n                }, function () {\n                    if (!stopped) {\n                        completed1 = true;\n                        if (completed2) {\n                            stopped = true;\n                            observer.OnCompleted();\n                        }\n                    }\n                }));\n                var h2 = source2.Subscribe(new Observer(function (v) {\n                    if (!stopped) {\n                        observer.OnNext(v);\n                    }\n                }, function (e) {\n                    if (!stopped) {\n                        stopped = true;\n                        observer.OnError(e);\n                    }\n                }, function () {\n                    if (!stopped) {\n                        completed2 = true;\n                        if (completed1) {\n                            stopped = true;\n                            observer.OnCompleted();\n                        }\n                    }\n                }));\n                return Util.createDisposable(function () {\n                    h1.Dispose();\n                    h2.Dispose();\n                });\n            });\n        };\n\n        FObservable.pairwise = function pairwise(source) {\n            return new Observable(function (observer) {\n                var last = null;\n                return source.Subscribe(new Observer(function (next) {\n                    if (last != null) observer.OnNext([last, next]);\n                    last = next;\n                }, observer.OnError, observer.OnCompleted));\n            });\n        };\n\n        FObservable.partition = function partition(predicate, source) {\n            return Tuple(FObservable.filter(predicate, source), FObservable.filter(function (x) {\n                return !predicate(x);\n            }, source));\n        };\n\n        FObservable.scan = function scan(collector, state, source) {\n            return new Observable(function (observer) {\n                return source.Subscribe(new Observer(function (t) {\n                    FObservable.__protect(function () {\n                        return collector(state, t);\n                    }, function (u) {\n                        state = u;observer.OnNext(u);\n                    }, observer.OnError);\n                }, observer.OnError, observer.OnCompleted));\n            });\n        };\n\n        FObservable.split = function split(splitter, source) {\n            return Tuple(FObservable.choose(function (v) {\n                return splitter(v).valueIfChoice1;\n            }, source), FObservable.choose(function (v) {\n                return splitter(v).valueIfChoice2;\n            }, source));\n        };\n\n        FObservable.subscribe = function subscribe(callback, source) {\n            return source.Subscribe(new Observer(callback));\n        };\n\n        return FObservable;\n    }();\n\n    exports.Observable = FObservable;\n\n    var Event = exports.Event = function () {\n        function Event(_subscriber, delegates) {\n            _classCallCheck(this, Event);\n\n            this._subscriber = _subscriber;\n            this.delegates = delegates || new Array();\n        }\n\n        Event.prototype.Add = function Add(f) {\n            this._addHandler(f);\n        };\n        // IEvent<T> methods\n\n\n        Event.prototype.Trigger = function Trigger(value) {\n            Seq.iterate(function (f) {\n                return f(value);\n            }, this.delegates);\n        };\n        // IDelegateEvent<T> methods\n\n\n        Event.prototype._addHandler = function _addHandler(f) {\n            this.delegates.push(f);\n        };\n\n        Event.prototype._removeHandler = function _removeHandler(f) {\n            var index = this.delegates.findIndex(function (el) {\n                return \"\" + el == \"\" + f;\n            }); // Special dedication to Chet Husk.\n            if (index > -1) this.delegates.splice(index, 1);\n        };\n\n        Event.prototype.AddHandler = function AddHandler(handler) {\n            this._addHandler(function (x) {\n                return handler(undefined, x);\n            });\n        };\n\n        Event.prototype.RemoveHandler = function RemoveHandler(handler) {\n            this._removeHandler(function (x) {\n                return handler(undefined, x);\n            });\n        };\n        // IObservable<T> methods\n\n\n        Event.prototype._subscribeFromObserver = function _subscribeFromObserver(observer) {\n            var _this7 = this;\n\n            if (this._subscriber) return this._subscriber(observer);\n            var callback = observer.OnNext;\n            this._addHandler(callback);\n            return Util.createDisposable(function () {\n                return _this7._removeHandler(callback);\n            });\n        };\n\n        Event.prototype._subscribeFromCallback = function _subscribeFromCallback(callback) {\n            var _this8 = this;\n\n            this._addHandler(callback);\n            return Util.createDisposable(function () {\n                return _this8._removeHandler(callback);\n            });\n        };\n\n        Event.prototype.Subscribe = function Subscribe(arg) {\n            return typeof arg == \"function\" ? this._subscribeFromCallback(arg) : this._subscribeFromObserver(arg);\n        };\n\n        Event.add = function add(callback, sourceEvent) {\n            sourceEvent.Subscribe(new Observer(callback));\n        };\n\n        Event.choose = function choose(chooser, sourceEvent) {\n            var source = sourceEvent;\n            return new Event(function (observer) {\n                return source.Subscribe(new Observer(function (t) {\n                    return FObservable.__protect(function () {\n                        return chooser(t);\n                    }, function (u) {\n                        if (u != null) observer.OnNext(u);\n                    }, observer.OnError);\n                }, observer.OnError, observer.OnCompleted));\n            }, source.delegates);\n        };\n\n        Event.filter = function filter(predicate, sourceEvent) {\n            return Event.choose(function (x) {\n                return predicate(x) ? x : null;\n            }, sourceEvent);\n        };\n\n        Event.map = function map(mapping, sourceEvent) {\n            var source = sourceEvent;\n            return new Event(function (observer) {\n                return source.Subscribe(new Observer(function (t) {\n                    return FObservable.__protect(function () {\n                        return mapping(t);\n                    }, observer.OnNext, observer.OnError);\n                }, observer.OnError, observer.OnCompleted));\n            }, source.delegates);\n        };\n\n        Event.merge = function merge(event1, event2) {\n            var source1 = event1;\n            var source2 = event2;\n            return new Event(function (observer) {\n                var stopped = false,\n                    completed1 = false,\n                    completed2 = false;\n                var h1 = source1.Subscribe(new Observer(function (v) {\n                    if (!stopped) observer.OnNext(v);\n                }, function (e) {\n                    if (!stopped) {\n                        stopped = true;\n                        observer.OnError(e);\n                    }\n                }, function () {\n                    if (!stopped) {\n                        completed1 = true;\n                        if (completed2) {\n                            stopped = true;\n                            observer.OnCompleted();\n                        }\n                    }\n                }));\n                var h2 = source2.Subscribe(new Observer(function (v) {\n                    if (!stopped) observer.OnNext(v);\n                }, function (e) {\n                    if (!stopped) {\n                        stopped = true;\n                        observer.OnError(e);\n                    }\n                }, function () {\n                    if (!stopped) {\n                        completed2 = true;\n                        if (completed1) {\n                            stopped = true;\n                            observer.OnCompleted();\n                        }\n                    }\n                }));\n                return Util.createDisposable(function () {\n                    h1.Dispose();\n                    h2.Dispose();\n                });\n            }, source1.delegates.concat(source2.delegates));\n        };\n\n        Event.pairwise = function pairwise(sourceEvent) {\n            var source = sourceEvent;\n            return new Event(function (observer) {\n                var last = null;\n                return source.Subscribe(new Observer(function (next) {\n                    if (last != null) observer.OnNext([last, next]);\n                    last = next;\n                }, observer.OnError, observer.OnCompleted));\n            }, source.delegates);\n        };\n\n        Event.partition = function partition(predicate, sourceEvent) {\n            return Tuple(Event.filter(predicate, sourceEvent), Event.filter(function (x) {\n                return !predicate(x);\n            }, sourceEvent));\n        };\n\n        Event.scan = function scan(collector, state, sourceEvent) {\n            var source = sourceEvent;\n            return new Event(function (observer) {\n                return source.Subscribe(new Observer(function (t) {\n                    FObservable.__protect(function () {\n                        return collector(state, t);\n                    }, function (u) {\n                        state = u;observer.OnNext(u);\n                    }, observer.OnError);\n                }, observer.OnError, observer.OnCompleted));\n            }, source.delegates);\n        };\n\n        Event.split = function split(splitter, sourceEvent) {\n            return Tuple(Event.choose(function (v) {\n                return splitter(v).valueIfChoice1;\n            }, sourceEvent), Event.choose(function (v) {\n                return splitter(v).valueIfChoice2;\n            }, sourceEvent));\n        };\n\n        _createClass(Event, [{\n            key: \"Publish\",\n            get: function get() {\n                return this;\n            }\n        }]);\n\n        return Event;\n    }();\n\n    var Lazy = exports.Lazy = function () {\n        function Lazy(factory) {\n            _classCallCheck(this, Lazy);\n\n            this.factory = factory;\n            this.isValueCreated = false;\n        }\n\n        Lazy.createFromValue = function createFromValue(v) {\n            return new Lazy(function () {\n                return v;\n            });\n        };\n\n        _createClass(Lazy, [{\n            key: \"value\",\n            get: function get() {\n                if (!this.isValueCreated) {\n                    this.createdValue = this.factory();\n                    this.isValueCreated = true;\n                }\n                return this.createdValue;\n            }\n        }]);\n\n        return Lazy;\n    }();\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/fable-core/fable-core.js\n ** module id = 1\n ** module chunks = 0\n **/","module Fable.Helpers.Virtualdom\n\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen System.Diagnostics\n\n[<Import(\"h\",\"virtual-dom\")>]\nlet h(arg1: string, arg2: obj, arg3: obj[]): obj = failwith \"JS only\"\n\n[<Import(\"diff\",\"virtual-dom\")>]\nlet diff (tree1:obj) (tree2:obj): obj = failwith \"JS only\"\n\n[<Import(\"patch\",\"virtual-dom\")>]\nlet patch (node:obj) (patches:obj): Fable.Import.Browser.Node = failwith \"JS only\"\n\n[<Import(\"create\",\"virtual-dom\")>]\nlet createElement (e:obj): Fable.Import.Browser.Node = failwith \"JS only\"\n\nmodule Html =\n    [<AutoOpen>]\n    module Types =\n        type EventHandler<'TMessage> = string*(obj -> 'TMessage)\n\n        type Style = (string*string) list\n\n        type KeyValue = string*string\n\n        type Attribute<'TMessage> =\n            | EventHandler of EventHandler<'TMessage>\n            | Style of Style\n            | Property of KeyValue\n            | Attribute of KeyValue\n\n        type Element<'TMessage> = string * Attribute<'TMessage> list\n        /// A Node in Html have the following forms\n        type VoidElement<'TMessage> = string * Attribute<'TMessage> list\n        type DomNode<'TMessage> =\n        /// A regular html element that can contain a list of other nodes\n        | Element of Element<'TMessage> * DomNode<'TMessage> list\n        /// A void element is one that can't have content, like link, br, hr, meta\n        /// See: https://dev.w3.org/html5/html-author/#void\n        | VoidElement of VoidElement<'TMessage>\n        /// A text value for a node\n        | Text of string\n        /// Whitespace for formatting\n        | WhiteSpace of string\n        | Svg of Element<'TMessage> * DomNode<'TMessage> list\n\n    let mapEventHandler<'T1,'T2> (mapping:('T1 -> 'T2)) (e,f) = EventHandler(e, f >> mapping) \n\n    let mapAttributes<'T1,'T2> (mapping:('T1 -> 'T2)) (attribute:Attribute<'T1>) =\n        match attribute with\n        | EventHandler(eb) -> mapEventHandler mapping eb\n        | Style s -> Style s\n        | Property kv -> Property kv\n        | Attribute kv -> Attribute kv \n\n    let mapElem<'T1,'T2> (mapping:('T1 -> 'T2)) (node:Element<'T1>) =\n        let (tag, attrs) = node\n        (tag, attrs |> List.map (mapAttributes mapping))\n\n    let mapVoidElem<'T1,'T2> (mapping:('T1 -> 'T2)) (node:Element<'T1>) =\n        let (tag, attrs) = node\n        (tag, attrs |> List.map (mapAttributes mapping))\n\n    let rec map<'T1,'T2> (mapping:('T1 -> 'T2)) (node:DomNode<'T1>) = \n        match node with\n        | Element(e,ns) -> Element(mapElem mapping e, ns |> List.map (map mapping))\n        | VoidElement(ve) -> VoidElement(mapVoidElem mapping ve)\n        | Text(s) -> Text s \n        | WhiteSpace(ws) -> WhiteSpace ws   \n        | Svg(e,ns) -> Element(mapElem mapping e, ns |> List.map (map mapping))\n\n    [<AutoOpen>]\n    module Tags =\n        let inline elem tagName attrs children = Element((tagName, attrs), children)\n        let inline voidElem tagName attrs = VoidElement(tagName, attrs)\n\n        let inline whiteSpace x = WhiteSpace x\n        let inline text x = Text x\n\n        // Elements - list of elements here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n        // Void elements\n        let inline br x = voidElem \"br\" x\n        let inline area x = voidElem \"area\" x\n        let inline baseHtml x = voidElem \"base\" x\n        let inline col x = voidElem \"col\" x\n        let inline embed x = voidElem \"embed\" x\n        let inline hr x = voidElem \"hr\" x\n        let inline img x = voidElem \"img\" x\n        let inline input x = voidElem \"input\" x\n        let inline link x = voidElem \"link\" x\n        let inline meta x = voidElem \"meta\" x\n        let inline param x = voidElem \"param\" x\n        let inline source x = voidElem \"source\" x\n        let inline track x = voidElem \"track\" x\n        let inline wbr x = voidElem \"wbr\" x\n\n        // Metadata\n        let inline head x = elem \"head\" x\n        let inline style x = elem \"style\" x\n        let inline title x = elem \"title\" x\n\n        // Content sectioning\n        let inline address x = elem \"address\" x\n        let inline article x = elem \"article\" x\n        let inline aside x = elem \"aside\" x\n        let inline footer x = elem \"footer\" x\n        let inline header x = elem \"header\" x\n        let inline h1 x = elem \"h1\" x\n        let inline h2 x = elem \"h2\" x\n        let inline h3 x = elem \"h3\" x\n        let inline h4 x = elem \"h4\" x\n        let inline h5 x = elem \"h5\" x\n        let inline h6 x = elem \"h6\" x\n        let inline hgroup x = elem \"hgroup\" x\n        let inline nav x = elem \"nav\" x\n\n        // Text content\n        let inline dd x = elem \"dd\" x\n        let inline div x = elem \"div\" x\n        let inline dl x = elem \"dl\" x\n        let inline dt x = elem \"dt\" x\n        let inline figcaption x = elem \"figcaption\" x\n        let inline figure x = elem \"figure\" x\n        let inline li x = elem \"li\" x\n        let inline main x = elem \"main\" x\n        let inline ol x = elem \"ol\" x\n        let inline p x = elem \"p\" x\n        let inline pre x = elem \"pre\" x\n        let inline section x = elem \"section\" x\n        let inline ul x = elem \"ul\" x\n\n        // Inline text semantics\n        let inline a x = elem \"a\" x\n        let inline abbr x = elem \"abbr\" x\n        let inline b x = elem \"b\" x\n        let inline bdi x = elem \"bdi\" x\n        let inline bdo x = elem \"bdo\" x\n        let inline cite x = elem \"cite\" x\n        let inline code x = elem \"code\" x\n        let inline data x = elem \"data\" x\n        let inline dfn x = elem \"dfn\" x\n        let inline em x = elem \"em\" x\n        let inline i x = elem \"i\" x\n        let inline kbd x = elem \"kbd\" x\n        let inline mark x = elem \"mark\" x\n        let inline q x = elem \"q\" x\n        let inline rp x = elem \"rp\" x\n        let inline rt x = elem \"rt\" x\n        let inline rtc x = elem \"rtc\" x\n        let inline ruby x = elem \"ruby\" x\n        let inline s x = elem \"s\" x\n        let inline samp x = elem \"samp\" x\n        let inline small x = elem \"small\" x\n        let inline span x = elem \"span\" x\n        let inline strong x = elem \"strong\" x\n        let inline sub x = elem \"sub\" x\n        let inline sup x = elem \"sup\" x\n        let inline time x = elem \"time\" x\n        let inline u x = elem \"u\" x\n        let inline var x = elem \"var\" x\n\n        // Image and multimedia\n        let inline audio x = elem \"audio\" x\n        let inline map x = elem \"map\" x\n        let inline video x = elem \"video\" x\n\n        // Embedded content\n        let inline objectHtml x = elem \"object\" x\n\n        // Demarcasting edits\n        let inline del x = elem \"del\" x\n        let inline ins x = elem \"ins\" x\n\n        // Table content\n        let inline caption x = elem \"caption\" x\n        let inline colgroup x = elem \"colgroup\" x\n        let inline table x = elem \"table\" x\n        let inline tbody x = elem \"tbody\" x\n        let inline td x = elem \"td\" x\n        let inline tfoot x = elem \"tfoot\" x\n        let inline th x = elem \"th\" x\n        let inline thead x = elem \"thead\" x\n        let inline tr x = elem \"tr\" x\n\n        // Forms\n        let inline button x = elem \"button\" x\n        let inline datalist x = elem \"datalist\" x\n        let inline fieldset x = elem \"fieldset\" x\n        let inline form x = elem \"form\" x\n        let inline label x = elem \"label\" x\n        let inline legend x = elem \"legend\" x\n        let inline meter x = elem \"meter\" x\n        let inline optgroup x = elem \"optgroup\" x\n        let inline option x = elem \"option\" x\n        let inline output x = elem \"output\" x\n        let inline progress x = elem \"progress\" x\n        let inline select x = elem \"select\" x\n        let inline textarea x = elem \"textarea\" x\n\n        // Interactive elements\n        let inline details x = elem \"details\" x\n        let inline dialog x = elem \"dialog\" x\n        let inline menu x = elem \"menu\" x\n        let inline menuitem x = elem \"menuitem\" x\n        let inline summary x = elem \"summary\" x\n\n    [<AutoOpen>]\n    module Attributes =\n        let inline attribute key value = Attribute.Attribute (key,value)\n        let inline property key value = Attribute.Property (key,value)\n\n        /// Class attribute helper\n        let inline Class value = attribute \"class\" value\n\n        /// Helper to build space separated class\n        let inline classList (list: (string*bool) seq) =\n            list\n                |> Seq.filter (fun (c,cond) -> cond)\n                |> Seq.map (fun (c, cond) -> c)\n                |> String.concat \" \"\n                |> Class\n\n        let inline boolAttribute name (value: bool) =\n            attribute name (string value)\n\n    [<AutoOpen>]\n    module Events =\n        let inline onMouseEvent eventType f = EventHandler (eventType, f)\n\n        let inline onMouseClick x = onMouseEvent \"onclick\" x\n        let inline onContextMenu x = onMouseEvent \"oncontextmenu\" x\n        let inline onDblClick x = onMouseEvent \"ondblclick\" x\n        let inline onMouseDown x = onMouseEvent \"onmousedown\" x\n        let inline onMouseEnter x = onMouseEvent \"onmouseenter\" x\n        let inline onMouseLeave x = onMouseEvent \"onmouseleave\" x\n        let inline onMouseMove x = onMouseEvent \"onmousemove\" x\n        let inline onMouseOut x = onMouseEvent \"onmouseout\" x\n        let inline onMouseOver x = onMouseEvent \"onmouseover\" x\n        let inline onMouseUp x = onMouseEvent \"onmouseup\" x\n        let inline onShow x = onMouseEvent \"onshow\" x\n        let inline onKeyboardEvent eventType f = EventHandler (eventType, f)\n        let inline onKeydown x = onKeyboardEvent \"onkeydown\" x\n        let inline onKeypress x = onKeyboardEvent \"onkeypress\" x\n        let inline onKeyup x = onKeyboardEvent \"onkeyup\" x\n\n        let inline onEvent eventType f = EventHandler (eventType, f)\n        let inline onAbort x = onEvent \"onabort\" x\n        let inline onAfterPrint x = onEvent \"onafterprint\" x\n        let inline onAudioEnd x = onEvent \"onaudioend\" x\n        let inline onAudioStart x = onEvent \"onaudiostart\" x\n        let inline onBeforePrint x = onEvent \"onbeforeprint\" x\n        let inline onCached x = onEvent \"oncached\" x\n        let inline onCanPlay x = onEvent \"oncanplay\" x\n        let inline onCanPlayThrough x = onEvent \"oncanplaythrough\" x\n        let inline onChange x = onEvent \"onchange\" x\n        let inline onChargingChange x = onEvent \"onchargingchange\" x\n        let inline onChargingTimeChange x = onEvent \"onchargingtimechange\" x\n        let inline onChecking x = onEvent \"onchecking\" x\n        let inline onClose x = onEvent \"onclose\" x\n        let inline onDischargingTimeChange x = onEvent \"ondischargingtimechange\" x\n        let inline onDOMContentLoaded x = onEvent \"onDOMContentLoaded\" x\n        let inline onDownloading x = onEvent \"ondownloading\" x\n        let inline onDurationchange x = onEvent \"ondurationchange\" x\n        let inline onEmptied x = onEvent \"onemptied\" x\n        let inline onEnd x = onEvent \"onend\" x\n        let inline onEnded x = onEvent \"onended\" x\n        let inline onError x = onEvent \"onerror\" x\n        let inline onCullScreenChange x = onEvent \"onfullscreenchange\" x\n        let inline onCullScreenError x = onEvent \"onfullscreenerror\" x\n        let inline onInput x = onEvent \"oninput\" x\n        let inline onInvalid x = onEvent \"oninvalid\" x\n        let inline onLanguageChange x = onEvent \"onlanguagechange\" x\n        let inline onLevelChange x = onEvent \"onlevelchange\" x\n        let inline onLoadedData x = onEvent \"onloadeddata\" x\n        let inline onLoadedMetaData x = onEvent \"onloadedmetadata\" x\n        let inline onNoUpdate x = onEvent \"onnoupdate\" x\n        let inline onObsolete x = onEvent \"onobsolete\" x\n        let inline onOffline x = onEvent \"onoffline\" x\n        let inline onOnline x = onEvent \"ononline\" x\n        let inline onOpen x = onEvent \"onopen\" x\n        let inline onOrientationChange x = onEvent \"onorientationchange\" x\n        let inline onPause x = onEvent \"onpause\" x\n        let inline onPointerlockchange x = onEvent \"onpointerlockchange\" x\n        let inline onPointerlockerror x = onEvent \"onpointerlockerror\" x\n        let inline onPlay x = onEvent \"onplay\" x\n        let inline onPlaying x = onEvent \"onplaying\" x\n        let inline onRateChange x = onEvent \"onratechange\" x\n        let inline onReadyStateChange x = onEvent \"onreadystatechange\" x\n        let inline onReset x = onEvent \"onreset\" x\n        let inline onSeeked x = onEvent \"onseeked\" x\n        let inline onSeeking x = onEvent \"onseeking\" x\n        let inline onSelectStart x = onEvent \"onselectstart\" x\n        let inline onSelectionChange x = onEvent \"onselectionchange\" x\n        let inline onSoundEnd x = onEvent \"onsoundend\" x\n        let inline onSoundStart x = onEvent \"onsoundstart\" x\n        let inline onSpeechEnd x = onEvent \"onspeechend\" x\n        let inline onSpeechStart x = onEvent \"onspeechstart\" x\n        let inline onStalled x = onEvent \"onstalled\" x\n        let inline onStart x = onEvent \"onstart\" x\n        let inline onSubmit x = onEvent \"onsubmit\" x\n        let inline onSuccess x = onEvent \"onsuccess\" x\n        let inline onSuspend x = onEvent \"onsuspend\" x\n        let inline onTimeUpdate x = onEvent \"ontimeupdate\" x\n        let inline onUpdateReady x = onEvent \"onupdateready\" x\n        let inline onVoicesChanged x = onEvent \"onvoiceschanged\" x\n        let inline onVisibilityChange x = onEvent \"onvisibilitychange\" x\n        let inline onVolumeChange x = onEvent \"onvolumechange\" x\n        let inline onVrdisplayConnected x = onEvent \"onvrdisplayconnected\" x\n        let inline onVrdisplayDisconnected x = onEvent \"onvrdisplaydisconnected\" x\n        let inline onVrdisplayPresentChange x = onEvent \"onvrdisplaypresentchange\" x\n        let inline onWaiting x = onEvent \"onwaiting\" x\n\n        let inline onBlur x = onEvent \"onblur\" x\n        let inline onFocus x = onEvent \"onfocus\" x\n\n    [<AutoOpen>]\n    module Svg = \n        let svgNS = Attribute.Property(\"namespace\",\"http://www.w3.org/2000/svg\")\n        let inline svgElem tagName attrs children = Element((tagName, svgNS::attrs), children)\n\n        let inline svg x = svgElem \"svg\" x\n        let inline circle x = svgElem \"circle\" x \n        let inline rect x = svgElem \"rect\" x \n\n        let inline width x = attribute \"width\" x\n        let inline height x = attribute \"height\" x\n        let inline viewBox x = attribute \"viewBox\" x\n        let inline cx x = attribute \"cx\" x\n        let inline cy x = attribute \"cy\" x\n        let inline r x = attribute \"r\" x\n        let inline stroke x = attribute \"stroke\" x\n        let inline strokeWidth x = attribute \"stroke-width\" x\n        let inline fill x = attribute \"fill\" x\n\nopen Html\nopen Fable.Import.Browser\n\n[<AutoOpen>]\nmodule App =\n    type Action<'TMessage> = ('TMessage -> unit) -> unit\n    type Producer<'TMessage> = ('TMessage -> unit) -> unit\n\n    let mapAction<'T1,'T2> (mapping:'T1 -> 'T2) (action:Action<'T1>) : Action<'T2> = \n        fun x -> action (mapping >> x)  \n\n    let mapActions m = List.map (mapAction m)\n    let toActionList a = [a]\n\n    type AppEvents<'TMessage, 'TModel> =\n        | ModelChanged of 'TModel*'TModel\n        | ActionReceived of 'TMessage\n        | DrawStarted\n\n    type Subscriber<'TMessage, 'TModel> = AppEvents<'TMessage, 'TModel> -> unit\n\n    type RenderState = \n        | InProgress\n        | NoRequest\n\n    type App<'TModel, 'TMessage> =\n        {\n            Model: 'TModel\n            View: 'TModel -> DomNode<'TMessage>\n            Update: 'TModel -> 'TMessage -> ('TModel * Action<'TMessage> list)\n            InitMessage : (('TMessage -> unit) -> unit) option\n            Actions: Action<'TMessage> list\n            Producers: Producer<'TMessage> list\n            Node: Node option\n            CurrentTree: obj option\n            Subscribers: Map<string, Subscriber<'TMessage, 'TModel>>\n            NodeSelector: string option\n            RenderState: RenderState\n        }\n\n    type ScheduleMessage = \n        | PingIn of float*(unit -> unit)\n\n    type AppMessage<'TMessage> =\n        | AddSubscriber of string*Subscriber<'TMessage, 'TMessage>\n        | RemoveSubscriber of string\n        | Message of 'TMessage\n        | Draw\n\n    type Renderer<'TMessage> =\n        {\n            Render: ('TMessage -> unit) -> DomNode<'TMessage> -> obj\n            Diff: obj -> obj -> obj\n            Patch: Fable.Import.Browser.Node -> obj -> Fable.Import.Browser.Node\n            CreateElement: obj -> Fable.Import.Browser.Node\n        }\n\n    let createApp model view update =\n        {\n            Model = model\n            View = view\n            Update = update\n            NodeSelector = None\n            InitMessage = None\n            Producers = []\n            Subscribers = Map.empty\n\n            CurrentTree = None\n            RenderState = NoRequest\n            Actions = []\n            Node = None\n        }\n\n    let createSimpleApp model view update =\n        createApp model view (fun x y -> (update x y), [])\n\n    let withStartNodeSelector selector app = { app with NodeSelector = Some selector }\n    let withInitMessage msg app = { app with InitMessage = Some msg }\n    let withProducer p app = \n        {app with Producers = p::app.Producers}\n    let withSubscriber subscriberId subscriber app =\n        let subsribers = app.Subscribers |> Map.add subscriberId subscriber\n        { app with Subscribers = subsribers }\n\n    let createScheduler() = \n        MailboxProcessor.Start(fun inbox ->\n            let rec loop() = \n                async {\n                    let! message = inbox.Receive()\n                    match message with\n                    | PingIn (milliseconds, cb) ->\n                        window.setTimeout(cb, milliseconds) |> ignore\n                        return! loop()\n                }\n            loop()\n        )\n\n    let createFirstLoopState renderTree (startElem:Node) post renderer state =\n        let tree = renderTree state.View post state.Model\n        let rootNode = renderer.CreateElement tree\n        startElem.appendChild(rootNode) |> ignore\n        match state.InitMessage with\n        | None -> ()\n        | Some init -> init post\n        {state with CurrentTree = Some tree; Node = Some rootNode}\n\n    let handleMessage msg notify schedule state = \n        ActionReceived msg |> (notify state.Subscribers)\n        let (model', actions) = state.Update state.Model msg\n\n        let renderState =\n            match state.RenderState with\n            | NoRequest ->\n                schedule()\n//                    scheduler.Post(PingIn(1000./60., (fun() -> inbox.Post(Draw))))\n                InProgress\n            | InProgress -> InProgress\n        {\n            state with \n                Model = model'\n                RenderState = renderState\n                Actions = state.Actions @ actions }\n\n    let handleDraw renderTree renderer post notify rootNode currentTree state = \n        match state.RenderState with\n        | InProgress ->\n            DrawStarted |> notify state.Subscribers\n            let model = state.Model\n            let tree = renderTree state.View post model\n            let patches = renderer.Diff currentTree tree\n            renderer.Patch rootNode patches |> ignore\n            state.Actions |> List.iter (fun i -> i post)\n            (ModelChanged (model, state.Model)) |> notify state.Subscribers\n            {state with RenderState = NoRequest; CurrentTree = Some tree; Actions = []}\n        | NoRequest -> raise (exn \"Shouldn't happen\")\n\n    let start renderer app =\n        let renderTree view handler model =\n            view model\n            |> renderer.Render handler\n\n        let startElem =\n            match app.NodeSelector with\n            | None -> document.body\n            | Some sel -> document.body.querySelector(sel) :?> HTMLElement\n\n        let scheduler = createScheduler()\n        MailboxProcessor.Start(fun inbox ->\n            let post message =\n                inbox.Post (Message message)\n            let notifySubscribers subs model =\n                subs |> Map.iter (fun key handler -> handler model)\n            app.Producers |> List.iter (fun p -> p post)\n            let schedule() = scheduler.Post(PingIn(1000./60., (fun() -> inbox.Post(Draw))))\n            let rec loop state =\n                async {\n                    match state.Node, state.CurrentTree with\n                    | None,_ ->\n                        let state' = createFirstLoopState renderTree startElem post renderer state\n                        return! loop state'\n                    | Some rootNode, Some currentTree ->\n                        let! message = inbox.Receive()\n                        match message with\n                        | Message msg ->\n                            let state' = handleMessage msg notifySubscribers schedule state\n                            return! loop state'\n                        | Draw -> \n                            let state' = handleDraw renderTree renderer post notifySubscribers rootNode currentTree state\n                            return! loop state'\n                        | _ -> return! loop state\n                    | _ -> failwith \"Shouldn't happen\"\n                }\n            loop app)\n\nlet createTree<'T> (handler:'T -> unit) tag (attributes:Attribute<'T> list) children =\n    let toAttrs (attrs:Attribute<'T> list) =\n        let elAttributes = \n            attrs\n            |> List.map (function\n                | Attribute (k,v) -> (k ==> v) |> Some\n                | _ -> None)\n            |> List.choose id\n            |> (function | [] -> None | v -> Some (\"attributes\" ==> (createObj(v))))\n        let props =\n            attrs\n            |> List.filter (function | Attribute _ -> false | _ -> true)\n            |> List.map (function\n                | Attribute _ -> failwith \"Shouldn't happen\"\n                | Style style -> \"style\" ==> createObj(unbox style)\n                | Property (k,v) -> k ==> v\n                | EventHandler(ev,f) -> ev ==> ((f >> handler) :> obj)\n            )\n\n        match elAttributes with\n        | None -> props\n        | Some x -> x::props\n        |> createObj\n    let elem = h(tag, toAttrs attributes, List.toArray children)\n    elem\n\nlet rec render handler node =\n    match node with\n    | Element((tag,attrs), nodes)\n    | Svg((tag,attrs), nodes) -> createTree handler tag attrs (nodes |> List.map (render handler))\n    | VoidElement (tag, attrs) -> createTree handler tag attrs []\n    | Text str -> box(string str)\n    | WhiteSpace str -> box(string str)\n\nlet renderer =\n    {\n        Render = render\n        Diff = diff\n        Patch = patch\n        CreateElement = createElement\n    }\n\n\n/** WEBPACK FOOTER **\n ** ../~/fable-import-virtualdom/Fable.Helpers.Virtualdom.fs\n **/","var diff = require(\"./diff.js\")\r\nvar patch = require(\"./patch.js\")\r\nvar h = require(\"./h.js\")\r\nvar create = require(\"./create-element.js\")\r\nvar VNode = require('./vnode/vnode.js')\r\nvar VText = require('./vnode/vtext.js')\r\n\r\nmodule.exports = {\r\n    diff: diff,\r\n    patch: patch,\r\n    h: h,\r\n    create: create,\r\n    VNode: VNode,\r\n    VText: VText\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/index.js\n ** module id = 3\n ** module chunks = 0\n **/","var diff = require(\"./vtree/diff.js\")\n\nmodule.exports = diff\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/diff.js\n ** module id = 4\n ** module chunks = 0\n **/","var isArray = require(\"x-is-array\")\n\nvar VPatch = require(\"../vnode/vpatch\")\nvar isVNode = require(\"../vnode/is-vnode\")\nvar isVText = require(\"../vnode/is-vtext\")\nvar isWidget = require(\"../vnode/is-widget\")\nvar isThunk = require(\"../vnode/is-thunk\")\nvar handleThunk = require(\"../vnode/handle-thunk\")\n\nvar diffProps = require(\"./diff-props\")\n\nmodule.exports = diff\n\nfunction diff(a, b) {\n    var patch = { a: a }\n    walk(a, b, patch, 0)\n    return patch\n}\n\nfunction walk(a, b, patch, index) {\n    if (a === b) {\n        return\n    }\n\n    var apply = patch[index]\n    var applyClear = false\n\n    if (isThunk(a) || isThunk(b)) {\n        thunks(a, b, patch, index)\n    } else if (b == null) {\n\n        // If a is a widget we will add a remove patch for it\n        // Otherwise any child widgets/hooks must be destroyed.\n        // This prevents adding two remove patches for a widget.\n        if (!isWidget(a)) {\n            clearState(a, patch, index)\n            apply = patch[index]\n        }\n\n        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))\n    } else if (isVNode(b)) {\n        if (isVNode(a)) {\n            if (a.tagName === b.tagName &&\n                a.namespace === b.namespace &&\n                a.key === b.key) {\n                var propsPatch = diffProps(a.properties, b.properties)\n                if (propsPatch) {\n                    apply = appendPatch(apply,\n                        new VPatch(VPatch.PROPS, a, propsPatch))\n                }\n                apply = diffChildren(a, b, patch, apply, index)\n            } else {\n                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))\n                applyClear = true\n            }\n        } else {\n            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))\n            applyClear = true\n        }\n    } else if (isVText(b)) {\n        if (!isVText(a)) {\n            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))\n            applyClear = true\n        } else if (a.text !== b.text) {\n            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))\n        }\n    } else if (isWidget(b)) {\n        if (!isWidget(a)) {\n            applyClear = true\n        }\n\n        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))\n    }\n\n    if (apply) {\n        patch[index] = apply\n    }\n\n    if (applyClear) {\n        clearState(a, patch, index)\n    }\n}\n\nfunction diffChildren(a, b, patch, apply, index) {\n    var aChildren = a.children\n    var orderedSet = reorder(aChildren, b.children)\n    var bChildren = orderedSet.children\n\n    var aLen = aChildren.length\n    var bLen = bChildren.length\n    var len = aLen > bLen ? aLen : bLen\n\n    for (var i = 0; i < len; i++) {\n        var leftNode = aChildren[i]\n        var rightNode = bChildren[i]\n        index += 1\n\n        if (!leftNode) {\n            if (rightNode) {\n                // Excess nodes in b need to be added\n                apply = appendPatch(apply,\n                    new VPatch(VPatch.INSERT, null, rightNode))\n            }\n        } else {\n            walk(leftNode, rightNode, patch, index)\n        }\n\n        if (isVNode(leftNode) && leftNode.count) {\n            index += leftNode.count\n        }\n    }\n\n    if (orderedSet.moves) {\n        // Reorder nodes last\n        apply = appendPatch(apply, new VPatch(\n            VPatch.ORDER,\n            a,\n            orderedSet.moves\n        ))\n    }\n\n    return apply\n}\n\nfunction clearState(vNode, patch, index) {\n    // TODO: Make this a single walk, not two\n    unhook(vNode, patch, index)\n    destroyWidgets(vNode, patch, index)\n}\n\n// Patch records for all destroyed widgets must be added because we need\n// a DOM node reference for the destroy function\nfunction destroyWidgets(vNode, patch, index) {\n    if (isWidget(vNode)) {\n        if (typeof vNode.destroy === \"function\") {\n            patch[index] = appendPatch(\n                patch[index],\n                new VPatch(VPatch.REMOVE, vNode, null)\n            )\n        }\n    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {\n        var children = vNode.children\n        var len = children.length\n        for (var i = 0; i < len; i++) {\n            var child = children[i]\n            index += 1\n\n            destroyWidgets(child, patch, index)\n\n            if (isVNode(child) && child.count) {\n                index += child.count\n            }\n        }\n    } else if (isThunk(vNode)) {\n        thunks(vNode, null, patch, index)\n    }\n}\n\n// Create a sub-patch for thunks\nfunction thunks(a, b, patch, index) {\n    var nodes = handleThunk(a, b)\n    var thunkPatch = diff(nodes.a, nodes.b)\n    if (hasPatches(thunkPatch)) {\n        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)\n    }\n}\n\nfunction hasPatches(patch) {\n    for (var index in patch) {\n        if (index !== \"a\") {\n            return true\n        }\n    }\n\n    return false\n}\n\n// Execute hooks when two nodes are identical\nfunction unhook(vNode, patch, index) {\n    if (isVNode(vNode)) {\n        if (vNode.hooks) {\n            patch[index] = appendPatch(\n                patch[index],\n                new VPatch(\n                    VPatch.PROPS,\n                    vNode,\n                    undefinedKeys(vNode.hooks)\n                )\n            )\n        }\n\n        if (vNode.descendantHooks || vNode.hasThunks) {\n            var children = vNode.children\n            var len = children.length\n            for (var i = 0; i < len; i++) {\n                var child = children[i]\n                index += 1\n\n                unhook(child, patch, index)\n\n                if (isVNode(child) && child.count) {\n                    index += child.count\n                }\n            }\n        }\n    } else if (isThunk(vNode)) {\n        thunks(vNode, null, patch, index)\n    }\n}\n\nfunction undefinedKeys(obj) {\n    var result = {}\n\n    for (var key in obj) {\n        result[key] = undefined\n    }\n\n    return result\n}\n\n// List diff, naive left to right reordering\nfunction reorder(aChildren, bChildren) {\n    // O(M) time, O(M) memory\n    var bChildIndex = keyIndex(bChildren)\n    var bKeys = bChildIndex.keys\n    var bFree = bChildIndex.free\n\n    if (bFree.length === bChildren.length) {\n        return {\n            children: bChildren,\n            moves: null\n        }\n    }\n\n    // O(N) time, O(N) memory\n    var aChildIndex = keyIndex(aChildren)\n    var aKeys = aChildIndex.keys\n    var aFree = aChildIndex.free\n\n    if (aFree.length === aChildren.length) {\n        return {\n            children: bChildren,\n            moves: null\n        }\n    }\n\n    // O(MAX(N, M)) memory\n    var newChildren = []\n\n    var freeIndex = 0\n    var freeCount = bFree.length\n    var deletedItems = 0\n\n    // Iterate through a and match a node in b\n    // O(N) time,\n    for (var i = 0 ; i < aChildren.length; i++) {\n        var aItem = aChildren[i]\n        var itemIndex\n\n        if (aItem.key) {\n            if (bKeys.hasOwnProperty(aItem.key)) {\n                // Match up the old keys\n                itemIndex = bKeys[aItem.key]\n                newChildren.push(bChildren[itemIndex])\n\n            } else {\n                // Remove old keyed items\n                itemIndex = i - deletedItems++\n                newChildren.push(null)\n            }\n        } else {\n            // Match the item in a with the next free item in b\n            if (freeIndex < freeCount) {\n                itemIndex = bFree[freeIndex++]\n                newChildren.push(bChildren[itemIndex])\n            } else {\n                // There are no free items in b to match with\n                // the free items in a, so the extra free nodes\n                // are deleted.\n                itemIndex = i - deletedItems++\n                newChildren.push(null)\n            }\n        }\n    }\n\n    var lastFreeIndex = freeIndex >= bFree.length ?\n        bChildren.length :\n        bFree[freeIndex]\n\n    // Iterate through b and append any new keys\n    // O(M) time\n    for (var j = 0; j < bChildren.length; j++) {\n        var newItem = bChildren[j]\n\n        if (newItem.key) {\n            if (!aKeys.hasOwnProperty(newItem.key)) {\n                // Add any new keyed items\n                // We are adding new items to the end and then sorting them\n                // in place. In future we should insert new items in place.\n                newChildren.push(newItem)\n            }\n        } else if (j >= lastFreeIndex) {\n            // Add any leftover non-keyed items\n            newChildren.push(newItem)\n        }\n    }\n\n    var simulate = newChildren.slice()\n    var simulateIndex = 0\n    var removes = []\n    var inserts = []\n    var simulateItem\n\n    for (var k = 0; k < bChildren.length;) {\n        var wantedItem = bChildren[k]\n        simulateItem = simulate[simulateIndex]\n\n        // remove items\n        while (simulateItem === null && simulate.length) {\n            removes.push(remove(simulate, simulateIndex, null))\n            simulateItem = simulate[simulateIndex]\n        }\n\n        if (!simulateItem || simulateItem.key !== wantedItem.key) {\n            // if we need a key in this position...\n            if (wantedItem.key) {\n                if (simulateItem && simulateItem.key) {\n                    // if an insert doesn't put this key in place, it needs to move\n                    if (bKeys[simulateItem.key] !== k + 1) {\n                        removes.push(remove(simulate, simulateIndex, simulateItem.key))\n                        simulateItem = simulate[simulateIndex]\n                        // if the remove didn't put the wanted item in place, we need to insert it\n                        if (!simulateItem || simulateItem.key !== wantedItem.key) {\n                            inserts.push({key: wantedItem.key, to: k})\n                        }\n                        // items are matching, so skip ahead\n                        else {\n                            simulateIndex++\n                        }\n                    }\n                    else {\n                        inserts.push({key: wantedItem.key, to: k})\n                    }\n                }\n                else {\n                    inserts.push({key: wantedItem.key, to: k})\n                }\n                k++\n            }\n            // a key in simulate has no matching wanted key, remove it\n            else if (simulateItem && simulateItem.key) {\n                removes.push(remove(simulate, simulateIndex, simulateItem.key))\n            }\n        }\n        else {\n            simulateIndex++\n            k++\n        }\n    }\n\n    // remove all the remaining nodes from simulate\n    while(simulateIndex < simulate.length) {\n        simulateItem = simulate[simulateIndex]\n        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key))\n    }\n\n    // If the only moves we have are deletes then we can just\n    // let the delete patch remove these items.\n    if (removes.length === deletedItems && !inserts.length) {\n        return {\n            children: newChildren,\n            moves: null\n        }\n    }\n\n    return {\n        children: newChildren,\n        moves: {\n            removes: removes,\n            inserts: inserts\n        }\n    }\n}\n\nfunction remove(arr, index, key) {\n    arr.splice(index, 1)\n\n    return {\n        from: index,\n        key: key\n    }\n}\n\nfunction keyIndex(children) {\n    var keys = {}\n    var free = []\n    var length = children.length\n\n    for (var i = 0; i < length; i++) {\n        var child = children[i]\n\n        if (child.key) {\n            keys[child.key] = i\n        } else {\n            free.push(i)\n        }\n    }\n\n    return {\n        keys: keys,     // A hash of key name to index\n        free: free      // An array of unkeyed item indices\n    }\n}\n\nfunction appendPatch(apply, patch) {\n    if (apply) {\n        if (isArray(apply)) {\n            apply.push(patch)\n        } else {\n            apply = [apply, patch]\n        }\n\n        return apply\n    } else {\n        return patch\n    }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vtree/diff.js\n ** module id = 5\n ** module chunks = 0\n **/","var nativeIsArray = Array.isArray\nvar toString = Object.prototype.toString\n\nmodule.exports = nativeIsArray || isArray\n\nfunction isArray(obj) {\n    return toString.call(obj) === \"[object Array]\"\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/x-is-array/index.js\n ** module id = 6\n ** module chunks = 0\n **/","var version = require(\"./version\")\n\nVirtualPatch.NONE = 0\nVirtualPatch.VTEXT = 1\nVirtualPatch.VNODE = 2\nVirtualPatch.WIDGET = 3\nVirtualPatch.PROPS = 4\nVirtualPatch.ORDER = 5\nVirtualPatch.INSERT = 6\nVirtualPatch.REMOVE = 7\nVirtualPatch.THUNK = 8\n\nmodule.exports = VirtualPatch\n\nfunction VirtualPatch(type, vNode, patch) {\n    this.type = Number(type)\n    this.vNode = vNode\n    this.patch = patch\n}\n\nVirtualPatch.prototype.version = version\nVirtualPatch.prototype.type = \"VirtualPatch\"\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/vpatch.js\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = \"2\"\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/version.js\n ** module id = 8\n ** module chunks = 0\n **/","var version = require(\"./version\")\n\nmodule.exports = isVirtualNode\n\nfunction isVirtualNode(x) {\n    return x && x.type === \"VirtualNode\" && x.version === version\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/is-vnode.js\n ** module id = 9\n ** module chunks = 0\n **/","var version = require(\"./version\")\n\nmodule.exports = isVirtualText\n\nfunction isVirtualText(x) {\n    return x && x.type === \"VirtualText\" && x.version === version\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/is-vtext.js\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = isWidget\n\nfunction isWidget(w) {\n    return w && w.type === \"Widget\"\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/is-widget.js\n ** module id = 11\n ** module chunks = 0\n **/","module.exports = isThunk\r\n\r\nfunction isThunk(t) {\r\n    return t && t.type === \"Thunk\"\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/is-thunk.js\n ** module id = 12\n ** module chunks = 0\n **/","var isVNode = require(\"./is-vnode\")\nvar isVText = require(\"./is-vtext\")\nvar isWidget = require(\"./is-widget\")\nvar isThunk = require(\"./is-thunk\")\n\nmodule.exports = handleThunk\n\nfunction handleThunk(a, b) {\n    var renderedA = a\n    var renderedB = b\n\n    if (isThunk(b)) {\n        renderedB = renderThunk(b, a)\n    }\n\n    if (isThunk(a)) {\n        renderedA = renderThunk(a, null)\n    }\n\n    return {\n        a: renderedA,\n        b: renderedB\n    }\n}\n\nfunction renderThunk(thunk, previous) {\n    var renderedThunk = thunk.vnode\n\n    if (!renderedThunk) {\n        renderedThunk = thunk.vnode = thunk.render(previous)\n    }\n\n    if (!(isVNode(renderedThunk) ||\n            isVText(renderedThunk) ||\n            isWidget(renderedThunk))) {\n        throw new Error(\"thunk did not return a valid node\");\n    }\n\n    return renderedThunk\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/handle-thunk.js\n ** module id = 13\n ** module chunks = 0\n **/","var isObject = require(\"is-object\")\nvar isHook = require(\"../vnode/is-vhook\")\n\nmodule.exports = diffProps\n\nfunction diffProps(a, b) {\n    var diff\n\n    for (var aKey in a) {\n        if (!(aKey in b)) {\n            diff = diff || {}\n            diff[aKey] = undefined\n        }\n\n        var aValue = a[aKey]\n        var bValue = b[aKey]\n\n        if (aValue === bValue) {\n            continue\n        } else if (isObject(aValue) && isObject(bValue)) {\n            if (getPrototype(bValue) !== getPrototype(aValue)) {\n                diff = diff || {}\n                diff[aKey] = bValue\n            } else if (isHook(bValue)) {\n                 diff = diff || {}\n                 diff[aKey] = bValue\n            } else {\n                var objectDiff = diffProps(aValue, bValue)\n                if (objectDiff) {\n                    diff = diff || {}\n                    diff[aKey] = objectDiff\n                }\n            }\n        } else {\n            diff = diff || {}\n            diff[aKey] = bValue\n        }\n    }\n\n    for (var bKey in b) {\n        if (!(bKey in a)) {\n            diff = diff || {}\n            diff[bKey] = b[bKey]\n        }\n    }\n\n    return diff\n}\n\nfunction getPrototype(value) {\n  if (Object.getPrototypeOf) {\n    return Object.getPrototypeOf(value)\n  } else if (value.__proto__) {\n    return value.__proto__\n  } else if (value.constructor) {\n    return value.constructor.prototype\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vtree/diff-props.js\n ** module id = 14\n ** module chunks = 0\n **/","\"use strict\";\n\nmodule.exports = function isObject(x) {\n\treturn typeof x === \"object\" && x !== null;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/is-object/index.js\n ** module id = 15\n ** module chunks = 0\n **/","module.exports = isHook\n\nfunction isHook(hook) {\n    return hook &&\n      (typeof hook.hook === \"function\" && !hook.hasOwnProperty(\"hook\") ||\n       typeof hook.unhook === \"function\" && !hook.hasOwnProperty(\"unhook\"))\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/is-vhook.js\n ** module id = 16\n ** module chunks = 0\n **/","var patch = require(\"./vdom/patch.js\")\n\nmodule.exports = patch\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/patch.js\n ** module id = 17\n ** module chunks = 0\n **/","var document = require(\"global/document\")\nvar isArray = require(\"x-is-array\")\n\nvar render = require(\"./create-element\")\nvar domIndex = require(\"./dom-index\")\nvar patchOp = require(\"./patch-op\")\nmodule.exports = patch\n\nfunction patch(rootNode, patches, renderOptions) {\n    renderOptions = renderOptions || {}\n    renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch\n        ? renderOptions.patch\n        : patchRecursive\n    renderOptions.render = renderOptions.render || render\n\n    return renderOptions.patch(rootNode, patches, renderOptions)\n}\n\nfunction patchRecursive(rootNode, patches, renderOptions) {\n    var indices = patchIndices(patches)\n\n    if (indices.length === 0) {\n        return rootNode\n    }\n\n    var index = domIndex(rootNode, patches.a, indices)\n    var ownerDocument = rootNode.ownerDocument\n\n    if (!renderOptions.document && ownerDocument !== document) {\n        renderOptions.document = ownerDocument\n    }\n\n    for (var i = 0; i < indices.length; i++) {\n        var nodeIndex = indices[i]\n        rootNode = applyPatch(rootNode,\n            index[nodeIndex],\n            patches[nodeIndex],\n            renderOptions)\n    }\n\n    return rootNode\n}\n\nfunction applyPatch(rootNode, domNode, patchList, renderOptions) {\n    if (!domNode) {\n        return rootNode\n    }\n\n    var newNode\n\n    if (isArray(patchList)) {\n        for (var i = 0; i < patchList.length; i++) {\n            newNode = patchOp(patchList[i], domNode, renderOptions)\n\n            if (domNode === rootNode) {\n                rootNode = newNode\n            }\n        }\n    } else {\n        newNode = patchOp(patchList, domNode, renderOptions)\n\n        if (domNode === rootNode) {\n            rootNode = newNode\n        }\n    }\n\n    return rootNode\n}\n\nfunction patchIndices(patches) {\n    var indices = []\n\n    for (var key in patches) {\n        if (key !== \"a\") {\n            indices.push(Number(key))\n        }\n    }\n\n    return indices\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vdom/patch.js\n ** module id = 18\n ** module chunks = 0\n **/","var topLevel = typeof global !== 'undefined' ? global :\n    typeof window !== 'undefined' ? window : {}\nvar minDoc = require('min-document');\n\nif (typeof document !== 'undefined') {\n    module.exports = document;\n} else {\n    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n    if (!doccy) {\n        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n    }\n\n    module.exports = doccy;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/global/document.js\n ** module id = 19\n ** module chunks = 0\n **/","/* (ignored) */\n\n\n/*****************\n ** WEBPACK FOOTER\n ** min-document (ignored)\n ** module id = 20\n ** module chunks = 0\n **/","var document = require(\"global/document\")\n\nvar applyProperties = require(\"./apply-properties\")\n\nvar isVNode = require(\"../vnode/is-vnode.js\")\nvar isVText = require(\"../vnode/is-vtext.js\")\nvar isWidget = require(\"../vnode/is-widget.js\")\nvar handleThunk = require(\"../vnode/handle-thunk.js\")\n\nmodule.exports = createElement\n\nfunction createElement(vnode, opts) {\n    var doc = opts ? opts.document || document : document\n    var warn = opts ? opts.warn : null\n\n    vnode = handleThunk(vnode).a\n\n    if (isWidget(vnode)) {\n        return vnode.init()\n    } else if (isVText(vnode)) {\n        return doc.createTextNode(vnode.text)\n    } else if (!isVNode(vnode)) {\n        if (warn) {\n            warn(\"Item is not a valid virtual dom node\", vnode)\n        }\n        return null\n    }\n\n    var node = (vnode.namespace === null) ?\n        doc.createElement(vnode.tagName) :\n        doc.createElementNS(vnode.namespace, vnode.tagName)\n\n    var props = vnode.properties\n    applyProperties(node, props)\n\n    var children = vnode.children\n\n    for (var i = 0; i < children.length; i++) {\n        var childNode = createElement(children[i], opts)\n        if (childNode) {\n            node.appendChild(childNode)\n        }\n    }\n\n    return node\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vdom/create-element.js\n ** module id = 21\n ** module chunks = 0\n **/","var isObject = require(\"is-object\")\nvar isHook = require(\"../vnode/is-vhook.js\")\n\nmodule.exports = applyProperties\n\nfunction applyProperties(node, props, previous) {\n    for (var propName in props) {\n        var propValue = props[propName]\n\n        if (propValue === undefined) {\n            removeProperty(node, propName, propValue, previous);\n        } else if (isHook(propValue)) {\n            removeProperty(node, propName, propValue, previous)\n            if (propValue.hook) {\n                propValue.hook(node,\n                    propName,\n                    previous ? previous[propName] : undefined)\n            }\n        } else {\n            if (isObject(propValue)) {\n                patchObject(node, props, previous, propName, propValue);\n            } else {\n                node[propName] = propValue\n            }\n        }\n    }\n}\n\nfunction removeProperty(node, propName, propValue, previous) {\n    if (previous) {\n        var previousValue = previous[propName]\n\n        if (!isHook(previousValue)) {\n            if (propName === \"attributes\") {\n                for (var attrName in previousValue) {\n                    node.removeAttribute(attrName)\n                }\n            } else if (propName === \"style\") {\n                for (var i in previousValue) {\n                    node.style[i] = \"\"\n                }\n            } else if (typeof previousValue === \"string\") {\n                node[propName] = \"\"\n            } else {\n                node[propName] = null\n            }\n        } else if (previousValue.unhook) {\n            previousValue.unhook(node, propName, propValue)\n        }\n    }\n}\n\nfunction patchObject(node, props, previous, propName, propValue) {\n    var previousValue = previous ? previous[propName] : undefined\n\n    // Set attributes\n    if (propName === \"attributes\") {\n        for (var attrName in propValue) {\n            var attrValue = propValue[attrName]\n\n            if (attrValue === undefined) {\n                node.removeAttribute(attrName)\n            } else {\n                node.setAttribute(attrName, attrValue)\n            }\n        }\n\n        return\n    }\n\n    if(previousValue && isObject(previousValue) &&\n        getPrototype(previousValue) !== getPrototype(propValue)) {\n        node[propName] = propValue\n        return\n    }\n\n    if (!isObject(node[propName])) {\n        node[propName] = {}\n    }\n\n    var replacer = propName === \"style\" ? \"\" : undefined\n\n    for (var k in propValue) {\n        var value = propValue[k]\n        node[propName][k] = (value === undefined) ? replacer : value\n    }\n}\n\nfunction getPrototype(value) {\n    if (Object.getPrototypeOf) {\n        return Object.getPrototypeOf(value)\n    } else if (value.__proto__) {\n        return value.__proto__\n    } else if (value.constructor) {\n        return value.constructor.prototype\n    }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vdom/apply-properties.js\n ** module id = 22\n ** module chunks = 0\n **/","// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.\n// We don't want to read all of the DOM nodes in the tree so we use\n// the in-order tree indexing to eliminate recursion down certain branches.\n// We only recurse into a DOM node if we know that it contains a child of\n// interest.\n\nvar noChild = {}\n\nmodule.exports = domIndex\n\nfunction domIndex(rootNode, tree, indices, nodes) {\n    if (!indices || indices.length === 0) {\n        return {}\n    } else {\n        indices.sort(ascending)\n        return recurse(rootNode, tree, indices, nodes, 0)\n    }\n}\n\nfunction recurse(rootNode, tree, indices, nodes, rootIndex) {\n    nodes = nodes || {}\n\n\n    if (rootNode) {\n        if (indexInRange(indices, rootIndex, rootIndex)) {\n            nodes[rootIndex] = rootNode\n        }\n\n        var vChildren = tree.children\n\n        if (vChildren) {\n\n            var childNodes = rootNode.childNodes\n\n            for (var i = 0; i < tree.children.length; i++) {\n                rootIndex += 1\n\n                var vChild = vChildren[i] || noChild\n                var nextIndex = rootIndex + (vChild.count || 0)\n\n                // skip recursion down the tree if there are no nodes down here\n                if (indexInRange(indices, rootIndex, nextIndex)) {\n                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)\n                }\n\n                rootIndex = nextIndex\n            }\n        }\n    }\n\n    return nodes\n}\n\n// Binary search for an index in the interval [left, right]\nfunction indexInRange(indices, left, right) {\n    if (indices.length === 0) {\n        return false\n    }\n\n    var minIndex = 0\n    var maxIndex = indices.length - 1\n    var currentIndex\n    var currentItem\n\n    while (minIndex <= maxIndex) {\n        currentIndex = ((maxIndex + minIndex) / 2) >> 0\n        currentItem = indices[currentIndex]\n\n        if (minIndex === maxIndex) {\n            return currentItem >= left && currentItem <= right\n        } else if (currentItem < left) {\n            minIndex = currentIndex + 1\n        } else  if (currentItem > right) {\n            maxIndex = currentIndex - 1\n        } else {\n            return true\n        }\n    }\n\n    return false;\n}\n\nfunction ascending(a, b) {\n    return a > b ? 1 : -1\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vdom/dom-index.js\n ** module id = 23\n ** module chunks = 0\n **/","var applyProperties = require(\"./apply-properties\")\n\nvar isWidget = require(\"../vnode/is-widget.js\")\nvar VPatch = require(\"../vnode/vpatch.js\")\n\nvar updateWidget = require(\"./update-widget\")\n\nmodule.exports = applyPatch\n\nfunction applyPatch(vpatch, domNode, renderOptions) {\n    var type = vpatch.type\n    var vNode = vpatch.vNode\n    var patch = vpatch.patch\n\n    switch (type) {\n        case VPatch.REMOVE:\n            return removeNode(domNode, vNode)\n        case VPatch.INSERT:\n            return insertNode(domNode, patch, renderOptions)\n        case VPatch.VTEXT:\n            return stringPatch(domNode, vNode, patch, renderOptions)\n        case VPatch.WIDGET:\n            return widgetPatch(domNode, vNode, patch, renderOptions)\n        case VPatch.VNODE:\n            return vNodePatch(domNode, vNode, patch, renderOptions)\n        case VPatch.ORDER:\n            reorderChildren(domNode, patch)\n            return domNode\n        case VPatch.PROPS:\n            applyProperties(domNode, patch, vNode.properties)\n            return domNode\n        case VPatch.THUNK:\n            return replaceRoot(domNode,\n                renderOptions.patch(domNode, patch, renderOptions))\n        default:\n            return domNode\n    }\n}\n\nfunction removeNode(domNode, vNode) {\n    var parentNode = domNode.parentNode\n\n    if (parentNode) {\n        parentNode.removeChild(domNode)\n    }\n\n    destroyWidget(domNode, vNode);\n\n    return null\n}\n\nfunction insertNode(parentNode, vNode, renderOptions) {\n    var newNode = renderOptions.render(vNode, renderOptions)\n\n    if (parentNode) {\n        parentNode.appendChild(newNode)\n    }\n\n    return parentNode\n}\n\nfunction stringPatch(domNode, leftVNode, vText, renderOptions) {\n    var newNode\n\n    if (domNode.nodeType === 3) {\n        domNode.replaceData(0, domNode.length, vText.text)\n        newNode = domNode\n    } else {\n        var parentNode = domNode.parentNode\n        newNode = renderOptions.render(vText, renderOptions)\n\n        if (parentNode && newNode !== domNode) {\n            parentNode.replaceChild(newNode, domNode)\n        }\n    }\n\n    return newNode\n}\n\nfunction widgetPatch(domNode, leftVNode, widget, renderOptions) {\n    var updating = updateWidget(leftVNode, widget)\n    var newNode\n\n    if (updating) {\n        newNode = widget.update(leftVNode, domNode) || domNode\n    } else {\n        newNode = renderOptions.render(widget, renderOptions)\n    }\n\n    var parentNode = domNode.parentNode\n\n    if (parentNode && newNode !== domNode) {\n        parentNode.replaceChild(newNode, domNode)\n    }\n\n    if (!updating) {\n        destroyWidget(domNode, leftVNode)\n    }\n\n    return newNode\n}\n\nfunction vNodePatch(domNode, leftVNode, vNode, renderOptions) {\n    var parentNode = domNode.parentNode\n    var newNode = renderOptions.render(vNode, renderOptions)\n\n    if (parentNode && newNode !== domNode) {\n        parentNode.replaceChild(newNode, domNode)\n    }\n\n    return newNode\n}\n\nfunction destroyWidget(domNode, w) {\n    if (typeof w.destroy === \"function\" && isWidget(w)) {\n        w.destroy(domNode)\n    }\n}\n\nfunction reorderChildren(domNode, moves) {\n    var childNodes = domNode.childNodes\n    var keyMap = {}\n    var node\n    var remove\n    var insert\n\n    for (var i = 0; i < moves.removes.length; i++) {\n        remove = moves.removes[i]\n        node = childNodes[remove.from]\n        if (remove.key) {\n            keyMap[remove.key] = node\n        }\n        domNode.removeChild(node)\n    }\n\n    var length = childNodes.length\n    for (var j = 0; j < moves.inserts.length; j++) {\n        insert = moves.inserts[j]\n        node = keyMap[insert.key]\n        // this is the weirdest bug i've ever seen in webkit\n        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to])\n    }\n}\n\nfunction replaceRoot(oldRoot, newRoot) {\n    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {\n        oldRoot.parentNode.replaceChild(newRoot, oldRoot)\n    }\n\n    return newRoot;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vdom/patch-op.js\n ** module id = 24\n ** module chunks = 0\n **/","var isWidget = require(\"../vnode/is-widget.js\")\n\nmodule.exports = updateWidget\n\nfunction updateWidget(a, b) {\n    if (isWidget(a) && isWidget(b)) {\n        if (\"name\" in a && \"name\" in b) {\n            return a.id === b.id\n        } else {\n            return a.init === b.init\n        }\n    }\n\n    return false\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vdom/update-widget.js\n ** module id = 25\n ** module chunks = 0\n **/","var h = require(\"./virtual-hyperscript/index.js\")\n\nmodule.exports = h\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/h.js\n ** module id = 26\n ** module chunks = 0\n **/","'use strict';\n\nvar isArray = require('x-is-array');\n\nvar VNode = require('../vnode/vnode.js');\nvar VText = require('../vnode/vtext.js');\nvar isVNode = require('../vnode/is-vnode');\nvar isVText = require('../vnode/is-vtext');\nvar isWidget = require('../vnode/is-widget');\nvar isHook = require('../vnode/is-vhook');\nvar isVThunk = require('../vnode/is-thunk');\n\nvar parseTag = require('./parse-tag.js');\nvar softSetHook = require('./hooks/soft-set-hook.js');\nvar evHook = require('./hooks/ev-hook.js');\n\nmodule.exports = h;\n\nfunction h(tagName, properties, children) {\n    var childNodes = [];\n    var tag, props, key, namespace;\n\n    if (!children && isChildren(properties)) {\n        children = properties;\n        props = {};\n    }\n\n    props = props || properties || {};\n    tag = parseTag(tagName, props);\n\n    // support keys\n    if (props.hasOwnProperty('key')) {\n        key = props.key;\n        props.key = undefined;\n    }\n\n    // support namespace\n    if (props.hasOwnProperty('namespace')) {\n        namespace = props.namespace;\n        props.namespace = undefined;\n    }\n\n    // fix cursor bug\n    if (tag === 'INPUT' &&\n        !namespace &&\n        props.hasOwnProperty('value') &&\n        props.value !== undefined &&\n        !isHook(props.value)\n    ) {\n        props.value = softSetHook(props.value);\n    }\n\n    transformProperties(props);\n\n    if (children !== undefined && children !== null) {\n        addChild(children, childNodes, tag, props);\n    }\n\n\n    return new VNode(tag, props, childNodes, key, namespace);\n}\n\nfunction addChild(c, childNodes, tag, props) {\n    if (typeof c === 'string') {\n        childNodes.push(new VText(c));\n    } else if (typeof c === 'number') {\n        childNodes.push(new VText(String(c)));\n    } else if (isChild(c)) {\n        childNodes.push(c);\n    } else if (isArray(c)) {\n        for (var i = 0; i < c.length; i++) {\n            addChild(c[i], childNodes, tag, props);\n        }\n    } else if (c === null || c === undefined) {\n        return;\n    } else {\n        throw UnexpectedVirtualElement({\n            foreignObject: c,\n            parentVnode: {\n                tagName: tag,\n                properties: props\n            }\n        });\n    }\n}\n\nfunction transformProperties(props) {\n    for (var propName in props) {\n        if (props.hasOwnProperty(propName)) {\n            var value = props[propName];\n\n            if (isHook(value)) {\n                continue;\n            }\n\n            if (propName.substr(0, 3) === 'ev-') {\n                // add ev-foo support\n                props[propName] = evHook(value);\n            }\n        }\n    }\n}\n\nfunction isChild(x) {\n    return isVNode(x) || isVText(x) || isWidget(x) || isVThunk(x);\n}\n\nfunction isChildren(x) {\n    return typeof x === 'string' || isArray(x) || isChild(x);\n}\n\nfunction UnexpectedVirtualElement(data) {\n    var err = new Error();\n\n    err.type = 'virtual-hyperscript.unexpected.virtual-element';\n    err.message = 'Unexpected virtual child passed to h().\\n' +\n        'Expected a VNode / Vthunk / VWidget / string but:\\n' +\n        'got:\\n' +\n        errorString(data.foreignObject) +\n        '.\\n' +\n        'The parent vnode is:\\n' +\n        errorString(data.parentVnode)\n        '\\n' +\n        'Suggested fix: change your `h(..., [ ... ])` callsite.';\n    err.foreignObject = data.foreignObject;\n    err.parentVnode = data.parentVnode;\n\n    return err;\n}\n\nfunction errorString(obj) {\n    try {\n        return JSON.stringify(obj, null, '    ');\n    } catch (e) {\n        return String(obj);\n    }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/virtual-hyperscript/index.js\n ** module id = 27\n ** module chunks = 0\n **/","var version = require(\"./version\")\nvar isVNode = require(\"./is-vnode\")\nvar isWidget = require(\"./is-widget\")\nvar isThunk = require(\"./is-thunk\")\nvar isVHook = require(\"./is-vhook\")\n\nmodule.exports = VirtualNode\n\nvar noProperties = {}\nvar noChildren = []\n\nfunction VirtualNode(tagName, properties, children, key, namespace) {\n    this.tagName = tagName\n    this.properties = properties || noProperties\n    this.children = children || noChildren\n    this.key = key != null ? String(key) : undefined\n    this.namespace = (typeof namespace === \"string\") ? namespace : null\n\n    var count = (children && children.length) || 0\n    var descendants = 0\n    var hasWidgets = false\n    var hasThunks = false\n    var descendantHooks = false\n    var hooks\n\n    for (var propName in properties) {\n        if (properties.hasOwnProperty(propName)) {\n            var property = properties[propName]\n            if (isVHook(property) && property.unhook) {\n                if (!hooks) {\n                    hooks = {}\n                }\n\n                hooks[propName] = property\n            }\n        }\n    }\n\n    for (var i = 0; i < count; i++) {\n        var child = children[i]\n        if (isVNode(child)) {\n            descendants += child.count || 0\n\n            if (!hasWidgets && child.hasWidgets) {\n                hasWidgets = true\n            }\n\n            if (!hasThunks && child.hasThunks) {\n                hasThunks = true\n            }\n\n            if (!descendantHooks && (child.hooks || child.descendantHooks)) {\n                descendantHooks = true\n            }\n        } else if (!hasWidgets && isWidget(child)) {\n            if (typeof child.destroy === \"function\") {\n                hasWidgets = true\n            }\n        } else if (!hasThunks && isThunk(child)) {\n            hasThunks = true;\n        }\n    }\n\n    this.count = count + descendants\n    this.hasWidgets = hasWidgets\n    this.hasThunks = hasThunks\n    this.hooks = hooks\n    this.descendantHooks = descendantHooks\n}\n\nVirtualNode.prototype.version = version\nVirtualNode.prototype.type = \"VirtualNode\"\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/vnode.js\n ** module id = 28\n ** module chunks = 0\n **/","var version = require(\"./version\")\n\nmodule.exports = VirtualText\n\nfunction VirtualText(text) {\n    this.text = String(text)\n}\n\nVirtualText.prototype.version = version\nVirtualText.prototype.type = \"VirtualText\"\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/vnode/vtext.js\n ** module id = 29\n ** module chunks = 0\n **/","'use strict';\n\nvar split = require('browser-split');\n\nvar classIdSplit = /([\\.#]?[a-zA-Z0-9\\u007F-\\uFFFF_:-]+)/;\nvar notClassId = /^\\.|#/;\n\nmodule.exports = parseTag;\n\nfunction parseTag(tag, props) {\n    if (!tag) {\n        return 'DIV';\n    }\n\n    var noId = !(props.hasOwnProperty('id'));\n\n    var tagParts = split(tag, classIdSplit);\n    var tagName = null;\n\n    if (notClassId.test(tagParts[1])) {\n        tagName = 'DIV';\n    }\n\n    var classes, part, type, i;\n\n    for (i = 0; i < tagParts.length; i++) {\n        part = tagParts[i];\n\n        if (!part) {\n            continue;\n        }\n\n        type = part.charAt(0);\n\n        if (!tagName) {\n            tagName = part;\n        } else if (type === '.') {\n            classes = classes || [];\n            classes.push(part.substring(1, part.length));\n        } else if (type === '#' && noId) {\n            props.id = part.substring(1, part.length);\n        }\n    }\n\n    if (classes) {\n        if (props.className) {\n            classes.push(props.className);\n        }\n\n        props.className = classes.join(' ');\n    }\n\n    return props.namespace ? tagName : tagName.toUpperCase();\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/virtual-hyperscript/parse-tag.js\n ** module id = 30\n ** module chunks = 0\n **/","/*!\n * Cross-Browser Split 1.1.1\n * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>\n * Available under the MIT License\n * ECMAScript compliant, uniform cross-browser split method\n */\n\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * split('a b c d', ' ');\n * // -> ['a', 'b', 'c', 'd']\n *\n * // With limit\n * split('a b c d', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * split('..word1 word2..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', ' ', 'word', '2', '..']\n */\nmodule.exports = (function split(undef) {\n\n  var nativeSplit = String.prototype.split,\n    compliantExecNpcg = /()??/.exec(\"\")[1] === undef,\n    // NPCG: nonparticipating capturing group\n    self;\n\n  self = function(str, separator, limit) {\n    // If `separator` is not a regex, use `nativeSplit`\n    if (Object.prototype.toString.call(separator) !== \"[object RegExp]\") {\n      return nativeSplit.call(str, separator, limit);\n    }\n    var output = [],\n      flags = (separator.ignoreCase ? \"i\" : \"\") + (separator.multiline ? \"m\" : \"\") + (separator.extended ? \"x\" : \"\") + // Proposed for ES6\n      (separator.sticky ? \"y\" : \"\"),\n      // Firefox 3+\n      lastLastIndex = 0,\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      separator = new RegExp(separator.source, flags + \"g\"),\n      separator2, match, lastIndex, lastLength;\n    str += \"\"; // Type-convert\n    if (!compliantExecNpcg) {\n      // Doesn't need flags gy, but they don't hurt\n      separator2 = new RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags);\n    }\n    /* Values for `limit`, per the spec:\n     * If undefined: 4294967295 // Math.pow(2, 32) - 1\n     * If 0, Infinity, or NaN: 0\n     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n     * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n     * If other: Type-convert, then use the above rules\n     */\n    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1\n    limit >>> 0; // ToUint32(limit)\n    while (match = separator.exec(str)) {\n      // `separator.lastIndex` is not reliable cross-browser\n      lastIndex = match.index + match[0].length;\n      if (lastIndex > lastLastIndex) {\n        output.push(str.slice(lastLastIndex, match.index));\n        // Fix browsers whose `exec` methods don't consistently return `undefined` for\n        // nonparticipating capturing groups\n        if (!compliantExecNpcg && match.length > 1) {\n          match[0].replace(separator2, function() {\n            for (var i = 1; i < arguments.length - 2; i++) {\n              if (arguments[i] === undef) {\n                match[i] = undef;\n              }\n            }\n          });\n        }\n        if (match.length > 1 && match.index < str.length) {\n          Array.prototype.push.apply(output, match.slice(1));\n        }\n        lastLength = match[0].length;\n        lastLastIndex = lastIndex;\n        if (output.length >= limit) {\n          break;\n        }\n      }\n      if (separator.lastIndex === match.index) {\n        separator.lastIndex++; // Avoid an infinite loop\n      }\n    }\n    if (lastLastIndex === str.length) {\n      if (lastLength || !separator.test(\"\")) {\n        output.push(\"\");\n      }\n    } else {\n      output.push(str.slice(lastLastIndex));\n    }\n    return output.length > limit ? output.slice(0, limit) : output;\n  };\n\n  return self;\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/browser-split/index.js\n ** module id = 31\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = SoftSetHook;\n\nfunction SoftSetHook(value) {\n    if (!(this instanceof SoftSetHook)) {\n        return new SoftSetHook(value);\n    }\n\n    this.value = value;\n}\n\nSoftSetHook.prototype.hook = function (node, propertyName) {\n    if (node[propertyName] !== this.value) {\n        node[propertyName] = this.value;\n    }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/virtual-hyperscript/hooks/soft-set-hook.js\n ** module id = 32\n ** module chunks = 0\n **/","'use strict';\n\nvar EvStore = require('ev-store');\n\nmodule.exports = EvHook;\n\nfunction EvHook(value) {\n    if (!(this instanceof EvHook)) {\n        return new EvHook(value);\n    }\n\n    this.value = value;\n}\n\nEvHook.prototype.hook = function (node, propertyName) {\n    var es = EvStore(node);\n    var propName = propertyName.substr(3);\n\n    es[propName] = this.value;\n};\n\nEvHook.prototype.unhook = function(node, propertyName) {\n    var es = EvStore(node);\n    var propName = propertyName.substr(3);\n\n    es[propName] = undefined;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/virtual-hyperscript/hooks/ev-hook.js\n ** module id = 33\n ** module chunks = 0\n **/","'use strict';\n\nvar OneVersionConstraint = require('individual/one-version');\n\nvar MY_VERSION = '7';\nOneVersionConstraint('ev-store', MY_VERSION);\n\nvar hashKey = '__EV_STORE_KEY@' + MY_VERSION;\n\nmodule.exports = EvStore;\n\nfunction EvStore(elem) {\n    var hash = elem[hashKey];\n\n    if (!hash) {\n        hash = elem[hashKey] = {};\n    }\n\n    return hash;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ev-store/index.js\n ** module id = 34\n ** module chunks = 0\n **/","'use strict';\n\nvar Individual = require('./index.js');\n\nmodule.exports = OneVersion;\n\nfunction OneVersion(moduleName, version, defaultValue) {\n    var key = '__INDIVIDUAL_ONE_VERSION_' + moduleName;\n    var enforceKey = key + '_ENFORCE_SINGLETON';\n\n    var versionValue = Individual(enforceKey, version);\n\n    if (versionValue !== version) {\n        throw new Error('Can only have one copy of ' +\n            moduleName + '.\\n' +\n            'You already have version ' + versionValue +\n            ' installed.\\n' +\n            'This means you cannot install version ' + version);\n    }\n\n    return Individual(key, defaultValue);\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/individual/one-version.js\n ** module id = 35\n ** module chunks = 0\n **/","'use strict';\n\n/*global window, global*/\n\nvar root = typeof window !== 'undefined' ?\n    window : typeof global !== 'undefined' ?\n    global : {};\n\nmodule.exports = Individual;\n\nfunction Individual(key, value) {\n    if (key in root) {\n        return root[key];\n    }\n\n    root[key] = value;\n\n    return value;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/individual/index.js\n ** module id = 36\n ** module chunks = 0\n **/","var createElement = require(\"./vdom/create-element.js\")\n\nmodule.exports = createElement\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/virtual-dom/create-element.js\n ** module id = 37\n ** module chunks = 0\n **/"],"sourceRoot":""}