{"version":3,"sources":["../../../pages/fabletest.fs"],"names":[],"mappings":"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","file":"fabletest.js","sourceRoot":"/Users/tforkmann/Dropbox/Programming/f#/MinimalFable/code/FrontEnd/web/content","sourcesContent":["ï»¿module MinimalFableSuave.FrontEnd.Pages.Fabletest\n\nopen System\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\n\nmodule SudokuSolver =\n    open System.Collections.Generic\n    \n    type Box = int\n    type Sudoku = Box array array\n    \n    let rows = id\n    let cols (sudoku:Sudoku) =\n        sudoku\n        |> Array.mapi (fun a row -> row |> Array.mapi (fun b cell -> sudoku.[b].[a]))\n    \n    let getBoxIndex count row col = \n       let n = row/count\n       let m = col/count\n       n * count + m\n    \n    let boxes (sudoku:Sudoku) = \n        let d = sudoku |> Array.length |> float |> System.Math.Sqrt |> int\n        let list = new List<_>()\n        for a in 0..(d*d) - 1 do list.Add(new List<_>())\n    \n        for a in 0..(Array.length sudoku - 1) do\n            for b in 0..(Array.length sudoku - 1) do\n                list.[getBoxIndex d a b].Add(sudoku.[a].[b])\n    \n        list \n          |> Seq.map Seq.toArray\n      \n    let toSudoku x : Sudoku = \n        x\n        |> Seq.map Seq.toArray\n        |> Seq.toArray\n    \n    let allUnique numbers =\n        let set = new HashSet<_>()\n        numbers\n        |> Seq.filter ((<>) 0)\n        |> Seq.forall set.Add\n    \n    let solvable sudoku =\n        rows sudoku\n        |> Seq.append (cols sudoku)\n        |> Seq.append (boxes sudoku)\n        |> Seq.forall allUnique\n    \n    let replaceAtPos (x:Sudoku) row col newValue :Sudoku =     \n        [| for a in 0..(Array.length x - 1) ->\n            [| for b in 0..(Array.length x - 1) -> \n                if a = row && b = col then newValue else x.[a].[b] |] |]\n    \n    let rec substitute row col (x:Sudoku) = \n        let a,b = if col >= Array.length x then row+1,0 else row,col\n        if a >= Array.length x then seq { yield x } else\n        if x.[a].[b] = 0 then \n            [1..Array.length x]           \n                |> Seq.map (replaceAtPos x a b)  \n                |> Seq.filter solvable                     \n                |> Seq.map (substitute a (b+1))\n                |> Seq.concat\n         else substitute a (b+1) x\n    \n    let getFirstSolution = substitute 0 0 >> Seq.head\n\nopen SudokuSolver\n\ntype SudokuAppState = {\n    Sudoku:Sudoku\n}\ntype Position = int * int\ntype Val = int\ntype Actions = \n    | Solve\n    | ChangeBox of Position * Val\n\nlet update (model:Sudoku) command =\n    match command with\n    | Solve -> getFirstSolution model\n    | ChangeBox ((x,y),v) ->\n        model.[x].[y] <- v\n        model\n    |> (fun m -> m, []) \n\nlet initModel = \n            [[0; 0; 8;  3; 0; 0;  6; 0; 0]\n             [0; 0; 4;  0; 0; 0;  0; 1; 0]\n             [6; 7; 0;  0; 8; 0;  0; 0; 0]\n\n             [0; 1; 6;  4; 3; 0;  0; 0; 0]\n             [0; 0; 0;  7; 9; 0;  0; 2; 0]\n             [0; 9; 0;  0; 0; 0;  4; 0; 1]\n\n             [0; 0; 0;  9; 1; 0;  0; 0; 5]\n             [0; 0; 3;  0; 5; 0;  0; 0; 2]\n             [0; 5; 0;  0; 0; 0;  0; 7; 4]]\n              |> toSudoku\n\nopen Fable.Helpers.Virtualdom\nopen Fable.Helpers.Virtualdom.App\nopen Fable.Helpers.Virtualdom.Html\n\nlet inline onInput x = onEvent \"oninput\" (fun e -> x (unbox e?target?value))\nlet maxlength (i:int) = attribute \"maxlength\" (string i) \nlet view (model:Sudoku) = \n    let inputs =\n         div [] \n            [for i in 0 .. model.Length-1 ->\n              div \n                [] \n                [ for j in 0 .. model.Length-1 ->\n                        input\n                            [\n                                maxlength 1\n                                property \"value\" \n                                    (match model.[i].[j] with\n                                        | 0 -> unbox \"\"\n                                        | v -> unbox (v.ToString()))\n                                onInput (fun x -> ChangeBox ((i,j), int (unbox x)))\n                            ]\n                ]\n            ]\n\n\n    div [] \n        [ h1 [ ] [text \"Sudoku\"]\n          div [] \n            [\n                inputs\n                br []\n                button [\n                    attribute \"class\" \"button\"\n                    onMouseClick (fun _ -> Solve )\n                ] [ text \"Solve\" ]\n            ]\n        ]\n\nopen Fable.Import.Browser\ncreateApp initModel view update\n|> withStartNodeSelector \"#todoapp\"\n|> withSubscriber \"allseeingeye\" (fun x -> window.console.log(\"Something happened: \", x))\n|> start renderer "]}